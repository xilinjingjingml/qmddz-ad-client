/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = protobuf

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["rpddz"] || ($protobuf.roots["rpddz"] = {});

$root.proto_cb_login_req = (function() {

    /**
     * Properties of a proto_cb_login_req.
     * @exports Iproto_cb_login_req
     * @interface Iproto_cb_login_req
     * @property {number|Long} plyGuid proto_cb_login_req plyGuid
     * @property {string} plyTicket proto_cb_login_req plyTicket
     * @property {number} version proto_cb_login_req version
     * @property {string} extParam proto_cb_login_req extParam
     * @property {number} mainGameId proto_cb_login_req mainGameId
     * @property {number} gameGroup proto_cb_login_req gameGroup
     */

    /**
     * Constructs a new proto_cb_login_req.
     * @exports proto_cb_login_req
     * @classdesc Represents a proto_cb_login_req.
     * @implements Iproto_cb_login_req
     * @constructor
     * @param {Iproto_cb_login_req=} [properties] Properties to set
     */
    function proto_cb_login_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cb_login_req plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_cb_login_req
     * @instance
     */
    proto_cb_login_req.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_cb_login_req plyTicket.
     * @member {string} plyTicket
     * @memberof proto_cb_login_req
     * @instance
     */
    proto_cb_login_req.prototype.plyTicket = "";

    /**
     * proto_cb_login_req version.
     * @member {number} version
     * @memberof proto_cb_login_req
     * @instance
     */
    proto_cb_login_req.prototype.version = 0;

    /**
     * proto_cb_login_req extParam.
     * @member {string} extParam
     * @memberof proto_cb_login_req
     * @instance
     */
    proto_cb_login_req.prototype.extParam = "";

    /**
     * proto_cb_login_req mainGameId.
     * @member {number} mainGameId
     * @memberof proto_cb_login_req
     * @instance
     */
    proto_cb_login_req.prototype.mainGameId = 0;

    /**
     * proto_cb_login_req gameGroup.
     * @member {number} gameGroup
     * @memberof proto_cb_login_req
     * @instance
     */
    proto_cb_login_req.prototype.gameGroup = 0;

    /**
     * Creates a new proto_cb_login_req instance using the specified properties.
     * @function create
     * @memberof proto_cb_login_req
     * @static
     * @param {Iproto_cb_login_req=} [properties] Properties to set
     * @returns {proto_cb_login_req} proto_cb_login_req instance
     */
    proto_cb_login_req.create = function create(properties) {
        return new proto_cb_login_req(properties);
    };

    /**
     * Encodes the specified proto_cb_login_req message. Does not implicitly {@link proto_cb_login_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cb_login_req
     * @static
     * @param {Iproto_cb_login_req} message proto_cb_login_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_login_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.plyTicket);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.version);
        writer.uint32(/* id 4, wireType 2 =*/34).string(message.extParam);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.mainGameId);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.gameGroup);
        return writer;
    };

    /**
     * Encodes the specified proto_cb_login_req message, length delimited. Does not implicitly {@link proto_cb_login_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cb_login_req
     * @static
     * @param {Iproto_cb_login_req} message proto_cb_login_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_login_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cb_login_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cb_login_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cb_login_req} proto_cb_login_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_login_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cb_login_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            case 2:
                message.plyTicket = reader.string();
                break;
            case 3:
                message.version = reader.int32();
                break;
            case 4:
                message.extParam = reader.string();
                break;
            case 5:
                message.mainGameId = reader.int32();
                break;
            case 6:
                message.gameGroup = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        if (!message.hasOwnProperty("plyTicket"))
            throw $util.ProtocolError("missing required 'plyTicket'", { instance: message });
        if (!message.hasOwnProperty("version"))
            throw $util.ProtocolError("missing required 'version'", { instance: message });
        if (!message.hasOwnProperty("extParam"))
            throw $util.ProtocolError("missing required 'extParam'", { instance: message });
        if (!message.hasOwnProperty("mainGameId"))
            throw $util.ProtocolError("missing required 'mainGameId'", { instance: message });
        if (!message.hasOwnProperty("gameGroup"))
            throw $util.ProtocolError("missing required 'gameGroup'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cb_login_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cb_login_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cb_login_req} proto_cb_login_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_login_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cb_login_req message.
     * @function verify
     * @memberof proto_cb_login_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cb_login_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        if (!$util.isString(message.plyTicket))
            return "plyTicket: string expected";
        if (!$util.isInteger(message.version))
            return "version: integer expected";
        if (!$util.isString(message.extParam))
            return "extParam: string expected";
        if (!$util.isInteger(message.mainGameId))
            return "mainGameId: integer expected";
        if (!$util.isInteger(message.gameGroup))
            return "gameGroup: integer expected";
        return null;
    };

    /**
     * Creates a proto_cb_login_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cb_login_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cb_login_req} proto_cb_login_req
     */
    proto_cb_login_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cb_login_req)
            return object;
        var message = new $root.proto_cb_login_req();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        if (object.plyTicket != null)
            message.plyTicket = String(object.plyTicket);
        if (object.version != null)
            message.version = object.version | 0;
        if (object.extParam != null)
            message.extParam = String(object.extParam);
        if (object.mainGameId != null)
            message.mainGameId = object.mainGameId | 0;
        if (object.gameGroup != null)
            message.gameGroup = object.gameGroup | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cb_login_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cb_login_req
     * @static
     * @param {proto_cb_login_req} message proto_cb_login_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cb_login_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
            object.plyTicket = "";
            object.version = 0;
            object.extParam = "";
            object.mainGameId = 0;
            object.gameGroup = 0;
        }
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        if (message.plyTicket != null && message.hasOwnProperty("plyTicket"))
            object.plyTicket = message.plyTicket;
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.extParam != null && message.hasOwnProperty("extParam"))
            object.extParam = message.extParam;
        if (message.mainGameId != null && message.hasOwnProperty("mainGameId"))
            object.mainGameId = message.mainGameId;
        if (message.gameGroup != null && message.hasOwnProperty("gameGroup"))
            object.gameGroup = message.gameGroup;
        return object;
    };

    /**
     * Converts this proto_cb_login_req to JSON.
     * @function toJSON
     * @memberof proto_cb_login_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cb_login_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cb_login_req;
})();

$root.proto_bc_login_ack = (function() {

    /**
     * Properties of a proto_bc_login_ack.
     * @exports Iproto_bc_login_ack
     * @interface Iproto_bc_login_ack
     * @property {number} ret proto_bc_login_ack ret
     * @property {Iproto_PlyBaseData} plyBaseData proto_bc_login_ack plyBaseData
     * @property {Iproto_PlayerStatus} plyStatus proto_bc_login_ack plyStatus
     * @property {string} errorMsg proto_bc_login_ack errorMsg
     */

    /**
     * Constructs a new proto_bc_login_ack.
     * @exports proto_bc_login_ack
     * @classdesc Represents a proto_bc_login_ack.
     * @implements Iproto_bc_login_ack
     * @constructor
     * @param {Iproto_bc_login_ack=} [properties] Properties to set
     */
    function proto_bc_login_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_login_ack ret.
     * @member {number} ret
     * @memberof proto_bc_login_ack
     * @instance
     */
    proto_bc_login_ack.prototype.ret = 0;

    /**
     * proto_bc_login_ack plyBaseData.
     * @member {Iproto_PlyBaseData} plyBaseData
     * @memberof proto_bc_login_ack
     * @instance
     */
    proto_bc_login_ack.prototype.plyBaseData = null;

    /**
     * proto_bc_login_ack plyStatus.
     * @member {Iproto_PlayerStatus} plyStatus
     * @memberof proto_bc_login_ack
     * @instance
     */
    proto_bc_login_ack.prototype.plyStatus = null;

    /**
     * proto_bc_login_ack errorMsg.
     * @member {string} errorMsg
     * @memberof proto_bc_login_ack
     * @instance
     */
    proto_bc_login_ack.prototype.errorMsg = "";

    /**
     * Creates a new proto_bc_login_ack instance using the specified properties.
     * @function create
     * @memberof proto_bc_login_ack
     * @static
     * @param {Iproto_bc_login_ack=} [properties] Properties to set
     * @returns {proto_bc_login_ack} proto_bc_login_ack instance
     */
    proto_bc_login_ack.create = function create(properties) {
        return new proto_bc_login_ack(properties);
    };

    /**
     * Encodes the specified proto_bc_login_ack message. Does not implicitly {@link proto_bc_login_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_login_ack
     * @static
     * @param {Iproto_bc_login_ack} message proto_bc_login_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_login_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        $root.proto_PlyBaseData.encode(message.plyBaseData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        $root.proto_PlayerStatus.encode(message.plyStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        writer.uint32(/* id 4, wireType 2 =*/34).string(message.errorMsg);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_login_ack message, length delimited. Does not implicitly {@link proto_bc_login_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_login_ack
     * @static
     * @param {Iproto_bc_login_ack} message proto_bc_login_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_login_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_login_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_login_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_login_ack} proto_bc_login_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_login_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_login_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.plyBaseData = $root.proto_PlyBaseData.decode(reader, reader.uint32());
                break;
            case 3:
                message.plyStatus = $root.proto_PlayerStatus.decode(reader, reader.uint32());
                break;
            case 4:
                message.errorMsg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("plyBaseData"))
            throw $util.ProtocolError("missing required 'plyBaseData'", { instance: message });
        if (!message.hasOwnProperty("plyStatus"))
            throw $util.ProtocolError("missing required 'plyStatus'", { instance: message });
        if (!message.hasOwnProperty("errorMsg"))
            throw $util.ProtocolError("missing required 'errorMsg'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_login_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_login_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_login_ack} proto_bc_login_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_login_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_login_ack message.
     * @function verify
     * @memberof proto_bc_login_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_login_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        {
            var error = $root.proto_PlyBaseData.verify(message.plyBaseData);
            if (error)
                return "plyBaseData." + error;
        }
        {
            var error = $root.proto_PlayerStatus.verify(message.plyStatus);
            if (error)
                return "plyStatus." + error;
        }
        if (!$util.isString(message.errorMsg))
            return "errorMsg: string expected";
        return null;
    };

    /**
     * Creates a proto_bc_login_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_login_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_login_ack} proto_bc_login_ack
     */
    proto_bc_login_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_login_ack)
            return object;
        var message = new $root.proto_bc_login_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.plyBaseData != null) {
            if (typeof object.plyBaseData !== "object")
                throw TypeError(".proto_bc_login_ack.plyBaseData: object expected");
            message.plyBaseData = $root.proto_PlyBaseData.fromObject(object.plyBaseData);
        }
        if (object.plyStatus != null) {
            if (typeof object.plyStatus !== "object")
                throw TypeError(".proto_bc_login_ack.plyStatus: object expected");
            message.plyStatus = $root.proto_PlayerStatus.fromObject(object.plyStatus);
        }
        if (object.errorMsg != null)
            message.errorMsg = String(object.errorMsg);
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_login_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_login_ack
     * @static
     * @param {proto_bc_login_ack} message proto_bc_login_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_login_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.plyBaseData = null;
            object.plyStatus = null;
            object.errorMsg = "";
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.plyBaseData != null && message.hasOwnProperty("plyBaseData"))
            object.plyBaseData = $root.proto_PlyBaseData.toObject(message.plyBaseData, options);
        if (message.plyStatus != null && message.hasOwnProperty("plyStatus"))
            object.plyStatus = $root.proto_PlayerStatus.toObject(message.plyStatus, options);
        if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
            object.errorMsg = message.errorMsg;
        return object;
    };

    /**
     * Converts this proto_bc_login_ack to JSON.
     * @function toJSON
     * @memberof proto_bc_login_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_login_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_login_ack;
})();

$root.proto_PlyBaseData = (function() {

    /**
     * Properties of a proto_PlyBaseData.
     * @exports Iproto_PlyBaseData
     * @interface Iproto_PlyBaseData
     * @property {number|Long} plyGuid proto_PlyBaseData plyGuid
     * @property {string} nickname proto_PlyBaseData nickname
     * @property {number} sex proto_PlyBaseData sex
     * @property {number} gift proto_PlyBaseData gift
     * @property {number|Long} money proto_PlyBaseData money
     * @property {number} score proto_PlyBaseData score
     * @property {number} won proto_PlyBaseData won
     * @property {number} lost proto_PlyBaseData lost
     * @property {number} dogfall proto_PlyBaseData dogfall
     * @property {number} tableId proto_PlyBaseData tableId
     * @property {number} param_1 proto_PlyBaseData param_1
     * @property {number} param_2 proto_PlyBaseData param_2
     * @property {number} chairId proto_PlyBaseData chairId
     * @property {number} ready proto_PlyBaseData ready
     * @property {Iproto_VipData} plyVip proto_PlyBaseData plyVip
     */

    /**
     * Constructs a new proto_PlyBaseData.
     * @exports proto_PlyBaseData
     * @classdesc Represents a proto_PlyBaseData.
     * @implements Iproto_PlyBaseData
     * @constructor
     * @param {Iproto_PlyBaseData=} [properties] Properties to set
     */
    function proto_PlyBaseData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_PlyBaseData plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_PlyBaseData nickname.
     * @member {string} nickname
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.nickname = "";

    /**
     * proto_PlyBaseData sex.
     * @member {number} sex
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.sex = 0;

    /**
     * proto_PlyBaseData gift.
     * @member {number} gift
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.gift = 0;

    /**
     * proto_PlyBaseData money.
     * @member {number|Long} money
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.money = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_PlyBaseData score.
     * @member {number} score
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.score = 0;

    /**
     * proto_PlyBaseData won.
     * @member {number} won
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.won = 0;

    /**
     * proto_PlyBaseData lost.
     * @member {number} lost
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.lost = 0;

    /**
     * proto_PlyBaseData dogfall.
     * @member {number} dogfall
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.dogfall = 0;

    /**
     * proto_PlyBaseData tableId.
     * @member {number} tableId
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.tableId = 0;

    /**
     * proto_PlyBaseData param_1.
     * @member {number} param_1
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.param_1 = 0;

    /**
     * proto_PlyBaseData param_2.
     * @member {number} param_2
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.param_2 = 0;

    /**
     * proto_PlyBaseData chairId.
     * @member {number} chairId
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.chairId = 0;

    /**
     * proto_PlyBaseData ready.
     * @member {number} ready
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.ready = 0;

    /**
     * proto_PlyBaseData plyVip.
     * @member {Iproto_VipData} plyVip
     * @memberof proto_PlyBaseData
     * @instance
     */
    proto_PlyBaseData.prototype.plyVip = null;

    /**
     * Creates a new proto_PlyBaseData instance using the specified properties.
     * @function create
     * @memberof proto_PlyBaseData
     * @static
     * @param {Iproto_PlyBaseData=} [properties] Properties to set
     * @returns {proto_PlyBaseData} proto_PlyBaseData instance
     */
    proto_PlyBaseData.create = function create(properties) {
        return new proto_PlyBaseData(properties);
    };

    /**
     * Encodes the specified proto_PlyBaseData message. Does not implicitly {@link proto_PlyBaseData.verify|verify} messages.
     * @function encode
     * @memberof proto_PlyBaseData
     * @static
     * @param {Iproto_PlyBaseData} message proto_PlyBaseData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_PlyBaseData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sex);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gift);
        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.money);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.score);
        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.won);
        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.lost);
        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.dogfall);
        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.tableId);
        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.param_1);
        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.param_2);
        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.chairId);
        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.ready);
        $root.proto_VipData.encode(message.plyVip, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_PlyBaseData message, length delimited. Does not implicitly {@link proto_PlyBaseData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_PlyBaseData
     * @static
     * @param {Iproto_PlyBaseData} message proto_PlyBaseData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_PlyBaseData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_PlyBaseData message from the specified reader or buffer.
     * @function decode
     * @memberof proto_PlyBaseData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_PlyBaseData} proto_PlyBaseData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_PlyBaseData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_PlyBaseData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            case 2:
                message.nickname = reader.string();
                break;
            case 3:
                message.sex = reader.int32();
                break;
            case 4:
                message.gift = reader.int32();
                break;
            case 5:
                message.money = reader.int64();
                break;
            case 6:
                message.score = reader.int32();
                break;
            case 7:
                message.won = reader.int32();
                break;
            case 8:
                message.lost = reader.int32();
                break;
            case 9:
                message.dogfall = reader.int32();
                break;
            case 10:
                message.tableId = reader.int32();
                break;
            case 11:
                message.param_1 = reader.int32();
                break;
            case 12:
                message.param_2 = reader.int32();
                break;
            case 13:
                message.chairId = reader.int32();
                break;
            case 14:
                message.ready = reader.int32();
                break;
            case 15:
                message.plyVip = $root.proto_VipData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        if (!message.hasOwnProperty("nickname"))
            throw $util.ProtocolError("missing required 'nickname'", { instance: message });
        if (!message.hasOwnProperty("sex"))
            throw $util.ProtocolError("missing required 'sex'", { instance: message });
        if (!message.hasOwnProperty("gift"))
            throw $util.ProtocolError("missing required 'gift'", { instance: message });
        if (!message.hasOwnProperty("money"))
            throw $util.ProtocolError("missing required 'money'", { instance: message });
        if (!message.hasOwnProperty("score"))
            throw $util.ProtocolError("missing required 'score'", { instance: message });
        if (!message.hasOwnProperty("won"))
            throw $util.ProtocolError("missing required 'won'", { instance: message });
        if (!message.hasOwnProperty("lost"))
            throw $util.ProtocolError("missing required 'lost'", { instance: message });
        if (!message.hasOwnProperty("dogfall"))
            throw $util.ProtocolError("missing required 'dogfall'", { instance: message });
        if (!message.hasOwnProperty("tableId"))
            throw $util.ProtocolError("missing required 'tableId'", { instance: message });
        if (!message.hasOwnProperty("param_1"))
            throw $util.ProtocolError("missing required 'param_1'", { instance: message });
        if (!message.hasOwnProperty("param_2"))
            throw $util.ProtocolError("missing required 'param_2'", { instance: message });
        if (!message.hasOwnProperty("chairId"))
            throw $util.ProtocolError("missing required 'chairId'", { instance: message });
        if (!message.hasOwnProperty("ready"))
            throw $util.ProtocolError("missing required 'ready'", { instance: message });
        if (!message.hasOwnProperty("plyVip"))
            throw $util.ProtocolError("missing required 'plyVip'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_PlyBaseData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_PlyBaseData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_PlyBaseData} proto_PlyBaseData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_PlyBaseData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_PlyBaseData message.
     * @function verify
     * @memberof proto_PlyBaseData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_PlyBaseData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        if (!$util.isString(message.nickname))
            return "nickname: string expected";
        if (!$util.isInteger(message.sex))
            return "sex: integer expected";
        if (!$util.isInteger(message.gift))
            return "gift: integer expected";
        if (!$util.isInteger(message.money) && !(message.money && $util.isInteger(message.money.low) && $util.isInteger(message.money.high)))
            return "money: integer|Long expected";
        if (!$util.isInteger(message.score))
            return "score: integer expected";
        if (!$util.isInteger(message.won))
            return "won: integer expected";
        if (!$util.isInteger(message.lost))
            return "lost: integer expected";
        if (!$util.isInteger(message.dogfall))
            return "dogfall: integer expected";
        if (!$util.isInteger(message.tableId))
            return "tableId: integer expected";
        if (!$util.isInteger(message.param_1))
            return "param_1: integer expected";
        if (!$util.isInteger(message.param_2))
            return "param_2: integer expected";
        if (!$util.isInteger(message.chairId))
            return "chairId: integer expected";
        if (!$util.isInteger(message.ready))
            return "ready: integer expected";
        {
            var error = $root.proto_VipData.verify(message.plyVip);
            if (error)
                return "plyVip." + error;
        }
        return null;
    };

    /**
     * Creates a proto_PlyBaseData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_PlyBaseData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_PlyBaseData} proto_PlyBaseData
     */
    proto_PlyBaseData.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_PlyBaseData)
            return object;
        var message = new $root.proto_PlyBaseData();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        if (object.nickname != null)
            message.nickname = String(object.nickname);
        if (object.sex != null)
            message.sex = object.sex | 0;
        if (object.gift != null)
            message.gift = object.gift | 0;
        if (object.money != null)
            if ($util.Long)
                (message.money = $util.Long.fromValue(object.money)).unsigned = false;
            else if (typeof object.money === "string")
                message.money = parseInt(object.money, 10);
            else if (typeof object.money === "number")
                message.money = object.money;
            else if (typeof object.money === "object")
                message.money = new $util.LongBits(object.money.low >>> 0, object.money.high >>> 0).toNumber();
        if (object.score != null)
            message.score = object.score | 0;
        if (object.won != null)
            message.won = object.won | 0;
        if (object.lost != null)
            message.lost = object.lost | 0;
        if (object.dogfall != null)
            message.dogfall = object.dogfall | 0;
        if (object.tableId != null)
            message.tableId = object.tableId | 0;
        if (object.param_1 != null)
            message.param_1 = object.param_1 | 0;
        if (object.param_2 != null)
            message.param_2 = object.param_2 | 0;
        if (object.chairId != null)
            message.chairId = object.chairId | 0;
        if (object.ready != null)
            message.ready = object.ready | 0;
        if (object.plyVip != null) {
            if (typeof object.plyVip !== "object")
                throw TypeError(".proto_PlyBaseData.plyVip: object expected");
            message.plyVip = $root.proto_VipData.fromObject(object.plyVip);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_PlyBaseData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_PlyBaseData
     * @static
     * @param {proto_PlyBaseData} message proto_PlyBaseData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_PlyBaseData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
            object.nickname = "";
            object.sex = 0;
            object.gift = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.money = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.money = options.longs === String ? "0" : 0;
            object.score = 0;
            object.won = 0;
            object.lost = 0;
            object.dogfall = 0;
            object.tableId = 0;
            object.param_1 = 0;
            object.param_2 = 0;
            object.chairId = 0;
            object.ready = 0;
            object.plyVip = null;
        }
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        if (message.nickname != null && message.hasOwnProperty("nickname"))
            object.nickname = message.nickname;
        if (message.sex != null && message.hasOwnProperty("sex"))
            object.sex = message.sex;
        if (message.gift != null && message.hasOwnProperty("gift"))
            object.gift = message.gift;
        if (message.money != null && message.hasOwnProperty("money"))
            if (typeof message.money === "number")
                object.money = options.longs === String ? String(message.money) : message.money;
            else
                object.money = options.longs === String ? $util.Long.prototype.toString.call(message.money) : options.longs === Number ? new $util.LongBits(message.money.low >>> 0, message.money.high >>> 0).toNumber() : message.money;
        if (message.score != null && message.hasOwnProperty("score"))
            object.score = message.score;
        if (message.won != null && message.hasOwnProperty("won"))
            object.won = message.won;
        if (message.lost != null && message.hasOwnProperty("lost"))
            object.lost = message.lost;
        if (message.dogfall != null && message.hasOwnProperty("dogfall"))
            object.dogfall = message.dogfall;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.param_1 != null && message.hasOwnProperty("param_1"))
            object.param_1 = message.param_1;
        if (message.param_2 != null && message.hasOwnProperty("param_2"))
            object.param_2 = message.param_2;
        if (message.chairId != null && message.hasOwnProperty("chairId"))
            object.chairId = message.chairId;
        if (message.ready != null && message.hasOwnProperty("ready"))
            object.ready = message.ready;
        if (message.plyVip != null && message.hasOwnProperty("plyVip"))
            object.plyVip = $root.proto_VipData.toObject(message.plyVip, options);
        return object;
    };

    /**
     * Converts this proto_PlyBaseData to JSON.
     * @function toJSON
     * @memberof proto_PlyBaseData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_PlyBaseData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_PlyBaseData;
})();

$root.proto_PlayerStatus = (function() {

    /**
     * Properties of a proto_PlayerStatus.
     * @exports Iproto_PlayerStatus
     * @interface Iproto_PlayerStatus
     * @property {number|Long} plyGuid proto_PlayerStatus plyGuid
     * @property {string} plyNickname proto_PlayerStatus plyNickname
     * @property {number} plyStatus proto_PlayerStatus plyStatus
     * @property {number} sex proto_PlayerStatus sex
     * @property {number} gameId proto_PlayerStatus gameId
     * @property {number} gameServerId proto_PlayerStatus gameServerId
     * @property {number} tableId proto_PlayerStatus tableId
     * @property {number|Long} money proto_PlayerStatus money
     * @property {number} won proto_PlayerStatus won
     * @property {number} lost proto_PlayerStatus lost
     * @property {number} moneyRank proto_PlayerStatus moneyRank
     * @property {number} wonRank proto_PlayerStatus wonRank
     * @property {number} param_1 proto_PlayerStatus param_1
     * @property {number} param_2 proto_PlayerStatus param_2
     * @property {number} latitude proto_PlayerStatus latitude
     * @property {number} longitude proto_PlayerStatus longitude
     */

    /**
     * Constructs a new proto_PlayerStatus.
     * @exports proto_PlayerStatus
     * @classdesc Represents a proto_PlayerStatus.
     * @implements Iproto_PlayerStatus
     * @constructor
     * @param {Iproto_PlayerStatus=} [properties] Properties to set
     */
    function proto_PlayerStatus(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_PlayerStatus plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_PlayerStatus plyNickname.
     * @member {string} plyNickname
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.plyNickname = "";

    /**
     * proto_PlayerStatus plyStatus.
     * @member {number} plyStatus
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.plyStatus = 0;

    /**
     * proto_PlayerStatus sex.
     * @member {number} sex
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.sex = 0;

    /**
     * proto_PlayerStatus gameId.
     * @member {number} gameId
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.gameId = 0;

    /**
     * proto_PlayerStatus gameServerId.
     * @member {number} gameServerId
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.gameServerId = 0;

    /**
     * proto_PlayerStatus tableId.
     * @member {number} tableId
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.tableId = 0;

    /**
     * proto_PlayerStatus money.
     * @member {number|Long} money
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.money = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_PlayerStatus won.
     * @member {number} won
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.won = 0;

    /**
     * proto_PlayerStatus lost.
     * @member {number} lost
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.lost = 0;

    /**
     * proto_PlayerStatus moneyRank.
     * @member {number} moneyRank
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.moneyRank = 0;

    /**
     * proto_PlayerStatus wonRank.
     * @member {number} wonRank
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.wonRank = 0;

    /**
     * proto_PlayerStatus param_1.
     * @member {number} param_1
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.param_1 = 0;

    /**
     * proto_PlayerStatus param_2.
     * @member {number} param_2
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.param_2 = 0;

    /**
     * proto_PlayerStatus latitude.
     * @member {number} latitude
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.latitude = 0;

    /**
     * proto_PlayerStatus longitude.
     * @member {number} longitude
     * @memberof proto_PlayerStatus
     * @instance
     */
    proto_PlayerStatus.prototype.longitude = 0;

    /**
     * Creates a new proto_PlayerStatus instance using the specified properties.
     * @function create
     * @memberof proto_PlayerStatus
     * @static
     * @param {Iproto_PlayerStatus=} [properties] Properties to set
     * @returns {proto_PlayerStatus} proto_PlayerStatus instance
     */
    proto_PlayerStatus.create = function create(properties) {
        return new proto_PlayerStatus(properties);
    };

    /**
     * Encodes the specified proto_PlayerStatus message. Does not implicitly {@link proto_PlayerStatus.verify|verify} messages.
     * @function encode
     * @memberof proto_PlayerStatus
     * @static
     * @param {Iproto_PlayerStatus} message proto_PlayerStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_PlayerStatus.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.plyNickname);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.plyStatus);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sex);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.gameServerId);
        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.tableId);
        writer.uint32(/* id 8, wireType 0 =*/64).int64(message.money);
        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.won);
        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.lost);
        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.moneyRank);
        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.wonRank);
        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.param_1);
        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.param_2);
        writer.uint32(/* id 15, wireType 5 =*/125).float(message.latitude);
        writer.uint32(/* id 16, wireType 5 =*/133).float(message.longitude);
        return writer;
    };

    /**
     * Encodes the specified proto_PlayerStatus message, length delimited. Does not implicitly {@link proto_PlayerStatus.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_PlayerStatus
     * @static
     * @param {Iproto_PlayerStatus} message proto_PlayerStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_PlayerStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_PlayerStatus message from the specified reader or buffer.
     * @function decode
     * @memberof proto_PlayerStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_PlayerStatus} proto_PlayerStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_PlayerStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_PlayerStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            case 2:
                message.plyNickname = reader.string();
                break;
            case 3:
                message.plyStatus = reader.int32();
                break;
            case 4:
                message.sex = reader.int32();
                break;
            case 5:
                message.gameId = reader.int32();
                break;
            case 6:
                message.gameServerId = reader.int32();
                break;
            case 7:
                message.tableId = reader.int32();
                break;
            case 8:
                message.money = reader.int64();
                break;
            case 9:
                message.won = reader.int32();
                break;
            case 10:
                message.lost = reader.int32();
                break;
            case 11:
                message.moneyRank = reader.int32();
                break;
            case 12:
                message.wonRank = reader.int32();
                break;
            case 13:
                message.param_1 = reader.int32();
                break;
            case 14:
                message.param_2 = reader.int32();
                break;
            case 15:
                message.latitude = reader.float();
                break;
            case 16:
                message.longitude = reader.float();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        if (!message.hasOwnProperty("plyNickname"))
            throw $util.ProtocolError("missing required 'plyNickname'", { instance: message });
        if (!message.hasOwnProperty("plyStatus"))
            throw $util.ProtocolError("missing required 'plyStatus'", { instance: message });
        if (!message.hasOwnProperty("sex"))
            throw $util.ProtocolError("missing required 'sex'", { instance: message });
        if (!message.hasOwnProperty("gameId"))
            throw $util.ProtocolError("missing required 'gameId'", { instance: message });
        if (!message.hasOwnProperty("gameServerId"))
            throw $util.ProtocolError("missing required 'gameServerId'", { instance: message });
        if (!message.hasOwnProperty("tableId"))
            throw $util.ProtocolError("missing required 'tableId'", { instance: message });
        if (!message.hasOwnProperty("money"))
            throw $util.ProtocolError("missing required 'money'", { instance: message });
        if (!message.hasOwnProperty("won"))
            throw $util.ProtocolError("missing required 'won'", { instance: message });
        if (!message.hasOwnProperty("lost"))
            throw $util.ProtocolError("missing required 'lost'", { instance: message });
        if (!message.hasOwnProperty("moneyRank"))
            throw $util.ProtocolError("missing required 'moneyRank'", { instance: message });
        if (!message.hasOwnProperty("wonRank"))
            throw $util.ProtocolError("missing required 'wonRank'", { instance: message });
        if (!message.hasOwnProperty("param_1"))
            throw $util.ProtocolError("missing required 'param_1'", { instance: message });
        if (!message.hasOwnProperty("param_2"))
            throw $util.ProtocolError("missing required 'param_2'", { instance: message });
        if (!message.hasOwnProperty("latitude"))
            throw $util.ProtocolError("missing required 'latitude'", { instance: message });
        if (!message.hasOwnProperty("longitude"))
            throw $util.ProtocolError("missing required 'longitude'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_PlayerStatus message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_PlayerStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_PlayerStatus} proto_PlayerStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_PlayerStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_PlayerStatus message.
     * @function verify
     * @memberof proto_PlayerStatus
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_PlayerStatus.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        if (!$util.isString(message.plyNickname))
            return "plyNickname: string expected";
        if (!$util.isInteger(message.plyStatus))
            return "plyStatus: integer expected";
        if (!$util.isInteger(message.sex))
            return "sex: integer expected";
        if (!$util.isInteger(message.gameId))
            return "gameId: integer expected";
        if (!$util.isInteger(message.gameServerId))
            return "gameServerId: integer expected";
        if (!$util.isInteger(message.tableId))
            return "tableId: integer expected";
        if (!$util.isInteger(message.money) && !(message.money && $util.isInteger(message.money.low) && $util.isInteger(message.money.high)))
            return "money: integer|Long expected";
        if (!$util.isInteger(message.won))
            return "won: integer expected";
        if (!$util.isInteger(message.lost))
            return "lost: integer expected";
        if (!$util.isInteger(message.moneyRank))
            return "moneyRank: integer expected";
        if (!$util.isInteger(message.wonRank))
            return "wonRank: integer expected";
        if (!$util.isInteger(message.param_1))
            return "param_1: integer expected";
        if (!$util.isInteger(message.param_2))
            return "param_2: integer expected";
        if (typeof message.latitude !== "number")
            return "latitude: number expected";
        if (typeof message.longitude !== "number")
            return "longitude: number expected";
        return null;
    };

    /**
     * Creates a proto_PlayerStatus message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_PlayerStatus
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_PlayerStatus} proto_PlayerStatus
     */
    proto_PlayerStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_PlayerStatus)
            return object;
        var message = new $root.proto_PlayerStatus();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        if (object.plyNickname != null)
            message.plyNickname = String(object.plyNickname);
        if (object.plyStatus != null)
            message.plyStatus = object.plyStatus | 0;
        if (object.sex != null)
            message.sex = object.sex | 0;
        if (object.gameId != null)
            message.gameId = object.gameId | 0;
        if (object.gameServerId != null)
            message.gameServerId = object.gameServerId | 0;
        if (object.tableId != null)
            message.tableId = object.tableId | 0;
        if (object.money != null)
            if ($util.Long)
                (message.money = $util.Long.fromValue(object.money)).unsigned = false;
            else if (typeof object.money === "string")
                message.money = parseInt(object.money, 10);
            else if (typeof object.money === "number")
                message.money = object.money;
            else if (typeof object.money === "object")
                message.money = new $util.LongBits(object.money.low >>> 0, object.money.high >>> 0).toNumber();
        if (object.won != null)
            message.won = object.won | 0;
        if (object.lost != null)
            message.lost = object.lost | 0;
        if (object.moneyRank != null)
            message.moneyRank = object.moneyRank | 0;
        if (object.wonRank != null)
            message.wonRank = object.wonRank | 0;
        if (object.param_1 != null)
            message.param_1 = object.param_1 | 0;
        if (object.param_2 != null)
            message.param_2 = object.param_2 | 0;
        if (object.latitude != null)
            message.latitude = Number(object.latitude);
        if (object.longitude != null)
            message.longitude = Number(object.longitude);
        return message;
    };

    /**
     * Creates a plain object from a proto_PlayerStatus message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_PlayerStatus
     * @static
     * @param {proto_PlayerStatus} message proto_PlayerStatus
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_PlayerStatus.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
            object.plyNickname = "";
            object.plyStatus = 0;
            object.sex = 0;
            object.gameId = 0;
            object.gameServerId = 0;
            object.tableId = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.money = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.money = options.longs === String ? "0" : 0;
            object.won = 0;
            object.lost = 0;
            object.moneyRank = 0;
            object.wonRank = 0;
            object.param_1 = 0;
            object.param_2 = 0;
            object.latitude = 0;
            object.longitude = 0;
        }
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        if (message.plyNickname != null && message.hasOwnProperty("plyNickname"))
            object.plyNickname = message.plyNickname;
        if (message.plyStatus != null && message.hasOwnProperty("plyStatus"))
            object.plyStatus = message.plyStatus;
        if (message.sex != null && message.hasOwnProperty("sex"))
            object.sex = message.sex;
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            object.gameId = message.gameId;
        if (message.gameServerId != null && message.hasOwnProperty("gameServerId"))
            object.gameServerId = message.gameServerId;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.money != null && message.hasOwnProperty("money"))
            if (typeof message.money === "number")
                object.money = options.longs === String ? String(message.money) : message.money;
            else
                object.money = options.longs === String ? $util.Long.prototype.toString.call(message.money) : options.longs === Number ? new $util.LongBits(message.money.low >>> 0, message.money.high >>> 0).toNumber() : message.money;
        if (message.won != null && message.hasOwnProperty("won"))
            object.won = message.won;
        if (message.lost != null && message.hasOwnProperty("lost"))
            object.lost = message.lost;
        if (message.moneyRank != null && message.hasOwnProperty("moneyRank"))
            object.moneyRank = message.moneyRank;
        if (message.wonRank != null && message.hasOwnProperty("wonRank"))
            object.wonRank = message.wonRank;
        if (message.param_1 != null && message.hasOwnProperty("param_1"))
            object.param_1 = message.param_1;
        if (message.param_2 != null && message.hasOwnProperty("param_2"))
            object.param_2 = message.param_2;
        if (message.latitude != null && message.hasOwnProperty("latitude"))
            object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
        if (message.longitude != null && message.hasOwnProperty("longitude"))
            object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
        return object;
    };

    /**
     * Converts this proto_PlayerStatus to JSON.
     * @function toJSON
     * @memberof proto_PlayerStatus
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_PlayerStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_PlayerStatus;
})();

$root.proto_VipData = (function() {

    /**
     * Properties of a proto_VipData.
     * @exports Iproto_VipData
     * @interface Iproto_VipData
     * @property {number} level proto_VipData level
     * @property {number} nexLevelTotalDays proto_VipData nexLevelTotalDays
     * @property {number} autoUpgradeDay proto_VipData autoUpgradeDay
     * @property {number} loginAward proto_VipData loginAward
     * @property {number} friendCount proto_VipData friendCount
     * @property {number} nextLevelDueDays proto_VipData nextLevelDueDays
     * @property {number} remainDueDays proto_VipData remainDueDays
     * @property {number} status proto_VipData status
     */

    /**
     * Constructs a new proto_VipData.
     * @exports proto_VipData
     * @classdesc Represents a proto_VipData.
     * @implements Iproto_VipData
     * @constructor
     * @param {Iproto_VipData=} [properties] Properties to set
     */
    function proto_VipData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_VipData level.
     * @member {number} level
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.level = 0;

    /**
     * proto_VipData nexLevelTotalDays.
     * @member {number} nexLevelTotalDays
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.nexLevelTotalDays = 0;

    /**
     * proto_VipData autoUpgradeDay.
     * @member {number} autoUpgradeDay
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.autoUpgradeDay = 0;

    /**
     * proto_VipData loginAward.
     * @member {number} loginAward
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.loginAward = 0;

    /**
     * proto_VipData friendCount.
     * @member {number} friendCount
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.friendCount = 0;

    /**
     * proto_VipData nextLevelDueDays.
     * @member {number} nextLevelDueDays
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.nextLevelDueDays = 0;

    /**
     * proto_VipData remainDueDays.
     * @member {number} remainDueDays
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.remainDueDays = 0;

    /**
     * proto_VipData status.
     * @member {number} status
     * @memberof proto_VipData
     * @instance
     */
    proto_VipData.prototype.status = 0;

    /**
     * Creates a new proto_VipData instance using the specified properties.
     * @function create
     * @memberof proto_VipData
     * @static
     * @param {Iproto_VipData=} [properties] Properties to set
     * @returns {proto_VipData} proto_VipData instance
     */
    proto_VipData.create = function create(properties) {
        return new proto_VipData(properties);
    };

    /**
     * Encodes the specified proto_VipData message. Does not implicitly {@link proto_VipData.verify|verify} messages.
     * @function encode
     * @memberof proto_VipData
     * @static
     * @param {Iproto_VipData} message proto_VipData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_VipData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nexLevelTotalDays);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.autoUpgradeDay);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.loginAward);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.friendCount);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nextLevelDueDays);
        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.remainDueDays);
        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.status);
        return writer;
    };

    /**
     * Encodes the specified proto_VipData message, length delimited. Does not implicitly {@link proto_VipData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_VipData
     * @static
     * @param {Iproto_VipData} message proto_VipData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_VipData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_VipData message from the specified reader or buffer.
     * @function decode
     * @memberof proto_VipData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_VipData} proto_VipData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_VipData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_VipData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.level = reader.int32();
                break;
            case 2:
                message.nexLevelTotalDays = reader.int32();
                break;
            case 3:
                message.autoUpgradeDay = reader.int32();
                break;
            case 4:
                message.loginAward = reader.int32();
                break;
            case 5:
                message.friendCount = reader.int32();
                break;
            case 6:
                message.nextLevelDueDays = reader.int32();
                break;
            case 7:
                message.remainDueDays = reader.int32();
                break;
            case 8:
                message.status = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("level"))
            throw $util.ProtocolError("missing required 'level'", { instance: message });
        if (!message.hasOwnProperty("nexLevelTotalDays"))
            throw $util.ProtocolError("missing required 'nexLevelTotalDays'", { instance: message });
        if (!message.hasOwnProperty("autoUpgradeDay"))
            throw $util.ProtocolError("missing required 'autoUpgradeDay'", { instance: message });
        if (!message.hasOwnProperty("loginAward"))
            throw $util.ProtocolError("missing required 'loginAward'", { instance: message });
        if (!message.hasOwnProperty("friendCount"))
            throw $util.ProtocolError("missing required 'friendCount'", { instance: message });
        if (!message.hasOwnProperty("nextLevelDueDays"))
            throw $util.ProtocolError("missing required 'nextLevelDueDays'", { instance: message });
        if (!message.hasOwnProperty("remainDueDays"))
            throw $util.ProtocolError("missing required 'remainDueDays'", { instance: message });
        if (!message.hasOwnProperty("status"))
            throw $util.ProtocolError("missing required 'status'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_VipData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_VipData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_VipData} proto_VipData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_VipData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_VipData message.
     * @function verify
     * @memberof proto_VipData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_VipData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.level))
            return "level: integer expected";
        if (!$util.isInteger(message.nexLevelTotalDays))
            return "nexLevelTotalDays: integer expected";
        if (!$util.isInteger(message.autoUpgradeDay))
            return "autoUpgradeDay: integer expected";
        if (!$util.isInteger(message.loginAward))
            return "loginAward: integer expected";
        if (!$util.isInteger(message.friendCount))
            return "friendCount: integer expected";
        if (!$util.isInteger(message.nextLevelDueDays))
            return "nextLevelDueDays: integer expected";
        if (!$util.isInteger(message.remainDueDays))
            return "remainDueDays: integer expected";
        if (!$util.isInteger(message.status))
            return "status: integer expected";
        return null;
    };

    /**
     * Creates a proto_VipData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_VipData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_VipData} proto_VipData
     */
    proto_VipData.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_VipData)
            return object;
        var message = new $root.proto_VipData();
        if (object.level != null)
            message.level = object.level | 0;
        if (object.nexLevelTotalDays != null)
            message.nexLevelTotalDays = object.nexLevelTotalDays | 0;
        if (object.autoUpgradeDay != null)
            message.autoUpgradeDay = object.autoUpgradeDay | 0;
        if (object.loginAward != null)
            message.loginAward = object.loginAward | 0;
        if (object.friendCount != null)
            message.friendCount = object.friendCount | 0;
        if (object.nextLevelDueDays != null)
            message.nextLevelDueDays = object.nextLevelDueDays | 0;
        if (object.remainDueDays != null)
            message.remainDueDays = object.remainDueDays | 0;
        if (object.status != null)
            message.status = object.status | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_VipData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_VipData
     * @static
     * @param {proto_VipData} message proto_VipData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_VipData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.level = 0;
            object.nexLevelTotalDays = 0;
            object.autoUpgradeDay = 0;
            object.loginAward = 0;
            object.friendCount = 0;
            object.nextLevelDueDays = 0;
            object.remainDueDays = 0;
            object.status = 0;
        }
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.nexLevelTotalDays != null && message.hasOwnProperty("nexLevelTotalDays"))
            object.nexLevelTotalDays = message.nexLevelTotalDays;
        if (message.autoUpgradeDay != null && message.hasOwnProperty("autoUpgradeDay"))
            object.autoUpgradeDay = message.autoUpgradeDay;
        if (message.loginAward != null && message.hasOwnProperty("loginAward"))
            object.loginAward = message.loginAward;
        if (message.friendCount != null && message.hasOwnProperty("friendCount"))
            object.friendCount = message.friendCount;
        if (message.nextLevelDueDays != null && message.hasOwnProperty("nextLevelDueDays"))
            object.nextLevelDueDays = message.nextLevelDueDays;
        if (message.remainDueDays != null && message.hasOwnProperty("remainDueDays"))
            object.remainDueDays = message.remainDueDays;
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = message.status;
        return object;
    };

    /**
     * Converts this proto_VipData to JSON.
     * @function toJSON
     * @memberof proto_VipData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_VipData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_VipData;
})();

$root.proto_cb_join_table_req = (function() {

    /**
     * Properties of a proto_cb_join_table_req.
     * @exports Iproto_cb_join_table_req
     * @interface Iproto_cb_join_table_req
     * @property {number} tableId proto_cb_join_table_req tableId
     * @property {string} password proto_cb_join_table_req password
     * @property {number} clubUid proto_cb_join_table_req clubUid
     */

    /**
     * Constructs a new proto_cb_join_table_req.
     * @exports proto_cb_join_table_req
     * @classdesc Represents a proto_cb_join_table_req.
     * @implements Iproto_cb_join_table_req
     * @constructor
     * @param {Iproto_cb_join_table_req=} [properties] Properties to set
     */
    function proto_cb_join_table_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cb_join_table_req tableId.
     * @member {number} tableId
     * @memberof proto_cb_join_table_req
     * @instance
     */
    proto_cb_join_table_req.prototype.tableId = 0;

    /**
     * proto_cb_join_table_req password.
     * @member {string} password
     * @memberof proto_cb_join_table_req
     * @instance
     */
    proto_cb_join_table_req.prototype.password = "";

    /**
     * proto_cb_join_table_req clubUid.
     * @member {number} clubUid
     * @memberof proto_cb_join_table_req
     * @instance
     */
    proto_cb_join_table_req.prototype.clubUid = 0;

    /**
     * Creates a new proto_cb_join_table_req instance using the specified properties.
     * @function create
     * @memberof proto_cb_join_table_req
     * @static
     * @param {Iproto_cb_join_table_req=} [properties] Properties to set
     * @returns {proto_cb_join_table_req} proto_cb_join_table_req instance
     */
    proto_cb_join_table_req.create = function create(properties) {
        return new proto_cb_join_table_req(properties);
    };

    /**
     * Encodes the specified proto_cb_join_table_req message. Does not implicitly {@link proto_cb_join_table_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cb_join_table_req
     * @static
     * @param {Iproto_cb_join_table_req} message proto_cb_join_table_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_join_table_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tableId);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.clubUid);
        return writer;
    };

    /**
     * Encodes the specified proto_cb_join_table_req message, length delimited. Does not implicitly {@link proto_cb_join_table_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cb_join_table_req
     * @static
     * @param {Iproto_cb_join_table_req} message proto_cb_join_table_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_join_table_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cb_join_table_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cb_join_table_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cb_join_table_req} proto_cb_join_table_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_join_table_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cb_join_table_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableId = reader.int32();
                break;
            case 2:
                message.password = reader.string();
                break;
            case 3:
                message.clubUid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("tableId"))
            throw $util.ProtocolError("missing required 'tableId'", { instance: message });
        if (!message.hasOwnProperty("password"))
            throw $util.ProtocolError("missing required 'password'", { instance: message });
        if (!message.hasOwnProperty("clubUid"))
            throw $util.ProtocolError("missing required 'clubUid'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cb_join_table_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cb_join_table_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cb_join_table_req} proto_cb_join_table_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_join_table_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cb_join_table_req message.
     * @function verify
     * @memberof proto_cb_join_table_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cb_join_table_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.tableId))
            return "tableId: integer expected";
        if (!$util.isString(message.password))
            return "password: string expected";
        if (!$util.isInteger(message.clubUid))
            return "clubUid: integer expected";
        return null;
    };

    /**
     * Creates a proto_cb_join_table_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cb_join_table_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cb_join_table_req} proto_cb_join_table_req
     */
    proto_cb_join_table_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cb_join_table_req)
            return object;
        var message = new $root.proto_cb_join_table_req();
        if (object.tableId != null)
            message.tableId = object.tableId | 0;
        if (object.password != null)
            message.password = String(object.password);
        if (object.clubUid != null)
            message.clubUid = object.clubUid | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cb_join_table_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cb_join_table_req
     * @static
     * @param {proto_cb_join_table_req} message proto_cb_join_table_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cb_join_table_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.tableId = 0;
            object.password = "";
            object.clubUid = 0;
        }
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.password != null && message.hasOwnProperty("password"))
            object.password = message.password;
        if (message.clubUid != null && message.hasOwnProperty("clubUid"))
            object.clubUid = message.clubUid;
        return object;
    };

    /**
     * Converts this proto_cb_join_table_req to JSON.
     * @function toJSON
     * @memberof proto_cb_join_table_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cb_join_table_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cb_join_table_req;
})();

$root.proto_bc_join_table_ack = (function() {

    /**
     * Properties of a proto_bc_join_table_ack.
     * @exports Iproto_bc_join_table_ack
     * @interface Iproto_bc_join_table_ack
     * @property {number} ret proto_bc_join_table_ack ret
     * @property {Iproto_TableAttr} tableAttrs proto_bc_join_table_ack tableAttrs
     * @property {string} errMsg proto_bc_join_table_ack errMsg
     */

    /**
     * Constructs a new proto_bc_join_table_ack.
     * @exports proto_bc_join_table_ack
     * @classdesc Represents a proto_bc_join_table_ack.
     * @implements Iproto_bc_join_table_ack
     * @constructor
     * @param {Iproto_bc_join_table_ack=} [properties] Properties to set
     */
    function proto_bc_join_table_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_join_table_ack ret.
     * @member {number} ret
     * @memberof proto_bc_join_table_ack
     * @instance
     */
    proto_bc_join_table_ack.prototype.ret = 0;

    /**
     * proto_bc_join_table_ack tableAttrs.
     * @member {Iproto_TableAttr} tableAttrs
     * @memberof proto_bc_join_table_ack
     * @instance
     */
    proto_bc_join_table_ack.prototype.tableAttrs = null;

    /**
     * proto_bc_join_table_ack errMsg.
     * @member {string} errMsg
     * @memberof proto_bc_join_table_ack
     * @instance
     */
    proto_bc_join_table_ack.prototype.errMsg = "";

    /**
     * Creates a new proto_bc_join_table_ack instance using the specified properties.
     * @function create
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {Iproto_bc_join_table_ack=} [properties] Properties to set
     * @returns {proto_bc_join_table_ack} proto_bc_join_table_ack instance
     */
    proto_bc_join_table_ack.create = function create(properties) {
        return new proto_bc_join_table_ack(properties);
    };

    /**
     * Encodes the specified proto_bc_join_table_ack message. Does not implicitly {@link proto_bc_join_table_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {Iproto_bc_join_table_ack} message proto_bc_join_table_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_join_table_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        $root.proto_TableAttr.encode(message.tableAttrs, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        writer.uint32(/* id 3, wireType 2 =*/26).string(message.errMsg);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_join_table_ack message, length delimited. Does not implicitly {@link proto_bc_join_table_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {Iproto_bc_join_table_ack} message proto_bc_join_table_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_join_table_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_join_table_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_join_table_ack} proto_bc_join_table_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_join_table_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_join_table_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.tableAttrs = $root.proto_TableAttr.decode(reader, reader.uint32());
                break;
            case 3:
                message.errMsg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("tableAttrs"))
            throw $util.ProtocolError("missing required 'tableAttrs'", { instance: message });
        if (!message.hasOwnProperty("errMsg"))
            throw $util.ProtocolError("missing required 'errMsg'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_join_table_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_join_table_ack} proto_bc_join_table_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_join_table_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_join_table_ack message.
     * @function verify
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_join_table_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        {
            var error = $root.proto_TableAttr.verify(message.tableAttrs);
            if (error)
                return "tableAttrs." + error;
        }
        if (!$util.isString(message.errMsg))
            return "errMsg: string expected";
        return null;
    };

    /**
     * Creates a proto_bc_join_table_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_join_table_ack} proto_bc_join_table_ack
     */
    proto_bc_join_table_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_join_table_ack)
            return object;
        var message = new $root.proto_bc_join_table_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.tableAttrs != null) {
            if (typeof object.tableAttrs !== "object")
                throw TypeError(".proto_bc_join_table_ack.tableAttrs: object expected");
            message.tableAttrs = $root.proto_TableAttr.fromObject(object.tableAttrs);
        }
        if (object.errMsg != null)
            message.errMsg = String(object.errMsg);
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_join_table_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_join_table_ack
     * @static
     * @param {proto_bc_join_table_ack} message proto_bc_join_table_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_join_table_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.tableAttrs = null;
            object.errMsg = "";
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.tableAttrs != null && message.hasOwnProperty("tableAttrs"))
            object.tableAttrs = $root.proto_TableAttr.toObject(message.tableAttrs, options);
        if (message.errMsg != null && message.hasOwnProperty("errMsg"))
            object.errMsg = message.errMsg;
        return object;
    };

    /**
     * Converts this proto_bc_join_table_ack to JSON.
     * @function toJSON
     * @memberof proto_bc_join_table_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_join_table_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_join_table_ack;
})();

$root.proto_TableAttr = (function() {

    /**
     * Properties of a proto_TableAttr.
     * @exports Iproto_TableAttr
     * @interface Iproto_TableAttr
     * @property {number} tableId proto_TableAttr tableId
     * @property {string} name proto_TableAttr name
     * @property {number} lock proto_TableAttr lock
     * @property {Array.<Iproto_PlyBaseData>|null} [players] proto_TableAttr players
     */

    /**
     * Constructs a new proto_TableAttr.
     * @exports proto_TableAttr
     * @classdesc Represents a proto_TableAttr.
     * @implements Iproto_TableAttr
     * @constructor
     * @param {Iproto_TableAttr=} [properties] Properties to set
     */
    function proto_TableAttr(properties) {
        this.players = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_TableAttr tableId.
     * @member {number} tableId
     * @memberof proto_TableAttr
     * @instance
     */
    proto_TableAttr.prototype.tableId = 0;

    /**
     * proto_TableAttr name.
     * @member {string} name
     * @memberof proto_TableAttr
     * @instance
     */
    proto_TableAttr.prototype.name = "";

    /**
     * proto_TableAttr lock.
     * @member {number} lock
     * @memberof proto_TableAttr
     * @instance
     */
    proto_TableAttr.prototype.lock = 0;

    /**
     * proto_TableAttr players.
     * @member {Array.<Iproto_PlyBaseData>} players
     * @memberof proto_TableAttr
     * @instance
     */
    proto_TableAttr.prototype.players = $util.emptyArray;

    /**
     * Creates a new proto_TableAttr instance using the specified properties.
     * @function create
     * @memberof proto_TableAttr
     * @static
     * @param {Iproto_TableAttr=} [properties] Properties to set
     * @returns {proto_TableAttr} proto_TableAttr instance
     */
    proto_TableAttr.create = function create(properties) {
        return new proto_TableAttr(properties);
    };

    /**
     * Encodes the specified proto_TableAttr message. Does not implicitly {@link proto_TableAttr.verify|verify} messages.
     * @function encode
     * @memberof proto_TableAttr
     * @static
     * @param {Iproto_TableAttr} message proto_TableAttr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_TableAttr.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tableId);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lock);
        if (message.players != null && message.players.length)
            for (var i = 0; i < message.players.length; ++i)
                $root.proto_PlyBaseData.encode(message.players[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_TableAttr message, length delimited. Does not implicitly {@link proto_TableAttr.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_TableAttr
     * @static
     * @param {Iproto_TableAttr} message proto_TableAttr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_TableAttr.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_TableAttr message from the specified reader or buffer.
     * @function decode
     * @memberof proto_TableAttr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_TableAttr} proto_TableAttr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_TableAttr.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_TableAttr();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableId = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.lock = reader.int32();
                break;
            case 4:
                if (!(message.players && message.players.length))
                    message.players = [];
                message.players.push($root.proto_PlyBaseData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("tableId"))
            throw $util.ProtocolError("missing required 'tableId'", { instance: message });
        if (!message.hasOwnProperty("name"))
            throw $util.ProtocolError("missing required 'name'", { instance: message });
        if (!message.hasOwnProperty("lock"))
            throw $util.ProtocolError("missing required 'lock'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_TableAttr message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_TableAttr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_TableAttr} proto_TableAttr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_TableAttr.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_TableAttr message.
     * @function verify
     * @memberof proto_TableAttr
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_TableAttr.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.tableId))
            return "tableId: integer expected";
        if (!$util.isString(message.name))
            return "name: string expected";
        if (!$util.isInteger(message.lock))
            return "lock: integer expected";
        if (message.players != null && message.hasOwnProperty("players")) {
            if (!Array.isArray(message.players))
                return "players: array expected";
            for (var i = 0; i < message.players.length; ++i) {
                var error = $root.proto_PlyBaseData.verify(message.players[i]);
                if (error)
                    return "players." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_TableAttr message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_TableAttr
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_TableAttr} proto_TableAttr
     */
    proto_TableAttr.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_TableAttr)
            return object;
        var message = new $root.proto_TableAttr();
        if (object.tableId != null)
            message.tableId = object.tableId | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.lock != null)
            message.lock = object.lock | 0;
        if (object.players) {
            if (!Array.isArray(object.players))
                throw TypeError(".proto_TableAttr.players: array expected");
            message.players = [];
            for (var i = 0; i < object.players.length; ++i) {
                if (typeof object.players[i] !== "object")
                    throw TypeError(".proto_TableAttr.players: object expected");
                message.players[i] = $root.proto_PlyBaseData.fromObject(object.players[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_TableAttr message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_TableAttr
     * @static
     * @param {proto_TableAttr} message proto_TableAttr
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_TableAttr.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.players = [];
        if (options.defaults) {
            object.tableId = 0;
            object.name = "";
            object.lock = 0;
        }
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.lock != null && message.hasOwnProperty("lock"))
            object.lock = message.lock;
        if (message.players && message.players.length) {
            object.players = [];
            for (var j = 0; j < message.players.length; ++j)
                object.players[j] = $root.proto_PlyBaseData.toObject(message.players[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_TableAttr to JSON.
     * @function toJSON
     * @memberof proto_TableAttr
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_TableAttr.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_TableAttr;
})();

$root.proto_cb_leave_table_req = (function() {

    /**
     * Properties of a proto_cb_leave_table_req.
     * @exports Iproto_cb_leave_table_req
     * @interface Iproto_cb_leave_table_req
     */

    /**
     * Constructs a new proto_cb_leave_table_req.
     * @exports proto_cb_leave_table_req
     * @classdesc Represents a proto_cb_leave_table_req.
     * @implements Iproto_cb_leave_table_req
     * @constructor
     * @param {Iproto_cb_leave_table_req=} [properties] Properties to set
     */
    function proto_cb_leave_table_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cb_leave_table_req instance using the specified properties.
     * @function create
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {Iproto_cb_leave_table_req=} [properties] Properties to set
     * @returns {proto_cb_leave_table_req} proto_cb_leave_table_req instance
     */
    proto_cb_leave_table_req.create = function create(properties) {
        return new proto_cb_leave_table_req(properties);
    };

    /**
     * Encodes the specified proto_cb_leave_table_req message. Does not implicitly {@link proto_cb_leave_table_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {Iproto_cb_leave_table_req} message proto_cb_leave_table_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_leave_table_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cb_leave_table_req message, length delimited. Does not implicitly {@link proto_cb_leave_table_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {Iproto_cb_leave_table_req} message proto_cb_leave_table_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_leave_table_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cb_leave_table_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cb_leave_table_req} proto_cb_leave_table_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_leave_table_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cb_leave_table_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cb_leave_table_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cb_leave_table_req} proto_cb_leave_table_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_leave_table_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cb_leave_table_req message.
     * @function verify
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cb_leave_table_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cb_leave_table_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cb_leave_table_req} proto_cb_leave_table_req
     */
    proto_cb_leave_table_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cb_leave_table_req)
            return object;
        return new $root.proto_cb_leave_table_req();
    };

    /**
     * Creates a plain object from a proto_cb_leave_table_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cb_leave_table_req
     * @static
     * @param {proto_cb_leave_table_req} message proto_cb_leave_table_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cb_leave_table_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cb_leave_table_req to JSON.
     * @function toJSON
     * @memberof proto_cb_leave_table_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cb_leave_table_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cb_leave_table_req;
})();

$root.proto_bc_leave_table_ack = (function() {

    /**
     * Properties of a proto_bc_leave_table_ack.
     * @exports Iproto_bc_leave_table_ack
     * @interface Iproto_bc_leave_table_ack
     * @property {number} ret proto_bc_leave_table_ack ret
     * @property {string} plyNickname proto_bc_leave_table_ack plyNickname
     */

    /**
     * Constructs a new proto_bc_leave_table_ack.
     * @exports proto_bc_leave_table_ack
     * @classdesc Represents a proto_bc_leave_table_ack.
     * @implements Iproto_bc_leave_table_ack
     * @constructor
     * @param {Iproto_bc_leave_table_ack=} [properties] Properties to set
     */
    function proto_bc_leave_table_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_leave_table_ack ret.
     * @member {number} ret
     * @memberof proto_bc_leave_table_ack
     * @instance
     */
    proto_bc_leave_table_ack.prototype.ret = 0;

    /**
     * proto_bc_leave_table_ack plyNickname.
     * @member {string} plyNickname
     * @memberof proto_bc_leave_table_ack
     * @instance
     */
    proto_bc_leave_table_ack.prototype.plyNickname = "";

    /**
     * Creates a new proto_bc_leave_table_ack instance using the specified properties.
     * @function create
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {Iproto_bc_leave_table_ack=} [properties] Properties to set
     * @returns {proto_bc_leave_table_ack} proto_bc_leave_table_ack instance
     */
    proto_bc_leave_table_ack.create = function create(properties) {
        return new proto_bc_leave_table_ack(properties);
    };

    /**
     * Encodes the specified proto_bc_leave_table_ack message. Does not implicitly {@link proto_bc_leave_table_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {Iproto_bc_leave_table_ack} message proto_bc_leave_table_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_leave_table_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.plyNickname);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_leave_table_ack message, length delimited. Does not implicitly {@link proto_bc_leave_table_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {Iproto_bc_leave_table_ack} message proto_bc_leave_table_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_leave_table_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_leave_table_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_leave_table_ack} proto_bc_leave_table_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_leave_table_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_leave_table_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.plyNickname = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("plyNickname"))
            throw $util.ProtocolError("missing required 'plyNickname'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_leave_table_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_leave_table_ack} proto_bc_leave_table_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_leave_table_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_leave_table_ack message.
     * @function verify
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_leave_table_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (!$util.isString(message.plyNickname))
            return "plyNickname: string expected";
        return null;
    };

    /**
     * Creates a proto_bc_leave_table_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_leave_table_ack} proto_bc_leave_table_ack
     */
    proto_bc_leave_table_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_leave_table_ack)
            return object;
        var message = new $root.proto_bc_leave_table_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.plyNickname != null)
            message.plyNickname = String(object.plyNickname);
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_leave_table_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_leave_table_ack
     * @static
     * @param {proto_bc_leave_table_ack} message proto_bc_leave_table_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_leave_table_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.plyNickname = "";
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.plyNickname != null && message.hasOwnProperty("plyNickname"))
            object.plyNickname = message.plyNickname;
        return object;
    };

    /**
     * Converts this proto_bc_leave_table_ack to JSON.
     * @function toJSON
     * @memberof proto_bc_leave_table_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_leave_table_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_leave_table_ack;
})();

$root.proto_bc_ply_join_not = (function() {

    /**
     * Properties of a proto_bc_ply_join_not.
     * @exports Iproto_bc_ply_join_not
     * @interface Iproto_bc_ply_join_not
     * @property {Iproto_PlyBaseData} plyData proto_bc_ply_join_not plyData
     */

    /**
     * Constructs a new proto_bc_ply_join_not.
     * @exports proto_bc_ply_join_not
     * @classdesc Represents a proto_bc_ply_join_not.
     * @implements Iproto_bc_ply_join_not
     * @constructor
     * @param {Iproto_bc_ply_join_not=} [properties] Properties to set
     */
    function proto_bc_ply_join_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_ply_join_not plyData.
     * @member {Iproto_PlyBaseData} plyData
     * @memberof proto_bc_ply_join_not
     * @instance
     */
    proto_bc_ply_join_not.prototype.plyData = null;

    /**
     * Creates a new proto_bc_ply_join_not instance using the specified properties.
     * @function create
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {Iproto_bc_ply_join_not=} [properties] Properties to set
     * @returns {proto_bc_ply_join_not} proto_bc_ply_join_not instance
     */
    proto_bc_ply_join_not.create = function create(properties) {
        return new proto_bc_ply_join_not(properties);
    };

    /**
     * Encodes the specified proto_bc_ply_join_not message. Does not implicitly {@link proto_bc_ply_join_not.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {Iproto_bc_ply_join_not} message proto_bc_ply_join_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_ply_join_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        $root.proto_PlyBaseData.encode(message.plyData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_bc_ply_join_not message, length delimited. Does not implicitly {@link proto_bc_ply_join_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {Iproto_bc_ply_join_not} message proto_bc_ply_join_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_ply_join_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_ply_join_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_ply_join_not} proto_bc_ply_join_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_ply_join_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_ply_join_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyData = $root.proto_PlyBaseData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyData"))
            throw $util.ProtocolError("missing required 'plyData'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_ply_join_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_ply_join_not} proto_bc_ply_join_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_ply_join_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_ply_join_not message.
     * @function verify
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_ply_join_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        {
            var error = $root.proto_PlyBaseData.verify(message.plyData);
            if (error)
                return "plyData." + error;
        }
        return null;
    };

    /**
     * Creates a proto_bc_ply_join_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_ply_join_not} proto_bc_ply_join_not
     */
    proto_bc_ply_join_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_ply_join_not)
            return object;
        var message = new $root.proto_bc_ply_join_not();
        if (object.plyData != null) {
            if (typeof object.plyData !== "object")
                throw TypeError(".proto_bc_ply_join_not.plyData: object expected");
            message.plyData = $root.proto_PlyBaseData.fromObject(object.plyData);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_ply_join_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_ply_join_not
     * @static
     * @param {proto_bc_ply_join_not} message proto_bc_ply_join_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_ply_join_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.plyData = null;
        if (message.plyData != null && message.hasOwnProperty("plyData"))
            object.plyData = $root.proto_PlyBaseData.toObject(message.plyData, options);
        return object;
    };

    /**
     * Converts this proto_bc_ply_join_not to JSON.
     * @function toJSON
     * @memberof proto_bc_ply_join_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_ply_join_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_ply_join_not;
})();

$root.proto_bc_ply_leave_not = (function() {

    /**
     * Properties of a proto_bc_ply_leave_not.
     * @exports Iproto_bc_ply_leave_not
     * @interface Iproto_bc_ply_leave_not
     * @property {number|Long} plyGuid proto_bc_ply_leave_not plyGuid
     */

    /**
     * Constructs a new proto_bc_ply_leave_not.
     * @exports proto_bc_ply_leave_not
     * @classdesc Represents a proto_bc_ply_leave_not.
     * @implements Iproto_bc_ply_leave_not
     * @constructor
     * @param {Iproto_bc_ply_leave_not=} [properties] Properties to set
     */
    function proto_bc_ply_leave_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_ply_leave_not plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_bc_ply_leave_not
     * @instance
     */
    proto_bc_ply_leave_not.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new proto_bc_ply_leave_not instance using the specified properties.
     * @function create
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {Iproto_bc_ply_leave_not=} [properties] Properties to set
     * @returns {proto_bc_ply_leave_not} proto_bc_ply_leave_not instance
     */
    proto_bc_ply_leave_not.create = function create(properties) {
        return new proto_bc_ply_leave_not(properties);
    };

    /**
     * Encodes the specified proto_bc_ply_leave_not message. Does not implicitly {@link proto_bc_ply_leave_not.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {Iproto_bc_ply_leave_not} message proto_bc_ply_leave_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_ply_leave_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_ply_leave_not message, length delimited. Does not implicitly {@link proto_bc_ply_leave_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {Iproto_bc_ply_leave_not} message proto_bc_ply_leave_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_ply_leave_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_ply_leave_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_ply_leave_not} proto_bc_ply_leave_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_ply_leave_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_ply_leave_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_ply_leave_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_ply_leave_not} proto_bc_ply_leave_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_ply_leave_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_ply_leave_not message.
     * @function verify
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_ply_leave_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        return null;
    };

    /**
     * Creates a proto_bc_ply_leave_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_ply_leave_not} proto_bc_ply_leave_not
     */
    proto_bc_ply_leave_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_ply_leave_not)
            return object;
        var message = new $root.proto_bc_ply_leave_not();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_ply_leave_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_ply_leave_not
     * @static
     * @param {proto_bc_ply_leave_not} message proto_bc_ply_leave_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_ply_leave_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        return object;
    };

    /**
     * Converts this proto_bc_ply_leave_not to JSON.
     * @function toJSON
     * @memberof proto_bc_ply_leave_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_ply_leave_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_ply_leave_not;
})();

$root.proto_cb_ready_req = (function() {

    /**
     * Properties of a proto_cb_ready_req.
     * @exports Iproto_cb_ready_req
     * @interface Iproto_cb_ready_req
     */

    /**
     * Constructs a new proto_cb_ready_req.
     * @exports proto_cb_ready_req
     * @classdesc Represents a proto_cb_ready_req.
     * @implements Iproto_cb_ready_req
     * @constructor
     * @param {Iproto_cb_ready_req=} [properties] Properties to set
     */
    function proto_cb_ready_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cb_ready_req instance using the specified properties.
     * @function create
     * @memberof proto_cb_ready_req
     * @static
     * @param {Iproto_cb_ready_req=} [properties] Properties to set
     * @returns {proto_cb_ready_req} proto_cb_ready_req instance
     */
    proto_cb_ready_req.create = function create(properties) {
        return new proto_cb_ready_req(properties);
    };

    /**
     * Encodes the specified proto_cb_ready_req message. Does not implicitly {@link proto_cb_ready_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cb_ready_req
     * @static
     * @param {Iproto_cb_ready_req} message proto_cb_ready_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_ready_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cb_ready_req message, length delimited. Does not implicitly {@link proto_cb_ready_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cb_ready_req
     * @static
     * @param {Iproto_cb_ready_req} message proto_cb_ready_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_ready_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cb_ready_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cb_ready_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cb_ready_req} proto_cb_ready_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_ready_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cb_ready_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cb_ready_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cb_ready_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cb_ready_req} proto_cb_ready_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_ready_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cb_ready_req message.
     * @function verify
     * @memberof proto_cb_ready_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cb_ready_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cb_ready_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cb_ready_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cb_ready_req} proto_cb_ready_req
     */
    proto_cb_ready_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cb_ready_req)
            return object;
        return new $root.proto_cb_ready_req();
    };

    /**
     * Creates a plain object from a proto_cb_ready_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cb_ready_req
     * @static
     * @param {proto_cb_ready_req} message proto_cb_ready_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cb_ready_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cb_ready_req to JSON.
     * @function toJSON
     * @memberof proto_cb_ready_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cb_ready_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cb_ready_req;
})();

$root.proto_bc_ready_not = (function() {

    /**
     * Properties of a proto_bc_ready_not.
     * @exports Iproto_bc_ready_not
     * @interface Iproto_bc_ready_not
     * @property {number|Long} plyGuid proto_bc_ready_not plyGuid
     */

    /**
     * Constructs a new proto_bc_ready_not.
     * @exports proto_bc_ready_not
     * @classdesc Represents a proto_bc_ready_not.
     * @implements Iproto_bc_ready_not
     * @constructor
     * @param {Iproto_bc_ready_not=} [properties] Properties to set
     */
    function proto_bc_ready_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_ready_not plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_bc_ready_not
     * @instance
     */
    proto_bc_ready_not.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new proto_bc_ready_not instance using the specified properties.
     * @function create
     * @memberof proto_bc_ready_not
     * @static
     * @param {Iproto_bc_ready_not=} [properties] Properties to set
     * @returns {proto_bc_ready_not} proto_bc_ready_not instance
     */
    proto_bc_ready_not.create = function create(properties) {
        return new proto_bc_ready_not(properties);
    };

    /**
     * Encodes the specified proto_bc_ready_not message. Does not implicitly {@link proto_bc_ready_not.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_ready_not
     * @static
     * @param {Iproto_bc_ready_not} message proto_bc_ready_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_ready_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_ready_not message, length delimited. Does not implicitly {@link proto_bc_ready_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_ready_not
     * @static
     * @param {Iproto_bc_ready_not} message proto_bc_ready_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_ready_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_ready_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_ready_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_ready_not} proto_bc_ready_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_ready_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_ready_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_ready_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_ready_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_ready_not} proto_bc_ready_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_ready_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_ready_not message.
     * @function verify
     * @memberof proto_bc_ready_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_ready_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        return null;
    };

    /**
     * Creates a proto_bc_ready_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_ready_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_ready_not} proto_bc_ready_not
     */
    proto_bc_ready_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_ready_not)
            return object;
        var message = new $root.proto_bc_ready_not();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_ready_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_ready_not
     * @static
     * @param {proto_bc_ready_not} message proto_bc_ready_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_ready_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        return object;
    };

    /**
     * Converts this proto_bc_ready_not to JSON.
     * @function toJSON
     * @memberof proto_bc_ready_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_ready_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_ready_not;
})();

$root.proto_cb_change_table_req = (function() {

    /**
     * Properties of a proto_cb_change_table_req.
     * @exports Iproto_cb_change_table_req
     * @interface Iproto_cb_change_table_req
     */

    /**
     * Constructs a new proto_cb_change_table_req.
     * @exports proto_cb_change_table_req
     * @classdesc Represents a proto_cb_change_table_req.
     * @implements Iproto_cb_change_table_req
     * @constructor
     * @param {Iproto_cb_change_table_req=} [properties] Properties to set
     */
    function proto_cb_change_table_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cb_change_table_req instance using the specified properties.
     * @function create
     * @memberof proto_cb_change_table_req
     * @static
     * @param {Iproto_cb_change_table_req=} [properties] Properties to set
     * @returns {proto_cb_change_table_req} proto_cb_change_table_req instance
     */
    proto_cb_change_table_req.create = function create(properties) {
        return new proto_cb_change_table_req(properties);
    };

    /**
     * Encodes the specified proto_cb_change_table_req message. Does not implicitly {@link proto_cb_change_table_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cb_change_table_req
     * @static
     * @param {Iproto_cb_change_table_req} message proto_cb_change_table_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_change_table_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cb_change_table_req message, length delimited. Does not implicitly {@link proto_cb_change_table_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cb_change_table_req
     * @static
     * @param {Iproto_cb_change_table_req} message proto_cb_change_table_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cb_change_table_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cb_change_table_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cb_change_table_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cb_change_table_req} proto_cb_change_table_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_change_table_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cb_change_table_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cb_change_table_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cb_change_table_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cb_change_table_req} proto_cb_change_table_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cb_change_table_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cb_change_table_req message.
     * @function verify
     * @memberof proto_cb_change_table_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cb_change_table_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cb_change_table_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cb_change_table_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cb_change_table_req} proto_cb_change_table_req
     */
    proto_cb_change_table_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cb_change_table_req)
            return object;
        return new $root.proto_cb_change_table_req();
    };

    /**
     * Creates a plain object from a proto_cb_change_table_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cb_change_table_req
     * @static
     * @param {proto_cb_change_table_req} message proto_cb_change_table_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cb_change_table_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cb_change_table_req to JSON.
     * @function toJSON
     * @memberof proto_cb_change_table_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cb_change_table_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cb_change_table_req;
})();

$root.proto_bc_update_ply_data_not = (function() {

    /**
     * Properties of a proto_bc_update_ply_data_not.
     * @exports Iproto_bc_update_ply_data_not
     * @interface Iproto_bc_update_ply_data_not
     * @property {number|Long} plyGuid proto_bc_update_ply_data_not plyGuid
     * @property {number} uptReason proto_bc_update_ply_data_not uptReason
     * @property {number} uptType proto_bc_update_ply_data_not uptType
     * @property {number} variant proto_bc_update_ply_data_not variant
     * @property {number|Long} amount proto_bc_update_ply_data_not amount
     */

    /**
     * Constructs a new proto_bc_update_ply_data_not.
     * @exports proto_bc_update_ply_data_not
     * @classdesc Represents a proto_bc_update_ply_data_not.
     * @implements Iproto_bc_update_ply_data_not
     * @constructor
     * @param {Iproto_bc_update_ply_data_not=} [properties] Properties to set
     */
    function proto_bc_update_ply_data_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_update_ply_data_not plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_bc_update_ply_data_not
     * @instance
     */
    proto_bc_update_ply_data_not.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_bc_update_ply_data_not uptReason.
     * @member {number} uptReason
     * @memberof proto_bc_update_ply_data_not
     * @instance
     */
    proto_bc_update_ply_data_not.prototype.uptReason = 0;

    /**
     * proto_bc_update_ply_data_not uptType.
     * @member {number} uptType
     * @memberof proto_bc_update_ply_data_not
     * @instance
     */
    proto_bc_update_ply_data_not.prototype.uptType = 0;

    /**
     * proto_bc_update_ply_data_not variant.
     * @member {number} variant
     * @memberof proto_bc_update_ply_data_not
     * @instance
     */
    proto_bc_update_ply_data_not.prototype.variant = 0;

    /**
     * proto_bc_update_ply_data_not amount.
     * @member {number|Long} amount
     * @memberof proto_bc_update_ply_data_not
     * @instance
     */
    proto_bc_update_ply_data_not.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new proto_bc_update_ply_data_not instance using the specified properties.
     * @function create
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {Iproto_bc_update_ply_data_not=} [properties] Properties to set
     * @returns {proto_bc_update_ply_data_not} proto_bc_update_ply_data_not instance
     */
    proto_bc_update_ply_data_not.create = function create(properties) {
        return new proto_bc_update_ply_data_not(properties);
    };

    /**
     * Encodes the specified proto_bc_update_ply_data_not message. Does not implicitly {@link proto_bc_update_ply_data_not.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {Iproto_bc_update_ply_data_not} message proto_bc_update_ply_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_update_ply_data_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uptReason);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.uptType);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.variant);
        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.amount);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_update_ply_data_not message, length delimited. Does not implicitly {@link proto_bc_update_ply_data_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {Iproto_bc_update_ply_data_not} message proto_bc_update_ply_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_update_ply_data_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_update_ply_data_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_update_ply_data_not} proto_bc_update_ply_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_update_ply_data_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_update_ply_data_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            case 2:
                message.uptReason = reader.int32();
                break;
            case 3:
                message.uptType = reader.int32();
                break;
            case 4:
                message.variant = reader.int32();
                break;
            case 5:
                message.amount = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        if (!message.hasOwnProperty("uptReason"))
            throw $util.ProtocolError("missing required 'uptReason'", { instance: message });
        if (!message.hasOwnProperty("uptType"))
            throw $util.ProtocolError("missing required 'uptType'", { instance: message });
        if (!message.hasOwnProperty("variant"))
            throw $util.ProtocolError("missing required 'variant'", { instance: message });
        if (!message.hasOwnProperty("amount"))
            throw $util.ProtocolError("missing required 'amount'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_update_ply_data_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_update_ply_data_not} proto_bc_update_ply_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_update_ply_data_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_update_ply_data_not message.
     * @function verify
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_update_ply_data_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        if (!$util.isInteger(message.uptReason))
            return "uptReason: integer expected";
        if (!$util.isInteger(message.uptType))
            return "uptType: integer expected";
        if (!$util.isInteger(message.variant))
            return "variant: integer expected";
        if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
            return "amount: integer|Long expected";
        return null;
    };

    /**
     * Creates a proto_bc_update_ply_data_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_update_ply_data_not} proto_bc_update_ply_data_not
     */
    proto_bc_update_ply_data_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_update_ply_data_not)
            return object;
        var message = new $root.proto_bc_update_ply_data_not();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        if (object.uptReason != null)
            message.uptReason = object.uptReason | 0;
        if (object.uptType != null)
            message.uptType = object.uptType | 0;
        if (object.variant != null)
            message.variant = object.variant | 0;
        if (object.amount != null)
            if ($util.Long)
                (message.amount = $util.Long.fromValue(object.amount)).unsigned = false;
            else if (typeof object.amount === "string")
                message.amount = parseInt(object.amount, 10);
            else if (typeof object.amount === "number")
                message.amount = object.amount;
            else if (typeof object.amount === "object")
                message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_update_ply_data_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_update_ply_data_not
     * @static
     * @param {proto_bc_update_ply_data_not} message proto_bc_update_ply_data_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_update_ply_data_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
            object.uptReason = 0;
            object.uptType = 0;
            object.variant = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.amount = options.longs === String ? "0" : 0;
        }
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        if (message.uptReason != null && message.hasOwnProperty("uptReason"))
            object.uptReason = message.uptReason;
        if (message.uptType != null && message.hasOwnProperty("uptType"))
            object.uptType = message.uptType;
        if (message.variant != null && message.hasOwnProperty("variant"))
            object.variant = message.variant;
        if (message.amount != null && message.hasOwnProperty("amount"))
            if (typeof message.amount === "number")
                object.amount = options.longs === String ? String(message.amount) : message.amount;
            else
                object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber() : message.amount;
        return object;
    };

    /**
     * Converts this proto_bc_update_ply_data_not to JSON.
     * @function toJSON
     * @memberof proto_bc_update_ply_data_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_update_ply_data_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_update_ply_data_not;
})();

$root.proto_bc_message_not = (function() {

    /**
     * Properties of a proto_bc_message_not.
     * @exports Iproto_bc_message_not
     * @interface Iproto_bc_message_not
     * @property {number} type proto_bc_message_not type
     * @property {string} message proto_bc_message_not message
     */

    /**
     * Constructs a new proto_bc_message_not.
     * @exports proto_bc_message_not
     * @classdesc Represents a proto_bc_message_not.
     * @implements Iproto_bc_message_not
     * @constructor
     * @param {Iproto_bc_message_not=} [properties] Properties to set
     */
    function proto_bc_message_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_message_not type.
     * @member {number} type
     * @memberof proto_bc_message_not
     * @instance
     */
    proto_bc_message_not.prototype.type = 0;

    /**
     * proto_bc_message_not message.
     * @member {string} message
     * @memberof proto_bc_message_not
     * @instance
     */
    proto_bc_message_not.prototype.message = "";

    /**
     * Creates a new proto_bc_message_not instance using the specified properties.
     * @function create
     * @memberof proto_bc_message_not
     * @static
     * @param {Iproto_bc_message_not=} [properties] Properties to set
     * @returns {proto_bc_message_not} proto_bc_message_not instance
     */
    proto_bc_message_not.create = function create(properties) {
        return new proto_bc_message_not(properties);
    };

    /**
     * Encodes the specified proto_bc_message_not message. Does not implicitly {@link proto_bc_message_not.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_message_not
     * @static
     * @param {Iproto_bc_message_not} message proto_bc_message_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_message_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_message_not message, length delimited. Does not implicitly {@link proto_bc_message_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_message_not
     * @static
     * @param {Iproto_bc_message_not} message proto_bc_message_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_message_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_message_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_message_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_message_not} proto_bc_message_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_message_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_message_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.message = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        if (!message.hasOwnProperty("message"))
            throw $util.ProtocolError("missing required 'message'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_message_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_message_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_message_not} proto_bc_message_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_message_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_message_not message.
     * @function verify
     * @memberof proto_bc_message_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_message_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.type))
            return "type: integer expected";
        if (!$util.isString(message.message))
            return "message: string expected";
        return null;
    };

    /**
     * Creates a proto_bc_message_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_message_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_message_not} proto_bc_message_not
     */
    proto_bc_message_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_message_not)
            return object;
        var message = new $root.proto_bc_message_not();
        if (object.type != null)
            message.type = object.type | 0;
        if (object.message != null)
            message.message = String(object.message);
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_message_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_message_not
     * @static
     * @param {proto_bc_message_not} message proto_bc_message_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_message_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = 0;
            object.message = "";
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.message != null && message.hasOwnProperty("message"))
            object.message = message.message;
        return object;
    };

    /**
     * Converts this proto_bc_message_not to JSON.
     * @function toJSON
     * @memberof proto_bc_message_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_message_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_message_not;
})();

$root.proto_bc_specify_item_update_not = (function() {

    /**
     * Properties of a proto_bc_specify_item_update_not.
     * @exports Iproto_bc_specify_item_update_not
     * @interface Iproto_bc_specify_item_update_not
     * @property {number|Long} plyGuid proto_bc_specify_item_update_not plyGuid
     * @property {number} index proto_bc_specify_item_update_not index
     * @property {number} num proto_bc_specify_item_update_not num
     */

    /**
     * Constructs a new proto_bc_specify_item_update_not.
     * @exports proto_bc_specify_item_update_not
     * @classdesc Represents a proto_bc_specify_item_update_not.
     * @implements Iproto_bc_specify_item_update_not
     * @constructor
     * @param {Iproto_bc_specify_item_update_not=} [properties] Properties to set
     */
    function proto_bc_specify_item_update_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_bc_specify_item_update_not plyGuid.
     * @member {number|Long} plyGuid
     * @memberof proto_bc_specify_item_update_not
     * @instance
     */
    proto_bc_specify_item_update_not.prototype.plyGuid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_bc_specify_item_update_not index.
     * @member {number} index
     * @memberof proto_bc_specify_item_update_not
     * @instance
     */
    proto_bc_specify_item_update_not.prototype.index = 0;

    /**
     * proto_bc_specify_item_update_not num.
     * @member {number} num
     * @memberof proto_bc_specify_item_update_not
     * @instance
     */
    proto_bc_specify_item_update_not.prototype.num = 0;

    /**
     * Creates a new proto_bc_specify_item_update_not instance using the specified properties.
     * @function create
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {Iproto_bc_specify_item_update_not=} [properties] Properties to set
     * @returns {proto_bc_specify_item_update_not} proto_bc_specify_item_update_not instance
     */
    proto_bc_specify_item_update_not.create = function create(properties) {
        return new proto_bc_specify_item_update_not(properties);
    };

    /**
     * Encodes the specified proto_bc_specify_item_update_not message. Does not implicitly {@link proto_bc_specify_item_update_not.verify|verify} messages.
     * @function encode
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {Iproto_bc_specify_item_update_not} message proto_bc_specify_item_update_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_specify_item_update_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.plyGuid);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
        return writer;
    };

    /**
     * Encodes the specified proto_bc_specify_item_update_not message, length delimited. Does not implicitly {@link proto_bc_specify_item_update_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {Iproto_bc_specify_item_update_not} message proto_bc_specify_item_update_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_bc_specify_item_update_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_bc_specify_item_update_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_bc_specify_item_update_not} proto_bc_specify_item_update_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_specify_item_update_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_bc_specify_item_update_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyGuid = reader.int64();
                break;
            case 2:
                message.index = reader.int32();
                break;
            case 3:
                message.num = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyGuid"))
            throw $util.ProtocolError("missing required 'plyGuid'", { instance: message });
        if (!message.hasOwnProperty("index"))
            throw $util.ProtocolError("missing required 'index'", { instance: message });
        if (!message.hasOwnProperty("num"))
            throw $util.ProtocolError("missing required 'num'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_bc_specify_item_update_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_bc_specify_item_update_not} proto_bc_specify_item_update_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_bc_specify_item_update_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_bc_specify_item_update_not message.
     * @function verify
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_bc_specify_item_update_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyGuid) && !(message.plyGuid && $util.isInteger(message.plyGuid.low) && $util.isInteger(message.plyGuid.high)))
            return "plyGuid: integer|Long expected";
        if (!$util.isInteger(message.index))
            return "index: integer expected";
        if (!$util.isInteger(message.num))
            return "num: integer expected";
        return null;
    };

    /**
     * Creates a proto_bc_specify_item_update_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_bc_specify_item_update_not} proto_bc_specify_item_update_not
     */
    proto_bc_specify_item_update_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_bc_specify_item_update_not)
            return object;
        var message = new $root.proto_bc_specify_item_update_not();
        if (object.plyGuid != null)
            if ($util.Long)
                (message.plyGuid = $util.Long.fromValue(object.plyGuid)).unsigned = false;
            else if (typeof object.plyGuid === "string")
                message.plyGuid = parseInt(object.plyGuid, 10);
            else if (typeof object.plyGuid === "number")
                message.plyGuid = object.plyGuid;
            else if (typeof object.plyGuid === "object")
                message.plyGuid = new $util.LongBits(object.plyGuid.low >>> 0, object.plyGuid.high >>> 0).toNumber();
        if (object.index != null)
            message.index = object.index | 0;
        if (object.num != null)
            message.num = object.num | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_bc_specify_item_update_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_bc_specify_item_update_not
     * @static
     * @param {proto_bc_specify_item_update_not} message proto_bc_specify_item_update_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_bc_specify_item_update_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.plyGuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.plyGuid = options.longs === String ? "0" : 0;
            object.index = 0;
            object.num = 0;
        }
        if (message.plyGuid != null && message.hasOwnProperty("plyGuid"))
            if (typeof message.plyGuid === "number")
                object.plyGuid = options.longs === String ? String(message.plyGuid) : message.plyGuid;
            else
                object.plyGuid = options.longs === String ? $util.Long.prototype.toString.call(message.plyGuid) : options.longs === Number ? new $util.LongBits(message.plyGuid.low >>> 0, message.plyGuid.high >>> 0).toNumber() : message.plyGuid;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        return object;
    };

    /**
     * Converts this proto_bc_specify_item_update_not to JSON.
     * @function toJSON
     * @memberof proto_bc_specify_item_update_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_bc_specify_item_update_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_bc_specify_item_update_not;
})();

$root.proto_gc_game_start_not = (function() {

    /**
     * Properties of a proto_gc_game_start_not.
     * @exports Iproto_gc_game_start_not
     * @interface Iproto_gc_game_start_not
     * @property {number} nGameMoney proto_gc_game_start_not nGameMoney
     * @property {number} nCardNum proto_gc_game_start_not nCardNum
     * @property {number} nLordPos proto_gc_game_start_not nLordPos
     * @property {Iproto_CCard} cLordCard proto_gc_game_start_not cLordCard
     * @property {number} nSerialID proto_gc_game_start_not nSerialID
     */

    /**
     * Constructs a new proto_gc_game_start_not.
     * @exports proto_gc_game_start_not
     * @classdesc Represents a proto_gc_game_start_not.
     * @implements Iproto_gc_game_start_not
     * @constructor
     * @param {Iproto_gc_game_start_not=} [properties] Properties to set
     */
    function proto_gc_game_start_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_game_start_not nGameMoney.
     * @member {number} nGameMoney
     * @memberof proto_gc_game_start_not
     * @instance
     */
    proto_gc_game_start_not.prototype.nGameMoney = 0;

    /**
     * proto_gc_game_start_not nCardNum.
     * @member {number} nCardNum
     * @memberof proto_gc_game_start_not
     * @instance
     */
    proto_gc_game_start_not.prototype.nCardNum = 0;

    /**
     * proto_gc_game_start_not nLordPos.
     * @member {number} nLordPos
     * @memberof proto_gc_game_start_not
     * @instance
     */
    proto_gc_game_start_not.prototype.nLordPos = 0;

    /**
     * proto_gc_game_start_not cLordCard.
     * @member {Iproto_CCard} cLordCard
     * @memberof proto_gc_game_start_not
     * @instance
     */
    proto_gc_game_start_not.prototype.cLordCard = null;

    /**
     * proto_gc_game_start_not nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_game_start_not
     * @instance
     */
    proto_gc_game_start_not.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_game_start_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_game_start_not
     * @static
     * @param {Iproto_gc_game_start_not=} [properties] Properties to set
     * @returns {proto_gc_game_start_not} proto_gc_game_start_not instance
     */
    proto_gc_game_start_not.create = function create(properties) {
        return new proto_gc_game_start_not(properties);
    };

    /**
     * Encodes the specified proto_gc_game_start_not message. Does not implicitly {@link proto_gc_game_start_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_game_start_not
     * @static
     * @param {Iproto_gc_game_start_not} message proto_gc_game_start_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_start_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nGameMoney);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nCardNum);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nLordPos);
        $root.proto_CCard.encode(message.cLordCard, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_game_start_not message, length delimited. Does not implicitly {@link proto_gc_game_start_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_game_start_not
     * @static
     * @param {Iproto_gc_game_start_not} message proto_gc_game_start_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_start_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_game_start_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_game_start_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_game_start_not} proto_gc_game_start_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_start_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_game_start_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nGameMoney = reader.int32();
                break;
            case 2:
                message.nCardNum = reader.int32();
                break;
            case 3:
                message.nLordPos = reader.int32();
                break;
            case 4:
                message.cLordCard = $root.proto_CCard.decode(reader, reader.uint32());
                break;
            case 5:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nGameMoney"))
            throw $util.ProtocolError("missing required 'nGameMoney'", { instance: message });
        if (!message.hasOwnProperty("nCardNum"))
            throw $util.ProtocolError("missing required 'nCardNum'", { instance: message });
        if (!message.hasOwnProperty("nLordPos"))
            throw $util.ProtocolError("missing required 'nLordPos'", { instance: message });
        if (!message.hasOwnProperty("cLordCard"))
            throw $util.ProtocolError("missing required 'cLordCard'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_game_start_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_game_start_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_game_start_not} proto_gc_game_start_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_start_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_game_start_not message.
     * @function verify
     * @memberof proto_gc_game_start_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_game_start_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nGameMoney))
            return "nGameMoney: integer expected";
        if (!$util.isInteger(message.nCardNum))
            return "nCardNum: integer expected";
        if (!$util.isInteger(message.nLordPos))
            return "nLordPos: integer expected";
        {
            var error = $root.proto_CCard.verify(message.cLordCard);
            if (error)
                return "cLordCard." + error;
        }
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_game_start_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_game_start_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_game_start_not} proto_gc_game_start_not
     */
    proto_gc_game_start_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_game_start_not)
            return object;
        var message = new $root.proto_gc_game_start_not();
        if (object.nGameMoney != null)
            message.nGameMoney = object.nGameMoney | 0;
        if (object.nCardNum != null)
            message.nCardNum = object.nCardNum | 0;
        if (object.nLordPos != null)
            message.nLordPos = object.nLordPos | 0;
        if (object.cLordCard != null) {
            if (typeof object.cLordCard !== "object")
                throw TypeError(".proto_gc_game_start_not.cLordCard: object expected");
            message.cLordCard = $root.proto_CCard.fromObject(object.cLordCard);
        }
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_game_start_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_game_start_not
     * @static
     * @param {proto_gc_game_start_not} message proto_gc_game_start_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_game_start_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nGameMoney = 0;
            object.nCardNum = 0;
            object.nLordPos = 0;
            object.cLordCard = null;
            object.nSerialID = 0;
        }
        if (message.nGameMoney != null && message.hasOwnProperty("nGameMoney"))
            object.nGameMoney = message.nGameMoney;
        if (message.nCardNum != null && message.hasOwnProperty("nCardNum"))
            object.nCardNum = message.nCardNum;
        if (message.nLordPos != null && message.hasOwnProperty("nLordPos"))
            object.nLordPos = message.nLordPos;
        if (message.cLordCard != null && message.hasOwnProperty("cLordCard"))
            object.cLordCard = $root.proto_CCard.toObject(message.cLordCard, options);
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_game_start_not to JSON.
     * @function toJSON
     * @memberof proto_gc_game_start_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_game_start_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_game_start_not;
})();

$root.proto_gc_counts_not1 = (function() {

    /**
     * Properties of a proto_gc_counts_not1.
     * @exports Iproto_gc_counts_not1
     * @interface Iproto_gc_counts_not1
     * @property {number} countsNum proto_gc_counts_not1 countsNum
     */

    /**
     * Constructs a new proto_gc_counts_not1.
     * @exports proto_gc_counts_not1
     * @classdesc Represents a proto_gc_counts_not1.
     * @implements Iproto_gc_counts_not1
     * @constructor
     * @param {Iproto_gc_counts_not1=} [properties] Properties to set
     */
    function proto_gc_counts_not1(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_counts_not1 countsNum.
     * @member {number} countsNum
     * @memberof proto_gc_counts_not1
     * @instance
     */
    proto_gc_counts_not1.prototype.countsNum = 0;

    /**
     * Creates a new proto_gc_counts_not1 instance using the specified properties.
     * @function create
     * @memberof proto_gc_counts_not1
     * @static
     * @param {Iproto_gc_counts_not1=} [properties] Properties to set
     * @returns {proto_gc_counts_not1} proto_gc_counts_not1 instance
     */
    proto_gc_counts_not1.create = function create(properties) {
        return new proto_gc_counts_not1(properties);
    };

    /**
     * Encodes the specified proto_gc_counts_not1 message. Does not implicitly {@link proto_gc_counts_not1.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_counts_not1
     * @static
     * @param {Iproto_gc_counts_not1} message proto_gc_counts_not1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_counts_not1.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.countsNum);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_counts_not1 message, length delimited. Does not implicitly {@link proto_gc_counts_not1.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_counts_not1
     * @static
     * @param {Iproto_gc_counts_not1} message proto_gc_counts_not1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_counts_not1.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_counts_not1 message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_counts_not1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_counts_not1} proto_gc_counts_not1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_counts_not1.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_counts_not1();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.countsNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("countsNum"))
            throw $util.ProtocolError("missing required 'countsNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_counts_not1 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_counts_not1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_counts_not1} proto_gc_counts_not1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_counts_not1.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_counts_not1 message.
     * @function verify
     * @memberof proto_gc_counts_not1
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_counts_not1.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.countsNum))
            return "countsNum: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_counts_not1 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_counts_not1
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_counts_not1} proto_gc_counts_not1
     */
    proto_gc_counts_not1.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_counts_not1)
            return object;
        var message = new $root.proto_gc_counts_not1();
        if (object.countsNum != null)
            message.countsNum = object.countsNum | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_counts_not1 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_counts_not1
     * @static
     * @param {proto_gc_counts_not1} message proto_gc_counts_not1
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_counts_not1.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.countsNum = 0;
        if (message.countsNum != null && message.hasOwnProperty("countsNum"))
            object.countsNum = message.countsNum;
        return object;
    };

    /**
     * Converts this proto_gc_counts_not1 to JSON.
     * @function toJSON
     * @memberof proto_gc_counts_not1
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_counts_not1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_counts_not1;
})();

$root.proto_sic_bet_req = (function() {

    /**
     * Properties of a proto_sic_bet_req.
     * @exports Iproto_sic_bet_req
     * @interface Iproto_sic_bet_req
     * @property {number} cCellID proto_sic_bet_req cCellID
     * @property {number} nAmount proto_sic_bet_req nAmount
     */

    /**
     * Constructs a new proto_sic_bet_req.
     * @exports proto_sic_bet_req
     * @classdesc Represents a proto_sic_bet_req.
     * @implements Iproto_sic_bet_req
     * @constructor
     * @param {Iproto_sic_bet_req=} [properties] Properties to set
     */
    function proto_sic_bet_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_bet_req cCellID.
     * @member {number} cCellID
     * @memberof proto_sic_bet_req
     * @instance
     */
    proto_sic_bet_req.prototype.cCellID = 0;

    /**
     * proto_sic_bet_req nAmount.
     * @member {number} nAmount
     * @memberof proto_sic_bet_req
     * @instance
     */
    proto_sic_bet_req.prototype.nAmount = 0;

    /**
     * Creates a new proto_sic_bet_req instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_req
     * @static
     * @param {Iproto_sic_bet_req=} [properties] Properties to set
     * @returns {proto_sic_bet_req} proto_sic_bet_req instance
     */
    proto_sic_bet_req.create = function create(properties) {
        return new proto_sic_bet_req(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_req message. Does not implicitly {@link proto_sic_bet_req.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_req
     * @static
     * @param {Iproto_sic_bet_req} message proto_sic_bet_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cCellID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nAmount);
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_req message, length delimited. Does not implicitly {@link proto_sic_bet_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_req
     * @static
     * @param {Iproto_sic_bet_req} message proto_sic_bet_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_req} proto_sic_bet_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cCellID = reader.int32();
                break;
            case 2:
                message.nAmount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cCellID"))
            throw $util.ProtocolError("missing required 'cCellID'", { instance: message });
        if (!message.hasOwnProperty("nAmount"))
            throw $util.ProtocolError("missing required 'nAmount'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_bet_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_req} proto_sic_bet_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_req message.
     * @function verify
     * @memberof proto_sic_bet_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cCellID))
            return "cCellID: integer expected";
        if (!$util.isInteger(message.nAmount))
            return "nAmount: integer expected";
        return null;
    };

    /**
     * Creates a proto_sic_bet_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_req} proto_sic_bet_req
     */
    proto_sic_bet_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_req)
            return object;
        var message = new $root.proto_sic_bet_req();
        if (object.cCellID != null)
            message.cCellID = object.cCellID | 0;
        if (object.nAmount != null)
            message.nAmount = object.nAmount | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_bet_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_req
     * @static
     * @param {proto_sic_bet_req} message proto_sic_bet_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cCellID = 0;
            object.nAmount = 0;
        }
        if (message.cCellID != null && message.hasOwnProperty("cCellID"))
            object.cCellID = message.cCellID;
        if (message.nAmount != null && message.hasOwnProperty("nAmount"))
            object.nAmount = message.nAmount;
        return object;
    };

    /**
     * Converts this proto_sic_bet_req to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_req;
})();

$root.proto_gc_task_not = (function() {

    /**
     * Properties of a proto_gc_task_not.
     * @exports Iproto_gc_task_not
     * @interface Iproto_gc_task_not
     * @property {Iproto_TaskItem} taskItem proto_gc_task_not taskItem
     */

    /**
     * Constructs a new proto_gc_task_not.
     * @exports proto_gc_task_not
     * @classdesc Represents a proto_gc_task_not.
     * @implements Iproto_gc_task_not
     * @constructor
     * @param {Iproto_gc_task_not=} [properties] Properties to set
     */
    function proto_gc_task_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_task_not taskItem.
     * @member {Iproto_TaskItem} taskItem
     * @memberof proto_gc_task_not
     * @instance
     */
    proto_gc_task_not.prototype.taskItem = null;

    /**
     * Creates a new proto_gc_task_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_task_not
     * @static
     * @param {Iproto_gc_task_not=} [properties] Properties to set
     * @returns {proto_gc_task_not} proto_gc_task_not instance
     */
    proto_gc_task_not.create = function create(properties) {
        return new proto_gc_task_not(properties);
    };

    /**
     * Encodes the specified proto_gc_task_not message. Does not implicitly {@link proto_gc_task_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_task_not
     * @static
     * @param {Iproto_gc_task_not} message proto_gc_task_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_task_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        $root.proto_TaskItem.encode(message.taskItem, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_task_not message, length delimited. Does not implicitly {@link proto_gc_task_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_task_not
     * @static
     * @param {Iproto_gc_task_not} message proto_gc_task_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_task_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_task_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_task_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_task_not} proto_gc_task_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_task_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_task_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.taskItem = $root.proto_TaskItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("taskItem"))
            throw $util.ProtocolError("missing required 'taskItem'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_task_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_task_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_task_not} proto_gc_task_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_task_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_task_not message.
     * @function verify
     * @memberof proto_gc_task_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_task_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        {
            var error = $root.proto_TaskItem.verify(message.taskItem);
            if (error)
                return "taskItem." + error;
        }
        return null;
    };

    /**
     * Creates a proto_gc_task_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_task_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_task_not} proto_gc_task_not
     */
    proto_gc_task_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_task_not)
            return object;
        var message = new $root.proto_gc_task_not();
        if (object.taskItem != null) {
            if (typeof object.taskItem !== "object")
                throw TypeError(".proto_gc_task_not.taskItem: object expected");
            message.taskItem = $root.proto_TaskItem.fromObject(object.taskItem);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_task_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_task_not
     * @static
     * @param {proto_gc_task_not} message proto_gc_task_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_task_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.taskItem = null;
        if (message.taskItem != null && message.hasOwnProperty("taskItem"))
            object.taskItem = $root.proto_TaskItem.toObject(message.taskItem, options);
        return object;
    };

    /**
     * Converts this proto_gc_task_not to JSON.
     * @function toJSON
     * @memberof proto_gc_task_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_task_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_task_not;
})();

$root.proto_gc_two_lord_card_not = (function() {

    /**
     * Properties of a proto_gc_two_lord_card_not.
     * @exports Iproto_gc_two_lord_card_not
     * @interface Iproto_gc_two_lord_card_not
     * @property {number} cLord proto_gc_two_lord_card_not cLord
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_two_lord_card_not vecCards
     * @property {number} nLetNum proto_gc_two_lord_card_not nLetNum
     * @property {number} nLordLetNum proto_gc_two_lord_card_not nLordLetNum
     */

    /**
     * Constructs a new proto_gc_two_lord_card_not.
     * @exports proto_gc_two_lord_card_not
     * @classdesc Represents a proto_gc_two_lord_card_not.
     * @implements Iproto_gc_two_lord_card_not
     * @constructor
     * @param {Iproto_gc_two_lord_card_not=} [properties] Properties to set
     */
    function proto_gc_two_lord_card_not(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_two_lord_card_not cLord.
     * @member {number} cLord
     * @memberof proto_gc_two_lord_card_not
     * @instance
     */
    proto_gc_two_lord_card_not.prototype.cLord = 0;

    /**
     * proto_gc_two_lord_card_not vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_two_lord_card_not
     * @instance
     */
    proto_gc_two_lord_card_not.prototype.vecCards = $util.emptyArray;

    /**
     * proto_gc_two_lord_card_not nLetNum.
     * @member {number} nLetNum
     * @memberof proto_gc_two_lord_card_not
     * @instance
     */
    proto_gc_two_lord_card_not.prototype.nLetNum = 0;

    /**
     * proto_gc_two_lord_card_not nLordLetNum.
     * @member {number} nLordLetNum
     * @memberof proto_gc_two_lord_card_not
     * @instance
     */
    proto_gc_two_lord_card_not.prototype.nLordLetNum = 0;

    /**
     * Creates a new proto_gc_two_lord_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {Iproto_gc_two_lord_card_not=} [properties] Properties to set
     * @returns {proto_gc_two_lord_card_not} proto_gc_two_lord_card_not instance
     */
    proto_gc_two_lord_card_not.create = function create(properties) {
        return new proto_gc_two_lord_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_two_lord_card_not message. Does not implicitly {@link proto_gc_two_lord_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {Iproto_gc_two_lord_card_not} message proto_gc_two_lord_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_lord_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cLord);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nLetNum);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nLordLetNum);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_two_lord_card_not message, length delimited. Does not implicitly {@link proto_gc_two_lord_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {Iproto_gc_two_lord_card_not} message proto_gc_two_lord_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_lord_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_two_lord_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_two_lord_card_not} proto_gc_two_lord_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_lord_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_two_lord_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cLord = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 3:
                message.nLetNum = reader.int32();
                break;
            case 4:
                message.nLordLetNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cLord"))
            throw $util.ProtocolError("missing required 'cLord'", { instance: message });
        if (!message.hasOwnProperty("nLetNum"))
            throw $util.ProtocolError("missing required 'nLetNum'", { instance: message });
        if (!message.hasOwnProperty("nLordLetNum"))
            throw $util.ProtocolError("missing required 'nLordLetNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_two_lord_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_two_lord_card_not} proto_gc_two_lord_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_lord_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_two_lord_card_not message.
     * @function verify
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_two_lord_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cLord))
            return "cLord: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        if (!$util.isInteger(message.nLetNum))
            return "nLetNum: integer expected";
        if (!$util.isInteger(message.nLordLetNum))
            return "nLordLetNum: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_two_lord_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_two_lord_card_not} proto_gc_two_lord_card_not
     */
    proto_gc_two_lord_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_two_lord_card_not)
            return object;
        var message = new $root.proto_gc_two_lord_card_not();
        if (object.cLord != null)
            message.cLord = object.cLord | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_two_lord_card_not.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_two_lord_card_not.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        if (object.nLetNum != null)
            message.nLetNum = object.nLetNum | 0;
        if (object.nLordLetNum != null)
            message.nLordLetNum = object.nLordLetNum | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_two_lord_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_two_lord_card_not
     * @static
     * @param {proto_gc_two_lord_card_not} message proto_gc_two_lord_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_two_lord_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults) {
            object.cLord = 0;
            object.nLetNum = 0;
            object.nLordLetNum = 0;
        }
        if (message.cLord != null && message.hasOwnProperty("cLord"))
            object.cLord = message.cLord;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        if (message.nLetNum != null && message.hasOwnProperty("nLetNum"))
            object.nLetNum = message.nLetNum;
        if (message.nLordLetNum != null && message.hasOwnProperty("nLordLetNum"))
            object.nLordLetNum = message.nLordLetNum;
        return object;
    };

    /**
     * Converts this proto_gc_two_lord_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_two_lord_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_two_lord_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_two_lord_card_not;
})();

$root.proto_gc_expression_not = (function() {

    /**
     * Properties of a proto_gc_expression_not.
     * @exports Iproto_gc_expression_not
     * @interface Iproto_gc_expression_not
     * @property {number} expressionType proto_gc_expression_not expressionType
     * @property {number} expressionNum proto_gc_expression_not expressionNum
     */

    /**
     * Constructs a new proto_gc_expression_not.
     * @exports proto_gc_expression_not
     * @classdesc Represents a proto_gc_expression_not.
     * @implements Iproto_gc_expression_not
     * @constructor
     * @param {Iproto_gc_expression_not=} [properties] Properties to set
     */
    function proto_gc_expression_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_expression_not expressionType.
     * @member {number} expressionType
     * @memberof proto_gc_expression_not
     * @instance
     */
    proto_gc_expression_not.prototype.expressionType = 0;

    /**
     * proto_gc_expression_not expressionNum.
     * @member {number} expressionNum
     * @memberof proto_gc_expression_not
     * @instance
     */
    proto_gc_expression_not.prototype.expressionNum = 0;

    /**
     * Creates a new proto_gc_expression_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_expression_not
     * @static
     * @param {Iproto_gc_expression_not=} [properties] Properties to set
     * @returns {proto_gc_expression_not} proto_gc_expression_not instance
     */
    proto_gc_expression_not.create = function create(properties) {
        return new proto_gc_expression_not(properties);
    };

    /**
     * Encodes the specified proto_gc_expression_not message. Does not implicitly {@link proto_gc_expression_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_expression_not
     * @static
     * @param {Iproto_gc_expression_not} message proto_gc_expression_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_expression_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.expressionType);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.expressionNum);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_expression_not message, length delimited. Does not implicitly {@link proto_gc_expression_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_expression_not
     * @static
     * @param {Iproto_gc_expression_not} message proto_gc_expression_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_expression_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_expression_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_expression_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_expression_not} proto_gc_expression_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_expression_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_expression_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.expressionType = reader.int32();
                break;
            case 2:
                message.expressionNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("expressionType"))
            throw $util.ProtocolError("missing required 'expressionType'", { instance: message });
        if (!message.hasOwnProperty("expressionNum"))
            throw $util.ProtocolError("missing required 'expressionNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_expression_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_expression_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_expression_not} proto_gc_expression_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_expression_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_expression_not message.
     * @function verify
     * @memberof proto_gc_expression_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_expression_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.expressionType))
            return "expressionType: integer expected";
        if (!$util.isInteger(message.expressionNum))
            return "expressionNum: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_expression_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_expression_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_expression_not} proto_gc_expression_not
     */
    proto_gc_expression_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_expression_not)
            return object;
        var message = new $root.proto_gc_expression_not();
        if (object.expressionType != null)
            message.expressionType = object.expressionType | 0;
        if (object.expressionNum != null)
            message.expressionNum = object.expressionNum | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_expression_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_expression_not
     * @static
     * @param {proto_gc_expression_not} message proto_gc_expression_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_expression_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.expressionType = 0;
            object.expressionNum = 0;
        }
        if (message.expressionType != null && message.hasOwnProperty("expressionType"))
            object.expressionType = message.expressionType;
        if (message.expressionNum != null && message.hasOwnProperty("expressionNum"))
            object.expressionNum = message.expressionNum;
        return object;
    };

    /**
     * Converts this proto_gc_expression_not to JSON.
     * @function toJSON
     * @memberof proto_gc_expression_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_expression_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_expression_not;
})();

$root.proto_gc_use_card_recode_noti = (function() {

    /**
     * Properties of a proto_gc_use_card_recode_noti.
     * @exports Iproto_gc_use_card_recode_noti
     * @interface Iproto_gc_use_card_recode_noti
     * @property {number} cChairID proto_gc_use_card_recode_noti cChairID
     * @property {number} cReconnection proto_gc_use_card_recode_noti cReconnection
     */

    /**
     * Constructs a new proto_gc_use_card_recode_noti.
     * @exports proto_gc_use_card_recode_noti
     * @classdesc Represents a proto_gc_use_card_recode_noti.
     * @implements Iproto_gc_use_card_recode_noti
     * @constructor
     * @param {Iproto_gc_use_card_recode_noti=} [properties] Properties to set
     */
    function proto_gc_use_card_recode_noti(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_use_card_recode_noti cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_use_card_recode_noti
     * @instance
     */
    proto_gc_use_card_recode_noti.prototype.cChairID = 0;

    /**
     * proto_gc_use_card_recode_noti cReconnection.
     * @member {number} cReconnection
     * @memberof proto_gc_use_card_recode_noti
     * @instance
     */
    proto_gc_use_card_recode_noti.prototype.cReconnection = 0;

    /**
     * Creates a new proto_gc_use_card_recode_noti instance using the specified properties.
     * @function create
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {Iproto_gc_use_card_recode_noti=} [properties] Properties to set
     * @returns {proto_gc_use_card_recode_noti} proto_gc_use_card_recode_noti instance
     */
    proto_gc_use_card_recode_noti.create = function create(properties) {
        return new proto_gc_use_card_recode_noti(properties);
    };

    /**
     * Encodes the specified proto_gc_use_card_recode_noti message. Does not implicitly {@link proto_gc_use_card_recode_noti.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {Iproto_gc_use_card_recode_noti} message proto_gc_use_card_recode_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_use_card_recode_noti.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cReconnection);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_use_card_recode_noti message, length delimited. Does not implicitly {@link proto_gc_use_card_recode_noti.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {Iproto_gc_use_card_recode_noti} message proto_gc_use_card_recode_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_use_card_recode_noti.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_use_card_recode_noti message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_use_card_recode_noti} proto_gc_use_card_recode_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_use_card_recode_noti.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_use_card_recode_noti();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                message.cReconnection = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        if (!message.hasOwnProperty("cReconnection"))
            throw $util.ProtocolError("missing required 'cReconnection'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_use_card_recode_noti message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_use_card_recode_noti} proto_gc_use_card_recode_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_use_card_recode_noti.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_use_card_recode_noti message.
     * @function verify
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_use_card_recode_noti.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (!$util.isInteger(message.cReconnection))
            return "cReconnection: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_use_card_recode_noti message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_use_card_recode_noti} proto_gc_use_card_recode_noti
     */
    proto_gc_use_card_recode_noti.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_use_card_recode_noti)
            return object;
        var message = new $root.proto_gc_use_card_recode_noti();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.cReconnection != null)
            message.cReconnection = object.cReconnection | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_use_card_recode_noti message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_use_card_recode_noti
     * @static
     * @param {proto_gc_use_card_recode_noti} message proto_gc_use_card_recode_noti
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_use_card_recode_noti.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cChairID = 0;
            object.cReconnection = 0;
        }
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.cReconnection != null && message.hasOwnProperty("cReconnection"))
            object.cReconnection = message.cReconnection;
        return object;
    };

    /**
     * Converts this proto_gc_use_card_recode_noti to JSON.
     * @function toJSON
     * @memberof proto_gc_use_card_recode_noti
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_use_card_recode_noti.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_use_card_recode_noti;
})();

$root.proto_gc_card_recode_req = (function() {

    /**
     * Properties of a proto_gc_card_recode_req.
     * @exports Iproto_gc_card_recode_req
     * @interface Iproto_gc_card_recode_req
     */

    /**
     * Constructs a new proto_gc_card_recode_req.
     * @exports proto_gc_card_recode_req
     * @classdesc Represents a proto_gc_card_recode_req.
     * @implements Iproto_gc_card_recode_req
     * @constructor
     * @param {Iproto_gc_card_recode_req=} [properties] Properties to set
     */
    function proto_gc_card_recode_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_gc_card_recode_req instance using the specified properties.
     * @function create
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {Iproto_gc_card_recode_req=} [properties] Properties to set
     * @returns {proto_gc_card_recode_req} proto_gc_card_recode_req instance
     */
    proto_gc_card_recode_req.create = function create(properties) {
        return new proto_gc_card_recode_req(properties);
    };

    /**
     * Encodes the specified proto_gc_card_recode_req message. Does not implicitly {@link proto_gc_card_recode_req.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {Iproto_gc_card_recode_req} message proto_gc_card_recode_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_card_recode_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_card_recode_req message, length delimited. Does not implicitly {@link proto_gc_card_recode_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {Iproto_gc_card_recode_req} message proto_gc_card_recode_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_card_recode_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_card_recode_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_card_recode_req} proto_gc_card_recode_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_card_recode_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_card_recode_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_card_recode_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_card_recode_req} proto_gc_card_recode_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_card_recode_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_card_recode_req message.
     * @function verify
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_card_recode_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_gc_card_recode_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_card_recode_req} proto_gc_card_recode_req
     */
    proto_gc_card_recode_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_card_recode_req)
            return object;
        return new $root.proto_gc_card_recode_req();
    };

    /**
     * Creates a plain object from a proto_gc_card_recode_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_card_recode_req
     * @static
     * @param {proto_gc_card_recode_req} message proto_gc_card_recode_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_card_recode_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_gc_card_recode_req to JSON.
     * @function toJSON
     * @memberof proto_gc_card_recode_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_card_recode_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_card_recode_req;
})();

$root.proto_gc_bomb_not = (function() {

    /**
     * Properties of a proto_gc_bomb_not.
     * @exports Iproto_gc_bomb_not
     * @interface Iproto_gc_bomb_not
     * @property {number} nDouble proto_gc_bomb_not nDouble
     */

    /**
     * Constructs a new proto_gc_bomb_not.
     * @exports proto_gc_bomb_not
     * @classdesc Represents a proto_gc_bomb_not.
     * @implements Iproto_gc_bomb_not
     * @constructor
     * @param {Iproto_gc_bomb_not=} [properties] Properties to set
     */
    function proto_gc_bomb_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_bomb_not nDouble.
     * @member {number} nDouble
     * @memberof proto_gc_bomb_not
     * @instance
     */
    proto_gc_bomb_not.prototype.nDouble = 0;

    /**
     * Creates a new proto_gc_bomb_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_bomb_not
     * @static
     * @param {Iproto_gc_bomb_not=} [properties] Properties to set
     * @returns {proto_gc_bomb_not} proto_gc_bomb_not instance
     */
    proto_gc_bomb_not.create = function create(properties) {
        return new proto_gc_bomb_not(properties);
    };

    /**
     * Encodes the specified proto_gc_bomb_not message. Does not implicitly {@link proto_gc_bomb_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_bomb_not
     * @static
     * @param {Iproto_gc_bomb_not} message proto_gc_bomb_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_bomb_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nDouble);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_bomb_not message, length delimited. Does not implicitly {@link proto_gc_bomb_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_bomb_not
     * @static
     * @param {Iproto_gc_bomb_not} message proto_gc_bomb_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_bomb_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_bomb_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_bomb_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_bomb_not} proto_gc_bomb_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_bomb_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_bomb_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nDouble = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nDouble"))
            throw $util.ProtocolError("missing required 'nDouble'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_bomb_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_bomb_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_bomb_not} proto_gc_bomb_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_bomb_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_bomb_not message.
     * @function verify
     * @memberof proto_gc_bomb_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_bomb_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nDouble))
            return "nDouble: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_bomb_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_bomb_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_bomb_not} proto_gc_bomb_not
     */
    proto_gc_bomb_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_bomb_not)
            return object;
        var message = new $root.proto_gc_bomb_not();
        if (object.nDouble != null)
            message.nDouble = object.nDouble | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_bomb_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_bomb_not
     * @static
     * @param {proto_gc_bomb_not} message proto_gc_bomb_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_bomb_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nDouble = 0;
        if (message.nDouble != null && message.hasOwnProperty("nDouble"))
            object.nDouble = message.nDouble;
        return object;
    };

    /**
     * Converts this proto_gc_bomb_not to JSON.
     * @function toJSON
     * @memberof proto_gc_bomb_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_bomb_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_bomb_not;
})();

$root.proto_gc_private_room_result_ack = (function() {

    /**
     * Properties of a proto_gc_private_room_result_ack.
     * @exports Iproto_gc_private_room_result_ack
     * @interface Iproto_gc_private_room_result_ack
     * @property {Array.<Iproto_GameStatisc>|null} [vecGameStatiscs] proto_gc_private_room_result_ack vecGameStatiscs
     */

    /**
     * Constructs a new proto_gc_private_room_result_ack.
     * @exports proto_gc_private_room_result_ack
     * @classdesc Represents a proto_gc_private_room_result_ack.
     * @implements Iproto_gc_private_room_result_ack
     * @constructor
     * @param {Iproto_gc_private_room_result_ack=} [properties] Properties to set
     */
    function proto_gc_private_room_result_ack(properties) {
        this.vecGameStatiscs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_private_room_result_ack vecGameStatiscs.
     * @member {Array.<Iproto_GameStatisc>} vecGameStatiscs
     * @memberof proto_gc_private_room_result_ack
     * @instance
     */
    proto_gc_private_room_result_ack.prototype.vecGameStatiscs = $util.emptyArray;

    /**
     * Creates a new proto_gc_private_room_result_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {Iproto_gc_private_room_result_ack=} [properties] Properties to set
     * @returns {proto_gc_private_room_result_ack} proto_gc_private_room_result_ack instance
     */
    proto_gc_private_room_result_ack.create = function create(properties) {
        return new proto_gc_private_room_result_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_private_room_result_ack message. Does not implicitly {@link proto_gc_private_room_result_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {Iproto_gc_private_room_result_ack} message proto_gc_private_room_result_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_private_room_result_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.vecGameStatiscs != null && message.vecGameStatiscs.length)
            for (var i = 0; i < message.vecGameStatiscs.length; ++i)
                $root.proto_GameStatisc.encode(message.vecGameStatiscs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_private_room_result_ack message, length delimited. Does not implicitly {@link proto_gc_private_room_result_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {Iproto_gc_private_room_result_ack} message proto_gc_private_room_result_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_private_room_result_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_private_room_result_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_private_room_result_ack} proto_gc_private_room_result_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_private_room_result_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_private_room_result_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.vecGameStatiscs && message.vecGameStatiscs.length))
                    message.vecGameStatiscs = [];
                message.vecGameStatiscs.push($root.proto_GameStatisc.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_private_room_result_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_private_room_result_ack} proto_gc_private_room_result_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_private_room_result_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_private_room_result_ack message.
     * @function verify
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_private_room_result_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.vecGameStatiscs != null && message.hasOwnProperty("vecGameStatiscs")) {
            if (!Array.isArray(message.vecGameStatiscs))
                return "vecGameStatiscs: array expected";
            for (var i = 0; i < message.vecGameStatiscs.length; ++i) {
                var error = $root.proto_GameStatisc.verify(message.vecGameStatiscs[i]);
                if (error)
                    return "vecGameStatiscs." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_private_room_result_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_private_room_result_ack} proto_gc_private_room_result_ack
     */
    proto_gc_private_room_result_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_private_room_result_ack)
            return object;
        var message = new $root.proto_gc_private_room_result_ack();
        if (object.vecGameStatiscs) {
            if (!Array.isArray(object.vecGameStatiscs))
                throw TypeError(".proto_gc_private_room_result_ack.vecGameStatiscs: array expected");
            message.vecGameStatiscs = [];
            for (var i = 0; i < object.vecGameStatiscs.length; ++i) {
                if (typeof object.vecGameStatiscs[i] !== "object")
                    throw TypeError(".proto_gc_private_room_result_ack.vecGameStatiscs: object expected");
                message.vecGameStatiscs[i] = $root.proto_GameStatisc.fromObject(object.vecGameStatiscs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_private_room_result_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_private_room_result_ack
     * @static
     * @param {proto_gc_private_room_result_ack} message proto_gc_private_room_result_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_private_room_result_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecGameStatiscs = [];
        if (message.vecGameStatiscs && message.vecGameStatiscs.length) {
            object.vecGameStatiscs = [];
            for (var j = 0; j < message.vecGameStatiscs.length; ++j)
                object.vecGameStatiscs[j] = $root.proto_GameStatisc.toObject(message.vecGameStatiscs[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_private_room_result_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_private_room_result_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_private_room_result_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_private_room_result_ack;
})();

$root.proto_gc_replay_data_not = (function() {

    /**
     * Properties of a proto_gc_replay_data_not.
     * @exports Iproto_gc_replay_data_not
     * @interface Iproto_gc_replay_data_not
     * @property {Array.<Iproto_gc_refresh_card_not>|null} [vecChangeCards] proto_gc_replay_data_not vecChangeCards
     */

    /**
     * Constructs a new proto_gc_replay_data_not.
     * @exports proto_gc_replay_data_not
     * @classdesc Represents a proto_gc_replay_data_not.
     * @implements Iproto_gc_replay_data_not
     * @constructor
     * @param {Iproto_gc_replay_data_not=} [properties] Properties to set
     */
    function proto_gc_replay_data_not(properties) {
        this.vecChangeCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_replay_data_not vecChangeCards.
     * @member {Array.<Iproto_gc_refresh_card_not>} vecChangeCards
     * @memberof proto_gc_replay_data_not
     * @instance
     */
    proto_gc_replay_data_not.prototype.vecChangeCards = $util.emptyArray;

    /**
     * Creates a new proto_gc_replay_data_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {Iproto_gc_replay_data_not=} [properties] Properties to set
     * @returns {proto_gc_replay_data_not} proto_gc_replay_data_not instance
     */
    proto_gc_replay_data_not.create = function create(properties) {
        return new proto_gc_replay_data_not(properties);
    };

    /**
     * Encodes the specified proto_gc_replay_data_not message. Does not implicitly {@link proto_gc_replay_data_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {Iproto_gc_replay_data_not} message proto_gc_replay_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_replay_data_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.vecChangeCards != null && message.vecChangeCards.length)
            for (var i = 0; i < message.vecChangeCards.length; ++i)
                $root.proto_gc_refresh_card_not.encode(message.vecChangeCards[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_replay_data_not message, length delimited. Does not implicitly {@link proto_gc_replay_data_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {Iproto_gc_replay_data_not} message proto_gc_replay_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_replay_data_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_replay_data_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_replay_data_not} proto_gc_replay_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_replay_data_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_replay_data_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.vecChangeCards && message.vecChangeCards.length))
                    message.vecChangeCards = [];
                message.vecChangeCards.push($root.proto_gc_refresh_card_not.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_replay_data_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_replay_data_not} proto_gc_replay_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_replay_data_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_replay_data_not message.
     * @function verify
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_replay_data_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.vecChangeCards != null && message.hasOwnProperty("vecChangeCards")) {
            if (!Array.isArray(message.vecChangeCards))
                return "vecChangeCards: array expected";
            for (var i = 0; i < message.vecChangeCards.length; ++i) {
                var error = $root.proto_gc_refresh_card_not.verify(message.vecChangeCards[i]);
                if (error)
                    return "vecChangeCards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_replay_data_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_replay_data_not} proto_gc_replay_data_not
     */
    proto_gc_replay_data_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_replay_data_not)
            return object;
        var message = new $root.proto_gc_replay_data_not();
        if (object.vecChangeCards) {
            if (!Array.isArray(object.vecChangeCards))
                throw TypeError(".proto_gc_replay_data_not.vecChangeCards: array expected");
            message.vecChangeCards = [];
            for (var i = 0; i < object.vecChangeCards.length; ++i) {
                if (typeof object.vecChangeCards[i] !== "object")
                    throw TypeError(".proto_gc_replay_data_not.vecChangeCards: object expected");
                message.vecChangeCards[i] = $root.proto_gc_refresh_card_not.fromObject(object.vecChangeCards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_replay_data_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_replay_data_not
     * @static
     * @param {proto_gc_replay_data_not} message proto_gc_replay_data_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_replay_data_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecChangeCards = [];
        if (message.vecChangeCards && message.vecChangeCards.length) {
            object.vecChangeCards = [];
            for (var j = 0; j < message.vecChangeCards.length; ++j)
                object.vecChangeCards[j] = $root.proto_gc_refresh_card_not.toObject(message.vecChangeCards[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_replay_data_not to JSON.
     * @function toJSON
     * @memberof proto_gc_replay_data_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_replay_data_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_replay_data_not;
})();

$root.proto_cg_bet_lord_card_req = (function() {

    /**
     * Properties of a proto_cg_bet_lord_card_req.
     * @exports Iproto_cg_bet_lord_card_req
     * @interface Iproto_cg_bet_lord_card_req
     * @property {number} index proto_cg_bet_lord_card_req index
     */

    /**
     * Constructs a new proto_cg_bet_lord_card_req.
     * @exports proto_cg_bet_lord_card_req
     * @classdesc Represents a proto_cg_bet_lord_card_req.
     * @implements Iproto_cg_bet_lord_card_req
     * @constructor
     * @param {Iproto_cg_bet_lord_card_req=} [properties] Properties to set
     */
    function proto_cg_bet_lord_card_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_bet_lord_card_req index.
     * @member {number} index
     * @memberof proto_cg_bet_lord_card_req
     * @instance
     */
    proto_cg_bet_lord_card_req.prototype.index = 0;

    /**
     * Creates a new proto_cg_bet_lord_card_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {Iproto_cg_bet_lord_card_req=} [properties] Properties to set
     * @returns {proto_cg_bet_lord_card_req} proto_cg_bet_lord_card_req instance
     */
    proto_cg_bet_lord_card_req.create = function create(properties) {
        return new proto_cg_bet_lord_card_req(properties);
    };

    /**
     * Encodes the specified proto_cg_bet_lord_card_req message. Does not implicitly {@link proto_cg_bet_lord_card_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {Iproto_cg_bet_lord_card_req} message proto_cg_bet_lord_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_bet_lord_card_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_bet_lord_card_req message, length delimited. Does not implicitly {@link proto_cg_bet_lord_card_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {Iproto_cg_bet_lord_card_req} message proto_cg_bet_lord_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_bet_lord_card_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_bet_lord_card_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_bet_lord_card_req} proto_cg_bet_lord_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_bet_lord_card_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_bet_lord_card_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("index"))
            throw $util.ProtocolError("missing required 'index'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_bet_lord_card_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_bet_lord_card_req} proto_cg_bet_lord_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_bet_lord_card_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_bet_lord_card_req message.
     * @function verify
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_bet_lord_card_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.index))
            return "index: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_bet_lord_card_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_bet_lord_card_req} proto_cg_bet_lord_card_req
     */
    proto_cg_bet_lord_card_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_bet_lord_card_req)
            return object;
        var message = new $root.proto_cg_bet_lord_card_req();
        if (object.index != null)
            message.index = object.index | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_bet_lord_card_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_bet_lord_card_req
     * @static
     * @param {proto_cg_bet_lord_card_req} message proto_cg_bet_lord_card_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_bet_lord_card_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.index = 0;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this proto_cg_bet_lord_card_req to JSON.
     * @function toJSON
     * @memberof proto_cg_bet_lord_card_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_bet_lord_card_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_bet_lord_card_req;
})();

$root.proto_stUserData = (function() {

    /**
     * Properties of a proto_stUserData.
     * @exports Iproto_stUserData
     * @interface Iproto_stUserData
     * @property {number} cChairID proto_stUserData cChairID
     * @property {Array.<Iproto_CCard>|null} [vecHandCards] proto_stUserData vecHandCards
     * @property {Array.<Iproto_CCard>|null} [vecPutCards] proto_stUserData vecPutCards
     */

    /**
     * Constructs a new proto_stUserData.
     * @exports proto_stUserData
     * @classdesc Represents a proto_stUserData.
     * @implements Iproto_stUserData
     * @constructor
     * @param {Iproto_stUserData=} [properties] Properties to set
     */
    function proto_stUserData(properties) {
        this.vecHandCards = [];
        this.vecPutCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_stUserData cChairID.
     * @member {number} cChairID
     * @memberof proto_stUserData
     * @instance
     */
    proto_stUserData.prototype.cChairID = 0;

    /**
     * proto_stUserData vecHandCards.
     * @member {Array.<Iproto_CCard>} vecHandCards
     * @memberof proto_stUserData
     * @instance
     */
    proto_stUserData.prototype.vecHandCards = $util.emptyArray;

    /**
     * proto_stUserData vecPutCards.
     * @member {Array.<Iproto_CCard>} vecPutCards
     * @memberof proto_stUserData
     * @instance
     */
    proto_stUserData.prototype.vecPutCards = $util.emptyArray;

    /**
     * Creates a new proto_stUserData instance using the specified properties.
     * @function create
     * @memberof proto_stUserData
     * @static
     * @param {Iproto_stUserData=} [properties] Properties to set
     * @returns {proto_stUserData} proto_stUserData instance
     */
    proto_stUserData.create = function create(properties) {
        return new proto_stUserData(properties);
    };

    /**
     * Encodes the specified proto_stUserData message. Does not implicitly {@link proto_stUserData.verify|verify} messages.
     * @function encode
     * @memberof proto_stUserData
     * @static
     * @param {Iproto_stUserData} message proto_stUserData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_stUserData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        if (message.vecHandCards != null && message.vecHandCards.length)
            for (var i = 0; i < message.vecHandCards.length; ++i)
                $root.proto_CCard.encode(message.vecHandCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.vecPutCards != null && message.vecPutCards.length)
            for (var i = 0; i < message.vecPutCards.length; ++i)
                $root.proto_CCard.encode(message.vecPutCards[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_stUserData message, length delimited. Does not implicitly {@link proto_stUserData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_stUserData
     * @static
     * @param {Iproto_stUserData} message proto_stUserData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_stUserData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_stUserData message from the specified reader or buffer.
     * @function decode
     * @memberof proto_stUserData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_stUserData} proto_stUserData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_stUserData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_stUserData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                if (!(message.vecHandCards && message.vecHandCards.length))
                    message.vecHandCards = [];
                message.vecHandCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.vecPutCards && message.vecPutCards.length))
                    message.vecPutCards = [];
                message.vecPutCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_stUserData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_stUserData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_stUserData} proto_stUserData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_stUserData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_stUserData message.
     * @function verify
     * @memberof proto_stUserData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_stUserData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (message.vecHandCards != null && message.hasOwnProperty("vecHandCards")) {
            if (!Array.isArray(message.vecHandCards))
                return "vecHandCards: array expected";
            for (var i = 0; i < message.vecHandCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecHandCards[i]);
                if (error)
                    return "vecHandCards." + error;
            }
        }
        if (message.vecPutCards != null && message.hasOwnProperty("vecPutCards")) {
            if (!Array.isArray(message.vecPutCards))
                return "vecPutCards: array expected";
            for (var i = 0; i < message.vecPutCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecPutCards[i]);
                if (error)
                    return "vecPutCards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_stUserData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_stUserData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_stUserData} proto_stUserData
     */
    proto_stUserData.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_stUserData)
            return object;
        var message = new $root.proto_stUserData();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.vecHandCards) {
            if (!Array.isArray(object.vecHandCards))
                throw TypeError(".proto_stUserData.vecHandCards: array expected");
            message.vecHandCards = [];
            for (var i = 0; i < object.vecHandCards.length; ++i) {
                if (typeof object.vecHandCards[i] !== "object")
                    throw TypeError(".proto_stUserData.vecHandCards: object expected");
                message.vecHandCards[i] = $root.proto_CCard.fromObject(object.vecHandCards[i]);
            }
        }
        if (object.vecPutCards) {
            if (!Array.isArray(object.vecPutCards))
                throw TypeError(".proto_stUserData.vecPutCards: array expected");
            message.vecPutCards = [];
            for (var i = 0; i < object.vecPutCards.length; ++i) {
                if (typeof object.vecPutCards[i] !== "object")
                    throw TypeError(".proto_stUserData.vecPutCards: object expected");
                message.vecPutCards[i] = $root.proto_CCard.fromObject(object.vecPutCards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_stUserData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_stUserData
     * @static
     * @param {proto_stUserData} message proto_stUserData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_stUserData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecHandCards = [];
            object.vecPutCards = [];
        }
        if (options.defaults)
            object.cChairID = 0;
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.vecHandCards && message.vecHandCards.length) {
            object.vecHandCards = [];
            for (var j = 0; j < message.vecHandCards.length; ++j)
                object.vecHandCards[j] = $root.proto_CCard.toObject(message.vecHandCards[j], options);
        }
        if (message.vecPutCards && message.vecPutCards.length) {
            object.vecPutCards = [];
            for (var j = 0; j < message.vecPutCards.length; ++j)
                object.vecPutCards[j] = $root.proto_CCard.toObject(message.vecPutCards[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_stUserData to JSON.
     * @function toJSON
     * @memberof proto_stUserData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_stUserData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_stUserData;
})();

$root.proto_gc_double_score_req = (function() {

    /**
     * Properties of a proto_gc_double_score_req.
     * @exports Iproto_gc_double_score_req
     * @interface Iproto_gc_double_score_req
     * @property {number} nSerialID proto_gc_double_score_req nSerialID
     */

    /**
     * Constructs a new proto_gc_double_score_req.
     * @exports proto_gc_double_score_req
     * @classdesc Represents a proto_gc_double_score_req.
     * @implements Iproto_gc_double_score_req
     * @constructor
     * @param {Iproto_gc_double_score_req=} [properties] Properties to set
     */
    function proto_gc_double_score_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_double_score_req nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_double_score_req
     * @instance
     */
    proto_gc_double_score_req.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_double_score_req instance using the specified properties.
     * @function create
     * @memberof proto_gc_double_score_req
     * @static
     * @param {Iproto_gc_double_score_req=} [properties] Properties to set
     * @returns {proto_gc_double_score_req} proto_gc_double_score_req instance
     */
    proto_gc_double_score_req.create = function create(properties) {
        return new proto_gc_double_score_req(properties);
    };

    /**
     * Encodes the specified proto_gc_double_score_req message. Does not implicitly {@link proto_gc_double_score_req.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_double_score_req
     * @static
     * @param {Iproto_gc_double_score_req} message proto_gc_double_score_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_double_score_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_double_score_req message, length delimited. Does not implicitly {@link proto_gc_double_score_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_double_score_req
     * @static
     * @param {Iproto_gc_double_score_req} message proto_gc_double_score_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_double_score_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_double_score_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_double_score_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_double_score_req} proto_gc_double_score_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_double_score_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_double_score_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_double_score_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_double_score_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_double_score_req} proto_gc_double_score_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_double_score_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_double_score_req message.
     * @function verify
     * @memberof proto_gc_double_score_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_double_score_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_double_score_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_double_score_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_double_score_req} proto_gc_double_score_req
     */
    proto_gc_double_score_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_double_score_req)
            return object;
        var message = new $root.proto_gc_double_score_req();
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_double_score_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_double_score_req
     * @static
     * @param {proto_gc_double_score_req} message proto_gc_double_score_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_double_score_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nSerialID = 0;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_double_score_req to JSON.
     * @function toJSON
     * @memberof proto_gc_double_score_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_double_score_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_double_score_req;
})();

$root.proto_gc_game_result_not = (function() {

    /**
     * Properties of a proto_gc_game_result_not.
     * @exports Iproto_gc_game_result_not
     * @interface Iproto_gc_game_result_not
     * @property {number} bType proto_gc_game_result_not bType
     * @property {number} cDouble proto_gc_game_result_not cDouble
     * @property {number} cCallScore proto_gc_game_result_not cCallScore
     * @property {number} bShowCard proto_gc_game_result_not bShowCard
     * @property {number} nBombCount proto_gc_game_result_not nBombCount
     * @property {number} bSpring proto_gc_game_result_not bSpring
     * @property {number} bReverseSpring proto_gc_game_result_not bReverseSpring
     * @property {number} bRobLord proto_gc_game_result_not bRobLord
     * @property {Array.<Iproto_stUserResult>|null} [vecUserResult] proto_gc_game_result_not vecUserResult
     */

    /**
     * Constructs a new proto_gc_game_result_not.
     * @exports proto_gc_game_result_not
     * @classdesc Represents a proto_gc_game_result_not.
     * @implements Iproto_gc_game_result_not
     * @constructor
     * @param {Iproto_gc_game_result_not=} [properties] Properties to set
     */
    function proto_gc_game_result_not(properties) {
        this.vecUserResult = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_game_result_not bType.
     * @member {number} bType
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.bType = 0;

    /**
     * proto_gc_game_result_not cDouble.
     * @member {number} cDouble
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.cDouble = 0;

    /**
     * proto_gc_game_result_not cCallScore.
     * @member {number} cCallScore
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.cCallScore = 0;

    /**
     * proto_gc_game_result_not bShowCard.
     * @member {number} bShowCard
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.bShowCard = 0;

    /**
     * proto_gc_game_result_not nBombCount.
     * @member {number} nBombCount
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.nBombCount = 0;

    /**
     * proto_gc_game_result_not bSpring.
     * @member {number} bSpring
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.bSpring = 0;

    /**
     * proto_gc_game_result_not bReverseSpring.
     * @member {number} bReverseSpring
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.bReverseSpring = 0;

    /**
     * proto_gc_game_result_not bRobLord.
     * @member {number} bRobLord
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.bRobLord = 0;

    /**
     * proto_gc_game_result_not vecUserResult.
     * @member {Array.<Iproto_stUserResult>} vecUserResult
     * @memberof proto_gc_game_result_not
     * @instance
     */
    proto_gc_game_result_not.prototype.vecUserResult = $util.emptyArray;

    /**
     * Creates a new proto_gc_game_result_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_game_result_not
     * @static
     * @param {Iproto_gc_game_result_not=} [properties] Properties to set
     * @returns {proto_gc_game_result_not} proto_gc_game_result_not instance
     */
    proto_gc_game_result_not.create = function create(properties) {
        return new proto_gc_game_result_not(properties);
    };

    /**
     * Encodes the specified proto_gc_game_result_not message. Does not implicitly {@link proto_gc_game_result_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_game_result_not
     * @static
     * @param {Iproto_gc_game_result_not} message proto_gc_game_result_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_result_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.bType);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cDouble);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cCallScore);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bShowCard);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.nBombCount);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.bSpring);
        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.bReverseSpring);
        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.bRobLord);
        if (message.vecUserResult != null && message.vecUserResult.length)
            for (var i = 0; i < message.vecUserResult.length; ++i)
                $root.proto_stUserResult.encode(message.vecUserResult[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_game_result_not message, length delimited. Does not implicitly {@link proto_gc_game_result_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_game_result_not
     * @static
     * @param {Iproto_gc_game_result_not} message proto_gc_game_result_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_result_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_game_result_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_game_result_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_game_result_not} proto_gc_game_result_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_result_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_game_result_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.bType = reader.int32();
                break;
            case 2:
                message.cDouble = reader.int32();
                break;
            case 3:
                message.cCallScore = reader.int32();
                break;
            case 4:
                message.bShowCard = reader.int32();
                break;
            case 5:
                message.nBombCount = reader.int32();
                break;
            case 6:
                message.bSpring = reader.int32();
                break;
            case 7:
                message.bReverseSpring = reader.int32();
                break;
            case 8:
                message.bRobLord = reader.int32();
                break;
            case 9:
                if (!(message.vecUserResult && message.vecUserResult.length))
                    message.vecUserResult = [];
                message.vecUserResult.push($root.proto_stUserResult.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("bType"))
            throw $util.ProtocolError("missing required 'bType'", { instance: message });
        if (!message.hasOwnProperty("cDouble"))
            throw $util.ProtocolError("missing required 'cDouble'", { instance: message });
        if (!message.hasOwnProperty("cCallScore"))
            throw $util.ProtocolError("missing required 'cCallScore'", { instance: message });
        if (!message.hasOwnProperty("bShowCard"))
            throw $util.ProtocolError("missing required 'bShowCard'", { instance: message });
        if (!message.hasOwnProperty("nBombCount"))
            throw $util.ProtocolError("missing required 'nBombCount'", { instance: message });
        if (!message.hasOwnProperty("bSpring"))
            throw $util.ProtocolError("missing required 'bSpring'", { instance: message });
        if (!message.hasOwnProperty("bReverseSpring"))
            throw $util.ProtocolError("missing required 'bReverseSpring'", { instance: message });
        if (!message.hasOwnProperty("bRobLord"))
            throw $util.ProtocolError("missing required 'bRobLord'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_game_result_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_game_result_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_game_result_not} proto_gc_game_result_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_result_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_game_result_not message.
     * @function verify
     * @memberof proto_gc_game_result_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_game_result_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.bType))
            return "bType: integer expected";
        if (!$util.isInteger(message.cDouble))
            return "cDouble: integer expected";
        if (!$util.isInteger(message.cCallScore))
            return "cCallScore: integer expected";
        if (!$util.isInteger(message.bShowCard))
            return "bShowCard: integer expected";
        if (!$util.isInteger(message.nBombCount))
            return "nBombCount: integer expected";
        if (!$util.isInteger(message.bSpring))
            return "bSpring: integer expected";
        if (!$util.isInteger(message.bReverseSpring))
            return "bReverseSpring: integer expected";
        if (!$util.isInteger(message.bRobLord))
            return "bRobLord: integer expected";
        if (message.vecUserResult != null && message.hasOwnProperty("vecUserResult")) {
            if (!Array.isArray(message.vecUserResult))
                return "vecUserResult: array expected";
            for (var i = 0; i < message.vecUserResult.length; ++i) {
                var error = $root.proto_stUserResult.verify(message.vecUserResult[i]);
                if (error)
                    return "vecUserResult." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_game_result_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_game_result_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_game_result_not} proto_gc_game_result_not
     */
    proto_gc_game_result_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_game_result_not)
            return object;
        var message = new $root.proto_gc_game_result_not();
        if (object.bType != null)
            message.bType = object.bType | 0;
        if (object.cDouble != null)
            message.cDouble = object.cDouble | 0;
        if (object.cCallScore != null)
            message.cCallScore = object.cCallScore | 0;
        if (object.bShowCard != null)
            message.bShowCard = object.bShowCard | 0;
        if (object.nBombCount != null)
            message.nBombCount = object.nBombCount | 0;
        if (object.bSpring != null)
            message.bSpring = object.bSpring | 0;
        if (object.bReverseSpring != null)
            message.bReverseSpring = object.bReverseSpring | 0;
        if (object.bRobLord != null)
            message.bRobLord = object.bRobLord | 0;
        if (object.vecUserResult) {
            if (!Array.isArray(object.vecUserResult))
                throw TypeError(".proto_gc_game_result_not.vecUserResult: array expected");
            message.vecUserResult = [];
            for (var i = 0; i < object.vecUserResult.length; ++i) {
                if (typeof object.vecUserResult[i] !== "object")
                    throw TypeError(".proto_gc_game_result_not.vecUserResult: object expected");
                message.vecUserResult[i] = $root.proto_stUserResult.fromObject(object.vecUserResult[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_game_result_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_game_result_not
     * @static
     * @param {proto_gc_game_result_not} message proto_gc_game_result_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_game_result_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecUserResult = [];
        if (options.defaults) {
            object.bType = 0;
            object.cDouble = 0;
            object.cCallScore = 0;
            object.bShowCard = 0;
            object.nBombCount = 0;
            object.bSpring = 0;
            object.bReverseSpring = 0;
            object.bRobLord = 0;
        }
        if (message.bType != null && message.hasOwnProperty("bType"))
            object.bType = message.bType;
        if (message.cDouble != null && message.hasOwnProperty("cDouble"))
            object.cDouble = message.cDouble;
        if (message.cCallScore != null && message.hasOwnProperty("cCallScore"))
            object.cCallScore = message.cCallScore;
        if (message.bShowCard != null && message.hasOwnProperty("bShowCard"))
            object.bShowCard = message.bShowCard;
        if (message.nBombCount != null && message.hasOwnProperty("nBombCount"))
            object.nBombCount = message.nBombCount;
        if (message.bSpring != null && message.hasOwnProperty("bSpring"))
            object.bSpring = message.bSpring;
        if (message.bReverseSpring != null && message.hasOwnProperty("bReverseSpring"))
            object.bReverseSpring = message.bReverseSpring;
        if (message.bRobLord != null && message.hasOwnProperty("bRobLord"))
            object.bRobLord = message.bRobLord;
        if (message.vecUserResult && message.vecUserResult.length) {
            object.vecUserResult = [];
            for (var j = 0; j < message.vecUserResult.length; ++j)
                object.vecUserResult[j] = $root.proto_stUserResult.toObject(message.vecUserResult[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_game_result_not to JSON.
     * @function toJSON
     * @memberof proto_gc_game_result_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_game_result_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_game_result_not;
})();

$root.proto_gc_user_savestar_card_noti = (function() {

    /**
     * Properties of a proto_gc_user_savestar_card_noti.
     * @exports Iproto_gc_user_savestar_card_noti
     * @interface Iproto_gc_user_savestar_card_noti
     */

    /**
     * Constructs a new proto_gc_user_savestar_card_noti.
     * @exports proto_gc_user_savestar_card_noti
     * @classdesc Represents a proto_gc_user_savestar_card_noti.
     * @implements Iproto_gc_user_savestar_card_noti
     * @constructor
     * @param {Iproto_gc_user_savestar_card_noti=} [properties] Properties to set
     */
    function proto_gc_user_savestar_card_noti(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_gc_user_savestar_card_noti instance using the specified properties.
     * @function create
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {Iproto_gc_user_savestar_card_noti=} [properties] Properties to set
     * @returns {proto_gc_user_savestar_card_noti} proto_gc_user_savestar_card_noti instance
     */
    proto_gc_user_savestar_card_noti.create = function create(properties) {
        return new proto_gc_user_savestar_card_noti(properties);
    };

    /**
     * Encodes the specified proto_gc_user_savestar_card_noti message. Does not implicitly {@link proto_gc_user_savestar_card_noti.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {Iproto_gc_user_savestar_card_noti} message proto_gc_user_savestar_card_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_user_savestar_card_noti.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_user_savestar_card_noti message, length delimited. Does not implicitly {@link proto_gc_user_savestar_card_noti.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {Iproto_gc_user_savestar_card_noti} message proto_gc_user_savestar_card_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_user_savestar_card_noti.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_user_savestar_card_noti message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_user_savestar_card_noti} proto_gc_user_savestar_card_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_user_savestar_card_noti.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_user_savestar_card_noti();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_user_savestar_card_noti message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_user_savestar_card_noti} proto_gc_user_savestar_card_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_user_savestar_card_noti.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_user_savestar_card_noti message.
     * @function verify
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_user_savestar_card_noti.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_gc_user_savestar_card_noti message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_user_savestar_card_noti} proto_gc_user_savestar_card_noti
     */
    proto_gc_user_savestar_card_noti.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_user_savestar_card_noti)
            return object;
        return new $root.proto_gc_user_savestar_card_noti();
    };

    /**
     * Creates a plain object from a proto_gc_user_savestar_card_noti message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_user_savestar_card_noti
     * @static
     * @param {proto_gc_user_savestar_card_noti} message proto_gc_user_savestar_card_noti
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_user_savestar_card_noti.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_gc_user_savestar_card_noti to JSON.
     * @function toJSON
     * @memberof proto_gc_user_savestar_card_noti
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_user_savestar_card_noti.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_user_savestar_card_noti;
})();

$root.proto_gc_counts_not = (function() {

    /**
     * Properties of a proto_gc_counts_not.
     * @exports Iproto_gc_counts_not
     * @interface Iproto_gc_counts_not
     * @property {number} countsNum proto_gc_counts_not countsNum
     */

    /**
     * Constructs a new proto_gc_counts_not.
     * @exports proto_gc_counts_not
     * @classdesc Represents a proto_gc_counts_not.
     * @implements Iproto_gc_counts_not
     * @constructor
     * @param {Iproto_gc_counts_not=} [properties] Properties to set
     */
    function proto_gc_counts_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_counts_not countsNum.
     * @member {number} countsNum
     * @memberof proto_gc_counts_not
     * @instance
     */
    proto_gc_counts_not.prototype.countsNum = 0;

    /**
     * Creates a new proto_gc_counts_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_counts_not
     * @static
     * @param {Iproto_gc_counts_not=} [properties] Properties to set
     * @returns {proto_gc_counts_not} proto_gc_counts_not instance
     */
    proto_gc_counts_not.create = function create(properties) {
        return new proto_gc_counts_not(properties);
    };

    /**
     * Encodes the specified proto_gc_counts_not message. Does not implicitly {@link proto_gc_counts_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_counts_not
     * @static
     * @param {Iproto_gc_counts_not} message proto_gc_counts_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_counts_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.countsNum);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_counts_not message, length delimited. Does not implicitly {@link proto_gc_counts_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_counts_not
     * @static
     * @param {Iproto_gc_counts_not} message proto_gc_counts_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_counts_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_counts_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_counts_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_counts_not} proto_gc_counts_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_counts_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_counts_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.countsNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("countsNum"))
            throw $util.ProtocolError("missing required 'countsNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_counts_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_counts_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_counts_not} proto_gc_counts_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_counts_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_counts_not message.
     * @function verify
     * @memberof proto_gc_counts_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_counts_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.countsNum))
            return "countsNum: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_counts_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_counts_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_counts_not} proto_gc_counts_not
     */
    proto_gc_counts_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_counts_not)
            return object;
        var message = new $root.proto_gc_counts_not();
        if (object.countsNum != null)
            message.countsNum = object.countsNum | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_counts_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_counts_not
     * @static
     * @param {proto_gc_counts_not} message proto_gc_counts_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_counts_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.countsNum = 0;
        if (message.countsNum != null && message.hasOwnProperty("countsNum"))
            object.countsNum = message.countsNum;
        return object;
    };

    /**
     * Converts this proto_gc_counts_not to JSON.
     * @function toJSON
     * @memberof proto_gc_counts_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_counts_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_counts_not;
})();

$root.proto_cg_three_draw_req_data = (function() {

    /**
     * Properties of a proto_cg_three_draw_req_data.
     * @exports Iproto_cg_three_draw_req_data
     * @interface Iproto_cg_three_draw_req_data
     */

    /**
     * Constructs a new proto_cg_three_draw_req_data.
     * @exports proto_cg_three_draw_req_data
     * @classdesc Represents a proto_cg_three_draw_req_data.
     * @implements Iproto_cg_three_draw_req_data
     * @constructor
     * @param {Iproto_cg_three_draw_req_data=} [properties] Properties to set
     */
    function proto_cg_three_draw_req_data(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_three_draw_req_data instance using the specified properties.
     * @function create
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {Iproto_cg_three_draw_req_data=} [properties] Properties to set
     * @returns {proto_cg_three_draw_req_data} proto_cg_three_draw_req_data instance
     */
    proto_cg_three_draw_req_data.create = function create(properties) {
        return new proto_cg_three_draw_req_data(properties);
    };

    /**
     * Encodes the specified proto_cg_three_draw_req_data message. Does not implicitly {@link proto_cg_three_draw_req_data.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {Iproto_cg_three_draw_req_data} message proto_cg_three_draw_req_data message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_three_draw_req_data.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_three_draw_req_data message, length delimited. Does not implicitly {@link proto_cg_three_draw_req_data.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {Iproto_cg_three_draw_req_data} message proto_cg_three_draw_req_data message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_three_draw_req_data.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_three_draw_req_data message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_three_draw_req_data} proto_cg_three_draw_req_data
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_three_draw_req_data.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_three_draw_req_data();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_three_draw_req_data message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_three_draw_req_data} proto_cg_three_draw_req_data
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_three_draw_req_data.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_three_draw_req_data message.
     * @function verify
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_three_draw_req_data.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_three_draw_req_data message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_three_draw_req_data} proto_cg_three_draw_req_data
     */
    proto_cg_three_draw_req_data.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_three_draw_req_data)
            return object;
        return new $root.proto_cg_three_draw_req_data();
    };

    /**
     * Creates a plain object from a proto_cg_three_draw_req_data message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_three_draw_req_data
     * @static
     * @param {proto_cg_three_draw_req_data} message proto_cg_three_draw_req_data
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_three_draw_req_data.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_three_draw_req_data to JSON.
     * @function toJSON
     * @memberof proto_cg_three_draw_req_data
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_three_draw_req_data.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_three_draw_req_data;
})();

$root.proto_gc_starsky_update_item_noti = (function() {

    /**
     * Properties of a proto_gc_starsky_update_item_noti.
     * @exports Iproto_gc_starsky_update_item_noti
     * @interface Iproto_gc_starsky_update_item_noti
     * @property {number} stamina proto_gc_starsky_update_item_noti stamina
     * @property {number} matchTicket proto_gc_starsky_update_item_noti matchTicket
     * @property {number} score proto_gc_starsky_update_item_noti score
     * @property {number} savestarCard proto_gc_starsky_update_item_noti savestarCard
     */

    /**
     * Constructs a new proto_gc_starsky_update_item_noti.
     * @exports proto_gc_starsky_update_item_noti
     * @classdesc Represents a proto_gc_starsky_update_item_noti.
     * @implements Iproto_gc_starsky_update_item_noti
     * @constructor
     * @param {Iproto_gc_starsky_update_item_noti=} [properties] Properties to set
     */
    function proto_gc_starsky_update_item_noti(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_starsky_update_item_noti stamina.
     * @member {number} stamina
     * @memberof proto_gc_starsky_update_item_noti
     * @instance
     */
    proto_gc_starsky_update_item_noti.prototype.stamina = 0;

    /**
     * proto_gc_starsky_update_item_noti matchTicket.
     * @member {number} matchTicket
     * @memberof proto_gc_starsky_update_item_noti
     * @instance
     */
    proto_gc_starsky_update_item_noti.prototype.matchTicket = 0;

    /**
     * proto_gc_starsky_update_item_noti score.
     * @member {number} score
     * @memberof proto_gc_starsky_update_item_noti
     * @instance
     */
    proto_gc_starsky_update_item_noti.prototype.score = 0;

    /**
     * proto_gc_starsky_update_item_noti savestarCard.
     * @member {number} savestarCard
     * @memberof proto_gc_starsky_update_item_noti
     * @instance
     */
    proto_gc_starsky_update_item_noti.prototype.savestarCard = 0;

    /**
     * Creates a new proto_gc_starsky_update_item_noti instance using the specified properties.
     * @function create
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {Iproto_gc_starsky_update_item_noti=} [properties] Properties to set
     * @returns {proto_gc_starsky_update_item_noti} proto_gc_starsky_update_item_noti instance
     */
    proto_gc_starsky_update_item_noti.create = function create(properties) {
        return new proto_gc_starsky_update_item_noti(properties);
    };

    /**
     * Encodes the specified proto_gc_starsky_update_item_noti message. Does not implicitly {@link proto_gc_starsky_update_item_noti.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {Iproto_gc_starsky_update_item_noti} message proto_gc_starsky_update_item_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_starsky_update_item_noti.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stamina);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.matchTicket);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.score);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.savestarCard);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_starsky_update_item_noti message, length delimited. Does not implicitly {@link proto_gc_starsky_update_item_noti.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {Iproto_gc_starsky_update_item_noti} message proto_gc_starsky_update_item_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_starsky_update_item_noti.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_starsky_update_item_noti message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_starsky_update_item_noti} proto_gc_starsky_update_item_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_starsky_update_item_noti.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_starsky_update_item_noti();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.stamina = reader.int32();
                break;
            case 2:
                message.matchTicket = reader.int32();
                break;
            case 3:
                message.score = reader.int32();
                break;
            case 4:
                message.savestarCard = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("stamina"))
            throw $util.ProtocolError("missing required 'stamina'", { instance: message });
        if (!message.hasOwnProperty("matchTicket"))
            throw $util.ProtocolError("missing required 'matchTicket'", { instance: message });
        if (!message.hasOwnProperty("score"))
            throw $util.ProtocolError("missing required 'score'", { instance: message });
        if (!message.hasOwnProperty("savestarCard"))
            throw $util.ProtocolError("missing required 'savestarCard'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_starsky_update_item_noti message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_starsky_update_item_noti} proto_gc_starsky_update_item_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_starsky_update_item_noti.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_starsky_update_item_noti message.
     * @function verify
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_starsky_update_item_noti.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.stamina))
            return "stamina: integer expected";
        if (!$util.isInteger(message.matchTicket))
            return "matchTicket: integer expected";
        if (!$util.isInteger(message.score))
            return "score: integer expected";
        if (!$util.isInteger(message.savestarCard))
            return "savestarCard: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_starsky_update_item_noti message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_starsky_update_item_noti} proto_gc_starsky_update_item_noti
     */
    proto_gc_starsky_update_item_noti.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_starsky_update_item_noti)
            return object;
        var message = new $root.proto_gc_starsky_update_item_noti();
        if (object.stamina != null)
            message.stamina = object.stamina | 0;
        if (object.matchTicket != null)
            message.matchTicket = object.matchTicket | 0;
        if (object.score != null)
            message.score = object.score | 0;
        if (object.savestarCard != null)
            message.savestarCard = object.savestarCard | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_starsky_update_item_noti message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_starsky_update_item_noti
     * @static
     * @param {proto_gc_starsky_update_item_noti} message proto_gc_starsky_update_item_noti
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_starsky_update_item_noti.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.stamina = 0;
            object.matchTicket = 0;
            object.score = 0;
            object.savestarCard = 0;
        }
        if (message.stamina != null && message.hasOwnProperty("stamina"))
            object.stamina = message.stamina;
        if (message.matchTicket != null && message.hasOwnProperty("matchTicket"))
            object.matchTicket = message.matchTicket;
        if (message.score != null && message.hasOwnProperty("score"))
            object.score = message.score;
        if (message.savestarCard != null && message.hasOwnProperty("savestarCard"))
            object.savestarCard = message.savestarCard;
        return object;
    };

    /**
     * Converts this proto_gc_starsky_update_item_noti to JSON.
     * @function toJSON
     * @memberof proto_gc_starsky_update_item_noti
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_starsky_update_item_noti.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_starsky_update_item_noti;
})();

$root.proto_magic_emoji_noti = (function() {

    /**
     * Properties of a proto_magic_emoji_noti.
     * @exports Iproto_magic_emoji_noti
     * @interface Iproto_magic_emoji_noti
     * @property {number} cIsError proto_magic_emoji_noti cIsError
     * @property {number} cEmojiIndex proto_magic_emoji_noti cEmojiIndex
     * @property {number} cFromChairID proto_magic_emoji_noti cFromChairID
     * @property {number} cToChairID proto_magic_emoji_noti cToChairID
     */

    /**
     * Constructs a new proto_magic_emoji_noti.
     * @exports proto_magic_emoji_noti
     * @classdesc Represents a proto_magic_emoji_noti.
     * @implements Iproto_magic_emoji_noti
     * @constructor
     * @param {Iproto_magic_emoji_noti=} [properties] Properties to set
     */
    function proto_magic_emoji_noti(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_magic_emoji_noti cIsError.
     * @member {number} cIsError
     * @memberof proto_magic_emoji_noti
     * @instance
     */
    proto_magic_emoji_noti.prototype.cIsError = 0;

    /**
     * proto_magic_emoji_noti cEmojiIndex.
     * @member {number} cEmojiIndex
     * @memberof proto_magic_emoji_noti
     * @instance
     */
    proto_magic_emoji_noti.prototype.cEmojiIndex = 0;

    /**
     * proto_magic_emoji_noti cFromChairID.
     * @member {number} cFromChairID
     * @memberof proto_magic_emoji_noti
     * @instance
     */
    proto_magic_emoji_noti.prototype.cFromChairID = 0;

    /**
     * proto_magic_emoji_noti cToChairID.
     * @member {number} cToChairID
     * @memberof proto_magic_emoji_noti
     * @instance
     */
    proto_magic_emoji_noti.prototype.cToChairID = 0;

    /**
     * Creates a new proto_magic_emoji_noti instance using the specified properties.
     * @function create
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {Iproto_magic_emoji_noti=} [properties] Properties to set
     * @returns {proto_magic_emoji_noti} proto_magic_emoji_noti instance
     */
    proto_magic_emoji_noti.create = function create(properties) {
        return new proto_magic_emoji_noti(properties);
    };

    /**
     * Encodes the specified proto_magic_emoji_noti message. Does not implicitly {@link proto_magic_emoji_noti.verify|verify} messages.
     * @function encode
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {Iproto_magic_emoji_noti} message proto_magic_emoji_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_magic_emoji_noti.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cIsError);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cEmojiIndex);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cFromChairID);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cToChairID);
        return writer;
    };

    /**
     * Encodes the specified proto_magic_emoji_noti message, length delimited. Does not implicitly {@link proto_magic_emoji_noti.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {Iproto_magic_emoji_noti} message proto_magic_emoji_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_magic_emoji_noti.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_magic_emoji_noti message from the specified reader or buffer.
     * @function decode
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_magic_emoji_noti} proto_magic_emoji_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_magic_emoji_noti.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_magic_emoji_noti();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cIsError = reader.int32();
                break;
            case 2:
                message.cEmojiIndex = reader.int32();
                break;
            case 3:
                message.cFromChairID = reader.int32();
                break;
            case 4:
                message.cToChairID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cIsError"))
            throw $util.ProtocolError("missing required 'cIsError'", { instance: message });
        if (!message.hasOwnProperty("cEmojiIndex"))
            throw $util.ProtocolError("missing required 'cEmojiIndex'", { instance: message });
        if (!message.hasOwnProperty("cFromChairID"))
            throw $util.ProtocolError("missing required 'cFromChairID'", { instance: message });
        if (!message.hasOwnProperty("cToChairID"))
            throw $util.ProtocolError("missing required 'cToChairID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_magic_emoji_noti message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_magic_emoji_noti} proto_magic_emoji_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_magic_emoji_noti.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_magic_emoji_noti message.
     * @function verify
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_magic_emoji_noti.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cIsError))
            return "cIsError: integer expected";
        if (!$util.isInteger(message.cEmojiIndex))
            return "cEmojiIndex: integer expected";
        if (!$util.isInteger(message.cFromChairID))
            return "cFromChairID: integer expected";
        if (!$util.isInteger(message.cToChairID))
            return "cToChairID: integer expected";
        return null;
    };

    /**
     * Creates a proto_magic_emoji_noti message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_magic_emoji_noti} proto_magic_emoji_noti
     */
    proto_magic_emoji_noti.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_magic_emoji_noti)
            return object;
        var message = new $root.proto_magic_emoji_noti();
        if (object.cIsError != null)
            message.cIsError = object.cIsError | 0;
        if (object.cEmojiIndex != null)
            message.cEmojiIndex = object.cEmojiIndex | 0;
        if (object.cFromChairID != null)
            message.cFromChairID = object.cFromChairID | 0;
        if (object.cToChairID != null)
            message.cToChairID = object.cToChairID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_magic_emoji_noti message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_magic_emoji_noti
     * @static
     * @param {proto_magic_emoji_noti} message proto_magic_emoji_noti
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_magic_emoji_noti.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cIsError = 0;
            object.cEmojiIndex = 0;
            object.cFromChairID = 0;
            object.cToChairID = 0;
        }
        if (message.cIsError != null && message.hasOwnProperty("cIsError"))
            object.cIsError = message.cIsError;
        if (message.cEmojiIndex != null && message.hasOwnProperty("cEmojiIndex"))
            object.cEmojiIndex = message.cEmojiIndex;
        if (message.cFromChairID != null && message.hasOwnProperty("cFromChairID"))
            object.cFromChairID = message.cFromChairID;
        if (message.cToChairID != null && message.hasOwnProperty("cToChairID"))
            object.cToChairID = message.cToChairID;
        return object;
    };

    /**
     * Converts this proto_magic_emoji_noti to JSON.
     * @function toJSON
     * @memberof proto_magic_emoji_noti
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_magic_emoji_noti.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_magic_emoji_noti;
})();

$root.proto_cg_complete_data_req = (function() {

    /**
     * Properties of a proto_cg_complete_data_req.
     * @exports Iproto_cg_complete_data_req
     * @interface Iproto_cg_complete_data_req
     */

    /**
     * Constructs a new proto_cg_complete_data_req.
     * @exports proto_cg_complete_data_req
     * @classdesc Represents a proto_cg_complete_data_req.
     * @implements Iproto_cg_complete_data_req
     * @constructor
     * @param {Iproto_cg_complete_data_req=} [properties] Properties to set
     */
    function proto_cg_complete_data_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_complete_data_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {Iproto_cg_complete_data_req=} [properties] Properties to set
     * @returns {proto_cg_complete_data_req} proto_cg_complete_data_req instance
     */
    proto_cg_complete_data_req.create = function create(properties) {
        return new proto_cg_complete_data_req(properties);
    };

    /**
     * Encodes the specified proto_cg_complete_data_req message. Does not implicitly {@link proto_cg_complete_data_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {Iproto_cg_complete_data_req} message proto_cg_complete_data_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_complete_data_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_complete_data_req message, length delimited. Does not implicitly {@link proto_cg_complete_data_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {Iproto_cg_complete_data_req} message proto_cg_complete_data_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_complete_data_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_complete_data_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_complete_data_req} proto_cg_complete_data_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_complete_data_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_complete_data_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_complete_data_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_complete_data_req} proto_cg_complete_data_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_complete_data_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_complete_data_req message.
     * @function verify
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_complete_data_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_complete_data_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_complete_data_req} proto_cg_complete_data_req
     */
    proto_cg_complete_data_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_complete_data_req)
            return object;
        return new $root.proto_cg_complete_data_req();
    };

    /**
     * Creates a plain object from a proto_cg_complete_data_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_complete_data_req
     * @static
     * @param {proto_cg_complete_data_req} message proto_cg_complete_data_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_complete_data_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_complete_data_req to JSON.
     * @function toJSON
     * @memberof proto_cg_complete_data_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_complete_data_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_complete_data_req;
})();

$root.proto_sic_bet_update_ack = (function() {

    /**
     * Properties of a proto_sic_bet_update_ack.
     * @exports Iproto_sic_bet_update_ack
     * @interface Iproto_sic_bet_update_ack
     * @property {number} nBetUpdateAckTag proto_sic_bet_update_ack nBetUpdateAckTag
     * @property {Array.<Iproto_st_sic_cell>|null} [vecAmountCell] proto_sic_bet_update_ack vecAmountCell
     */

    /**
     * Constructs a new proto_sic_bet_update_ack.
     * @exports proto_sic_bet_update_ack
     * @classdesc Represents a proto_sic_bet_update_ack.
     * @implements Iproto_sic_bet_update_ack
     * @constructor
     * @param {Iproto_sic_bet_update_ack=} [properties] Properties to set
     */
    function proto_sic_bet_update_ack(properties) {
        this.vecAmountCell = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_bet_update_ack nBetUpdateAckTag.
     * @member {number} nBetUpdateAckTag
     * @memberof proto_sic_bet_update_ack
     * @instance
     */
    proto_sic_bet_update_ack.prototype.nBetUpdateAckTag = 0;

    /**
     * proto_sic_bet_update_ack vecAmountCell.
     * @member {Array.<Iproto_st_sic_cell>} vecAmountCell
     * @memberof proto_sic_bet_update_ack
     * @instance
     */
    proto_sic_bet_update_ack.prototype.vecAmountCell = $util.emptyArray;

    /**
     * Creates a new proto_sic_bet_update_ack instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {Iproto_sic_bet_update_ack=} [properties] Properties to set
     * @returns {proto_sic_bet_update_ack} proto_sic_bet_update_ack instance
     */
    proto_sic_bet_update_ack.create = function create(properties) {
        return new proto_sic_bet_update_ack(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_update_ack message. Does not implicitly {@link proto_sic_bet_update_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {Iproto_sic_bet_update_ack} message proto_sic_bet_update_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_update_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nBetUpdateAckTag);
        if (message.vecAmountCell != null && message.vecAmountCell.length)
            for (var i = 0; i < message.vecAmountCell.length; ++i)
                $root.proto_st_sic_cell.encode(message.vecAmountCell[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_update_ack message, length delimited. Does not implicitly {@link proto_sic_bet_update_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {Iproto_sic_bet_update_ack} message proto_sic_bet_update_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_update_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_update_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_update_ack} proto_sic_bet_update_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_update_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_update_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nBetUpdateAckTag = reader.int32();
                break;
            case 2:
                if (!(message.vecAmountCell && message.vecAmountCell.length))
                    message.vecAmountCell = [];
                message.vecAmountCell.push($root.proto_st_sic_cell.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nBetUpdateAckTag"))
            throw $util.ProtocolError("missing required 'nBetUpdateAckTag'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_bet_update_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_update_ack} proto_sic_bet_update_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_update_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_update_ack message.
     * @function verify
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_update_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nBetUpdateAckTag))
            return "nBetUpdateAckTag: integer expected";
        if (message.vecAmountCell != null && message.hasOwnProperty("vecAmountCell")) {
            if (!Array.isArray(message.vecAmountCell))
                return "vecAmountCell: array expected";
            for (var i = 0; i < message.vecAmountCell.length; ++i) {
                var error = $root.proto_st_sic_cell.verify(message.vecAmountCell[i]);
                if (error)
                    return "vecAmountCell." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_sic_bet_update_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_update_ack} proto_sic_bet_update_ack
     */
    proto_sic_bet_update_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_update_ack)
            return object;
        var message = new $root.proto_sic_bet_update_ack();
        if (object.nBetUpdateAckTag != null)
            message.nBetUpdateAckTag = object.nBetUpdateAckTag | 0;
        if (object.vecAmountCell) {
            if (!Array.isArray(object.vecAmountCell))
                throw TypeError(".proto_sic_bet_update_ack.vecAmountCell: array expected");
            message.vecAmountCell = [];
            for (var i = 0; i < object.vecAmountCell.length; ++i) {
                if (typeof object.vecAmountCell[i] !== "object")
                    throw TypeError(".proto_sic_bet_update_ack.vecAmountCell: object expected");
                message.vecAmountCell[i] = $root.proto_st_sic_cell.fromObject(object.vecAmountCell[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_bet_update_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_update_ack
     * @static
     * @param {proto_sic_bet_update_ack} message proto_sic_bet_update_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_update_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecAmountCell = [];
        if (options.defaults)
            object.nBetUpdateAckTag = 0;
        if (message.nBetUpdateAckTag != null && message.hasOwnProperty("nBetUpdateAckTag"))
            object.nBetUpdateAckTag = message.nBetUpdateAckTag;
        if (message.vecAmountCell && message.vecAmountCell.length) {
            object.vecAmountCell = [];
            for (var j = 0; j < message.vecAmountCell.length; ++j)
                object.vecAmountCell[j] = $root.proto_st_sic_cell.toObject(message.vecAmountCell[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_sic_bet_update_ack to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_update_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_update_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_update_ack;
})();

$root.proto_gc_bet_lord_card_ack = (function() {

    /**
     * Properties of a proto_gc_bet_lord_card_ack.
     * @exports Iproto_gc_bet_lord_card_ack
     * @interface Iproto_gc_bet_lord_card_ack
     * @property {number} ret proto_gc_bet_lord_card_ack ret
     * @property {number} index proto_gc_bet_lord_card_ack index
     */

    /**
     * Constructs a new proto_gc_bet_lord_card_ack.
     * @exports proto_gc_bet_lord_card_ack
     * @classdesc Represents a proto_gc_bet_lord_card_ack.
     * @implements Iproto_gc_bet_lord_card_ack
     * @constructor
     * @param {Iproto_gc_bet_lord_card_ack=} [properties] Properties to set
     */
    function proto_gc_bet_lord_card_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_bet_lord_card_ack ret.
     * @member {number} ret
     * @memberof proto_gc_bet_lord_card_ack
     * @instance
     */
    proto_gc_bet_lord_card_ack.prototype.ret = 0;

    /**
     * proto_gc_bet_lord_card_ack index.
     * @member {number} index
     * @memberof proto_gc_bet_lord_card_ack
     * @instance
     */
    proto_gc_bet_lord_card_ack.prototype.index = 0;

    /**
     * Creates a new proto_gc_bet_lord_card_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {Iproto_gc_bet_lord_card_ack=} [properties] Properties to set
     * @returns {proto_gc_bet_lord_card_ack} proto_gc_bet_lord_card_ack instance
     */
    proto_gc_bet_lord_card_ack.create = function create(properties) {
        return new proto_gc_bet_lord_card_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_bet_lord_card_ack message. Does not implicitly {@link proto_gc_bet_lord_card_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {Iproto_gc_bet_lord_card_ack} message proto_gc_bet_lord_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_bet_lord_card_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_bet_lord_card_ack message, length delimited. Does not implicitly {@link proto_gc_bet_lord_card_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {Iproto_gc_bet_lord_card_ack} message proto_gc_bet_lord_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_bet_lord_card_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_bet_lord_card_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_bet_lord_card_ack} proto_gc_bet_lord_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_bet_lord_card_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_bet_lord_card_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.index = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("index"))
            throw $util.ProtocolError("missing required 'index'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_bet_lord_card_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_bet_lord_card_ack} proto_gc_bet_lord_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_bet_lord_card_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_bet_lord_card_ack message.
     * @function verify
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_bet_lord_card_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (!$util.isInteger(message.index))
            return "index: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_bet_lord_card_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_bet_lord_card_ack} proto_gc_bet_lord_card_ack
     */
    proto_gc_bet_lord_card_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_bet_lord_card_ack)
            return object;
        var message = new $root.proto_gc_bet_lord_card_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.index != null)
            message.index = object.index | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_bet_lord_card_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_bet_lord_card_ack
     * @static
     * @param {proto_gc_bet_lord_card_ack} message proto_gc_bet_lord_card_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_bet_lord_card_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.index = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this proto_gc_bet_lord_card_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_bet_lord_card_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_bet_lord_card_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_bet_lord_card_ack;
})();

$root.proto_gc_double_score_not = (function() {

    /**
     * Properties of a proto_gc_double_score_not.
     * @exports Iproto_gc_double_score_not
     * @interface Iproto_gc_double_score_not
     * @property {number} nDouble proto_gc_double_score_not nDouble
     * @property {number} nSerialID proto_gc_double_score_not nSerialID
     */

    /**
     * Constructs a new proto_gc_double_score_not.
     * @exports proto_gc_double_score_not
     * @classdesc Represents a proto_gc_double_score_not.
     * @implements Iproto_gc_double_score_not
     * @constructor
     * @param {Iproto_gc_double_score_not=} [properties] Properties to set
     */
    function proto_gc_double_score_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_double_score_not nDouble.
     * @member {number} nDouble
     * @memberof proto_gc_double_score_not
     * @instance
     */
    proto_gc_double_score_not.prototype.nDouble = 0;

    /**
     * proto_gc_double_score_not nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_double_score_not
     * @instance
     */
    proto_gc_double_score_not.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_double_score_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_double_score_not
     * @static
     * @param {Iproto_gc_double_score_not=} [properties] Properties to set
     * @returns {proto_gc_double_score_not} proto_gc_double_score_not instance
     */
    proto_gc_double_score_not.create = function create(properties) {
        return new proto_gc_double_score_not(properties);
    };

    /**
     * Encodes the specified proto_gc_double_score_not message. Does not implicitly {@link proto_gc_double_score_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_double_score_not
     * @static
     * @param {Iproto_gc_double_score_not} message proto_gc_double_score_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_double_score_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nDouble);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_double_score_not message, length delimited. Does not implicitly {@link proto_gc_double_score_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_double_score_not
     * @static
     * @param {Iproto_gc_double_score_not} message proto_gc_double_score_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_double_score_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_double_score_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_double_score_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_double_score_not} proto_gc_double_score_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_double_score_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_double_score_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nDouble = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nDouble"))
            throw $util.ProtocolError("missing required 'nDouble'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_double_score_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_double_score_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_double_score_not} proto_gc_double_score_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_double_score_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_double_score_not message.
     * @function verify
     * @memberof proto_gc_double_score_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_double_score_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nDouble))
            return "nDouble: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_double_score_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_double_score_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_double_score_not} proto_gc_double_score_not
     */
    proto_gc_double_score_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_double_score_not)
            return object;
        var message = new $root.proto_gc_double_score_not();
        if (object.nDouble != null)
            message.nDouble = object.nDouble | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_double_score_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_double_score_not
     * @static
     * @param {proto_gc_double_score_not} message proto_gc_double_score_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_double_score_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nDouble = 0;
            object.nSerialID = 0;
        }
        if (message.nDouble != null && message.hasOwnProperty("nDouble"))
            object.nDouble = message.nDouble;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_double_score_not to JSON.
     * @function toJSON
     * @memberof proto_gc_double_score_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_double_score_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_double_score_not;
})();

$root.proto_sic_new_round_not = (function() {

    /**
     * Properties of a proto_sic_new_round_not.
     * @exports Iproto_sic_new_round_not
     * @interface Iproto_sic_new_round_not
     */

    /**
     * Constructs a new proto_sic_new_round_not.
     * @exports proto_sic_new_round_not
     * @classdesc Represents a proto_sic_new_round_not.
     * @implements Iproto_sic_new_round_not
     * @constructor
     * @param {Iproto_sic_new_round_not=} [properties] Properties to set
     */
    function proto_sic_new_round_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_sic_new_round_not instance using the specified properties.
     * @function create
     * @memberof proto_sic_new_round_not
     * @static
     * @param {Iproto_sic_new_round_not=} [properties] Properties to set
     * @returns {proto_sic_new_round_not} proto_sic_new_round_not instance
     */
    proto_sic_new_round_not.create = function create(properties) {
        return new proto_sic_new_round_not(properties);
    };

    /**
     * Encodes the specified proto_sic_new_round_not message. Does not implicitly {@link proto_sic_new_round_not.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_new_round_not
     * @static
     * @param {Iproto_sic_new_round_not} message proto_sic_new_round_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_new_round_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_new_round_not message, length delimited. Does not implicitly {@link proto_sic_new_round_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_new_round_not
     * @static
     * @param {Iproto_sic_new_round_not} message proto_sic_new_round_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_new_round_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_new_round_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_new_round_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_new_round_not} proto_sic_new_round_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_new_round_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_new_round_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_sic_new_round_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_new_round_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_new_round_not} proto_sic_new_round_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_new_round_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_new_round_not message.
     * @function verify
     * @memberof proto_sic_new_round_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_new_round_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_sic_new_round_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_new_round_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_new_round_not} proto_sic_new_round_not
     */
    proto_sic_new_round_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_new_round_not)
            return object;
        return new $root.proto_sic_new_round_not();
    };

    /**
     * Creates a plain object from a proto_sic_new_round_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_new_round_not
     * @static
     * @param {proto_sic_new_round_not} message proto_sic_new_round_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_new_round_not.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_sic_new_round_not to JSON.
     * @function toJSON
     * @memberof proto_sic_new_round_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_new_round_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_new_round_not;
})();

$root.proto_st_sic_cell = (function() {

    /**
     * Properties of a proto_st_sic_cell.
     * @exports Iproto_st_sic_cell
     * @interface Iproto_st_sic_cell
     * @property {number} cCellID proto_st_sic_cell cCellID
     * @property {number} nAmount proto_st_sic_cell nAmount
     */

    /**
     * Constructs a new proto_st_sic_cell.
     * @exports proto_st_sic_cell
     * @classdesc Represents a proto_st_sic_cell.
     * @implements Iproto_st_sic_cell
     * @constructor
     * @param {Iproto_st_sic_cell=} [properties] Properties to set
     */
    function proto_st_sic_cell(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_st_sic_cell cCellID.
     * @member {number} cCellID
     * @memberof proto_st_sic_cell
     * @instance
     */
    proto_st_sic_cell.prototype.cCellID = 0;

    /**
     * proto_st_sic_cell nAmount.
     * @member {number} nAmount
     * @memberof proto_st_sic_cell
     * @instance
     */
    proto_st_sic_cell.prototype.nAmount = 0;

    /**
     * Creates a new proto_st_sic_cell instance using the specified properties.
     * @function create
     * @memberof proto_st_sic_cell
     * @static
     * @param {Iproto_st_sic_cell=} [properties] Properties to set
     * @returns {proto_st_sic_cell} proto_st_sic_cell instance
     */
    proto_st_sic_cell.create = function create(properties) {
        return new proto_st_sic_cell(properties);
    };

    /**
     * Encodes the specified proto_st_sic_cell message. Does not implicitly {@link proto_st_sic_cell.verify|verify} messages.
     * @function encode
     * @memberof proto_st_sic_cell
     * @static
     * @param {Iproto_st_sic_cell} message proto_st_sic_cell message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_st_sic_cell.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cCellID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nAmount);
        return writer;
    };

    /**
     * Encodes the specified proto_st_sic_cell message, length delimited. Does not implicitly {@link proto_st_sic_cell.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_st_sic_cell
     * @static
     * @param {Iproto_st_sic_cell} message proto_st_sic_cell message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_st_sic_cell.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_st_sic_cell message from the specified reader or buffer.
     * @function decode
     * @memberof proto_st_sic_cell
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_st_sic_cell} proto_st_sic_cell
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_st_sic_cell.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_st_sic_cell();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cCellID = reader.int32();
                break;
            case 2:
                message.nAmount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cCellID"))
            throw $util.ProtocolError("missing required 'cCellID'", { instance: message });
        if (!message.hasOwnProperty("nAmount"))
            throw $util.ProtocolError("missing required 'nAmount'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_st_sic_cell message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_st_sic_cell
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_st_sic_cell} proto_st_sic_cell
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_st_sic_cell.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_st_sic_cell message.
     * @function verify
     * @memberof proto_st_sic_cell
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_st_sic_cell.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cCellID))
            return "cCellID: integer expected";
        if (!$util.isInteger(message.nAmount))
            return "nAmount: integer expected";
        return null;
    };

    /**
     * Creates a proto_st_sic_cell message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_st_sic_cell
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_st_sic_cell} proto_st_sic_cell
     */
    proto_st_sic_cell.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_st_sic_cell)
            return object;
        var message = new $root.proto_st_sic_cell();
        if (object.cCellID != null)
            message.cCellID = object.cCellID | 0;
        if (object.nAmount != null)
            message.nAmount = object.nAmount | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_st_sic_cell message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_st_sic_cell
     * @static
     * @param {proto_st_sic_cell} message proto_st_sic_cell
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_st_sic_cell.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cCellID = 0;
            object.nAmount = 0;
        }
        if (message.cCellID != null && message.hasOwnProperty("cCellID"))
            object.cCellID = message.cCellID;
        if (message.nAmount != null && message.hasOwnProperty("nAmount"))
            object.nAmount = message.nAmount;
        return object;
    };

    /**
     * Converts this proto_st_sic_cell to JSON.
     * @function toJSON
     * @memberof proto_st_sic_cell
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_st_sic_cell.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_st_sic_cell;
})();

$root.proto_gc_play_card_not = (function() {

    /**
     * Properties of a proto_gc_play_card_not.
     * @exports Iproto_gc_play_card_not
     * @interface Iproto_gc_play_card_not
     * @property {number} cChairID proto_gc_play_card_not cChairID
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_play_card_not vecCards
     * @property {Iproto_CCardsType} cType proto_gc_play_card_not cType
     */

    /**
     * Constructs a new proto_gc_play_card_not.
     * @exports proto_gc_play_card_not
     * @classdesc Represents a proto_gc_play_card_not.
     * @implements Iproto_gc_play_card_not
     * @constructor
     * @param {Iproto_gc_play_card_not=} [properties] Properties to set
     */
    function proto_gc_play_card_not(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_play_card_not cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_play_card_not
     * @instance
     */
    proto_gc_play_card_not.prototype.cChairID = 0;

    /**
     * proto_gc_play_card_not vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_play_card_not
     * @instance
     */
    proto_gc_play_card_not.prototype.vecCards = $util.emptyArray;

    /**
     * proto_gc_play_card_not cType.
     * @member {Iproto_CCardsType} cType
     * @memberof proto_gc_play_card_not
     * @instance
     */
    proto_gc_play_card_not.prototype.cType = null;

    /**
     * Creates a new proto_gc_play_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_play_card_not
     * @static
     * @param {Iproto_gc_play_card_not=} [properties] Properties to set
     * @returns {proto_gc_play_card_not} proto_gc_play_card_not instance
     */
    proto_gc_play_card_not.create = function create(properties) {
        return new proto_gc_play_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_play_card_not message. Does not implicitly {@link proto_gc_play_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_play_card_not
     * @static
     * @param {Iproto_gc_play_card_not} message proto_gc_play_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_play_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        $root.proto_CCardsType.encode(message.cType, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_play_card_not message, length delimited. Does not implicitly {@link proto_gc_play_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_play_card_not
     * @static
     * @param {Iproto_gc_play_card_not} message proto_gc_play_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_play_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_play_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_play_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_play_card_not} proto_gc_play_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_play_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_play_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 3:
                message.cType = $root.proto_CCardsType.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        if (!message.hasOwnProperty("cType"))
            throw $util.ProtocolError("missing required 'cType'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_play_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_play_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_play_card_not} proto_gc_play_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_play_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_play_card_not message.
     * @function verify
     * @memberof proto_gc_play_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_play_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        {
            var error = $root.proto_CCardsType.verify(message.cType);
            if (error)
                return "cType." + error;
        }
        return null;
    };

    /**
     * Creates a proto_gc_play_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_play_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_play_card_not} proto_gc_play_card_not
     */
    proto_gc_play_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_play_card_not)
            return object;
        var message = new $root.proto_gc_play_card_not();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_play_card_not.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_play_card_not.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        if (object.cType != null) {
            if (typeof object.cType !== "object")
                throw TypeError(".proto_gc_play_card_not.cType: object expected");
            message.cType = $root.proto_CCardsType.fromObject(object.cType);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_play_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_play_card_not
     * @static
     * @param {proto_gc_play_card_not} message proto_gc_play_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_play_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults) {
            object.cChairID = 0;
            object.cType = null;
        }
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        if (message.cType != null && message.hasOwnProperty("cType"))
            object.cType = $root.proto_CCardsType.toObject(message.cType, options);
        return object;
    };

    /**
     * Converts this proto_gc_play_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_play_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_play_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_play_card_not;
})();

$root.proto_gc_item_info_not = (function() {

    /**
     * Properties of a proto_gc_item_info_not.
     * @exports Iproto_gc_item_info_not
     * @interface Iproto_gc_item_info_not
     * @property {number} nItemIndex proto_gc_item_info_not nItemIndex
     * @property {number} nItemCount proto_gc_item_info_not nItemCount
     */

    /**
     * Constructs a new proto_gc_item_info_not.
     * @exports proto_gc_item_info_not
     * @classdesc Represents a proto_gc_item_info_not.
     * @implements Iproto_gc_item_info_not
     * @constructor
     * @param {Iproto_gc_item_info_not=} [properties] Properties to set
     */
    function proto_gc_item_info_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_item_info_not nItemIndex.
     * @member {number} nItemIndex
     * @memberof proto_gc_item_info_not
     * @instance
     */
    proto_gc_item_info_not.prototype.nItemIndex = 0;

    /**
     * proto_gc_item_info_not nItemCount.
     * @member {number} nItemCount
     * @memberof proto_gc_item_info_not
     * @instance
     */
    proto_gc_item_info_not.prototype.nItemCount = 0;

    /**
     * Creates a new proto_gc_item_info_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_item_info_not
     * @static
     * @param {Iproto_gc_item_info_not=} [properties] Properties to set
     * @returns {proto_gc_item_info_not} proto_gc_item_info_not instance
     */
    proto_gc_item_info_not.create = function create(properties) {
        return new proto_gc_item_info_not(properties);
    };

    /**
     * Encodes the specified proto_gc_item_info_not message. Does not implicitly {@link proto_gc_item_info_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_item_info_not
     * @static
     * @param {Iproto_gc_item_info_not} message proto_gc_item_info_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_item_info_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nItemIndex);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nItemCount);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_item_info_not message, length delimited. Does not implicitly {@link proto_gc_item_info_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_item_info_not
     * @static
     * @param {Iproto_gc_item_info_not} message proto_gc_item_info_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_item_info_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_item_info_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_item_info_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_item_info_not} proto_gc_item_info_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_item_info_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_item_info_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nItemIndex = reader.int32();
                break;
            case 2:
                message.nItemCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nItemIndex"))
            throw $util.ProtocolError("missing required 'nItemIndex'", { instance: message });
        if (!message.hasOwnProperty("nItemCount"))
            throw $util.ProtocolError("missing required 'nItemCount'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_item_info_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_item_info_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_item_info_not} proto_gc_item_info_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_item_info_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_item_info_not message.
     * @function verify
     * @memberof proto_gc_item_info_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_item_info_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nItemIndex))
            return "nItemIndex: integer expected";
        if (!$util.isInteger(message.nItemCount))
            return "nItemCount: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_item_info_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_item_info_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_item_info_not} proto_gc_item_info_not
     */
    proto_gc_item_info_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_item_info_not)
            return object;
        var message = new $root.proto_gc_item_info_not();
        if (object.nItemIndex != null)
            message.nItemIndex = object.nItemIndex | 0;
        if (object.nItemCount != null)
            message.nItemCount = object.nItemCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_item_info_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_item_info_not
     * @static
     * @param {proto_gc_item_info_not} message proto_gc_item_info_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_item_info_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nItemIndex = 0;
            object.nItemCount = 0;
        }
        if (message.nItemIndex != null && message.hasOwnProperty("nItemIndex"))
            object.nItemIndex = message.nItemIndex;
        if (message.nItemCount != null && message.hasOwnProperty("nItemCount"))
            object.nItemCount = message.nItemCount;
        return object;
    };

    /**
     * Converts this proto_gc_item_info_not to JSON.
     * @function toJSON
     * @memberof proto_gc_item_info_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_item_info_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_item_info_not;
})();

$root.proto_stUserResult = (function() {

    /**
     * Properties of a proto_stUserResult.
     * @exports Iproto_stUserResult
     * @interface Iproto_stUserResult
     * @property {number} nChairID proto_stUserResult nChairID
     * @property {number} nScore proto_stUserResult nScore
     */

    /**
     * Constructs a new proto_stUserResult.
     * @exports proto_stUserResult
     * @classdesc Represents a proto_stUserResult.
     * @implements Iproto_stUserResult
     * @constructor
     * @param {Iproto_stUserResult=} [properties] Properties to set
     */
    function proto_stUserResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_stUserResult nChairID.
     * @member {number} nChairID
     * @memberof proto_stUserResult
     * @instance
     */
    proto_stUserResult.prototype.nChairID = 0;

    /**
     * proto_stUserResult nScore.
     * @member {number} nScore
     * @memberof proto_stUserResult
     * @instance
     */
    proto_stUserResult.prototype.nScore = 0;

    /**
     * Creates a new proto_stUserResult instance using the specified properties.
     * @function create
     * @memberof proto_stUserResult
     * @static
     * @param {Iproto_stUserResult=} [properties] Properties to set
     * @returns {proto_stUserResult} proto_stUserResult instance
     */
    proto_stUserResult.create = function create(properties) {
        return new proto_stUserResult(properties);
    };

    /**
     * Encodes the specified proto_stUserResult message. Does not implicitly {@link proto_stUserResult.verify|verify} messages.
     * @function encode
     * @memberof proto_stUserResult
     * @static
     * @param {Iproto_stUserResult} message proto_stUserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_stUserResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nChairID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nScore);
        return writer;
    };

    /**
     * Encodes the specified proto_stUserResult message, length delimited. Does not implicitly {@link proto_stUserResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_stUserResult
     * @static
     * @param {Iproto_stUserResult} message proto_stUserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_stUserResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_stUserResult message from the specified reader or buffer.
     * @function decode
     * @memberof proto_stUserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_stUserResult} proto_stUserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_stUserResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_stUserResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nChairID = reader.int32();
                break;
            case 2:
                message.nScore = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nChairID"))
            throw $util.ProtocolError("missing required 'nChairID'", { instance: message });
        if (!message.hasOwnProperty("nScore"))
            throw $util.ProtocolError("missing required 'nScore'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_stUserResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_stUserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_stUserResult} proto_stUserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_stUserResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_stUserResult message.
     * @function verify
     * @memberof proto_stUserResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_stUserResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nChairID))
            return "nChairID: integer expected";
        if (!$util.isInteger(message.nScore))
            return "nScore: integer expected";
        return null;
    };

    /**
     * Creates a proto_stUserResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_stUserResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_stUserResult} proto_stUserResult
     */
    proto_stUserResult.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_stUserResult)
            return object;
        var message = new $root.proto_stUserResult();
        if (object.nChairID != null)
            message.nChairID = object.nChairID | 0;
        if (object.nScore != null)
            message.nScore = object.nScore | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_stUserResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_stUserResult
     * @static
     * @param {proto_stUserResult} message proto_stUserResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_stUserResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nChairID = 0;
            object.nScore = 0;
        }
        if (message.nChairID != null && message.hasOwnProperty("nChairID"))
            object.nChairID = message.nChairID;
        if (message.nScore != null && message.hasOwnProperty("nScore"))
            object.nScore = message.nScore;
        return object;
    };

    /**
     * Converts this proto_stUserResult to JSON.
     * @function toJSON
     * @memberof proto_stUserResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_stUserResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_stUserResult;
})();

$root.proto_cg_starsky_season_noti = (function() {

    /**
     * Properties of a proto_cg_starsky_season_noti.
     * @exports Iproto_cg_starsky_season_noti
     * @interface Iproto_cg_starsky_season_noti
     * @property {number} season proto_cg_starsky_season_noti season
     */

    /**
     * Constructs a new proto_cg_starsky_season_noti.
     * @exports proto_cg_starsky_season_noti
     * @classdesc Represents a proto_cg_starsky_season_noti.
     * @implements Iproto_cg_starsky_season_noti
     * @constructor
     * @param {Iproto_cg_starsky_season_noti=} [properties] Properties to set
     */
    function proto_cg_starsky_season_noti(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_starsky_season_noti season.
     * @member {number} season
     * @memberof proto_cg_starsky_season_noti
     * @instance
     */
    proto_cg_starsky_season_noti.prototype.season = 0;

    /**
     * Creates a new proto_cg_starsky_season_noti instance using the specified properties.
     * @function create
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {Iproto_cg_starsky_season_noti=} [properties] Properties to set
     * @returns {proto_cg_starsky_season_noti} proto_cg_starsky_season_noti instance
     */
    proto_cg_starsky_season_noti.create = function create(properties) {
        return new proto_cg_starsky_season_noti(properties);
    };

    /**
     * Encodes the specified proto_cg_starsky_season_noti message. Does not implicitly {@link proto_cg_starsky_season_noti.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {Iproto_cg_starsky_season_noti} message proto_cg_starsky_season_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_starsky_season_noti.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.season);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_starsky_season_noti message, length delimited. Does not implicitly {@link proto_cg_starsky_season_noti.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {Iproto_cg_starsky_season_noti} message proto_cg_starsky_season_noti message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_starsky_season_noti.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_starsky_season_noti message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_starsky_season_noti} proto_cg_starsky_season_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_starsky_season_noti.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_starsky_season_noti();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.season = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("season"))
            throw $util.ProtocolError("missing required 'season'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_starsky_season_noti message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_starsky_season_noti} proto_cg_starsky_season_noti
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_starsky_season_noti.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_starsky_season_noti message.
     * @function verify
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_starsky_season_noti.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.season))
            return "season: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_starsky_season_noti message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_starsky_season_noti} proto_cg_starsky_season_noti
     */
    proto_cg_starsky_season_noti.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_starsky_season_noti)
            return object;
        var message = new $root.proto_cg_starsky_season_noti();
        if (object.season != null)
            message.season = object.season | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_starsky_season_noti message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_starsky_season_noti
     * @static
     * @param {proto_cg_starsky_season_noti} message proto_cg_starsky_season_noti
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_starsky_season_noti.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.season = 0;
        if (message.season != null && message.hasOwnProperty("season"))
            object.season = message.season;
        return object;
    };

    /**
     * Converts this proto_cg_starsky_season_noti to JSON.
     * @function toJSON
     * @memberof proto_cg_starsky_season_noti
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_starsky_season_noti.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_starsky_season_noti;
})();

$root.proto_gc_update_player_tokenmoney_not = (function() {

    /**
     * Properties of a proto_gc_update_player_tokenmoney_not.
     * @exports Iproto_gc_update_player_tokenmoney_not
     * @interface Iproto_gc_update_player_tokenmoney_not
     * @property {number} plyChairid proto_gc_update_player_tokenmoney_not plyChairid
     * @property {Array.<Iproto_player_itemInfo>|null} [itemInfo] proto_gc_update_player_tokenmoney_not itemInfo
     */

    /**
     * Constructs a new proto_gc_update_player_tokenmoney_not.
     * @exports proto_gc_update_player_tokenmoney_not
     * @classdesc Represents a proto_gc_update_player_tokenmoney_not.
     * @implements Iproto_gc_update_player_tokenmoney_not
     * @constructor
     * @param {Iproto_gc_update_player_tokenmoney_not=} [properties] Properties to set
     */
    function proto_gc_update_player_tokenmoney_not(properties) {
        this.itemInfo = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_update_player_tokenmoney_not plyChairid.
     * @member {number} plyChairid
     * @memberof proto_gc_update_player_tokenmoney_not
     * @instance
     */
    proto_gc_update_player_tokenmoney_not.prototype.plyChairid = 0;

    /**
     * proto_gc_update_player_tokenmoney_not itemInfo.
     * @member {Array.<Iproto_player_itemInfo>} itemInfo
     * @memberof proto_gc_update_player_tokenmoney_not
     * @instance
     */
    proto_gc_update_player_tokenmoney_not.prototype.itemInfo = $util.emptyArray;

    /**
     * Creates a new proto_gc_update_player_tokenmoney_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {Iproto_gc_update_player_tokenmoney_not=} [properties] Properties to set
     * @returns {proto_gc_update_player_tokenmoney_not} proto_gc_update_player_tokenmoney_not instance
     */
    proto_gc_update_player_tokenmoney_not.create = function create(properties) {
        return new proto_gc_update_player_tokenmoney_not(properties);
    };

    /**
     * Encodes the specified proto_gc_update_player_tokenmoney_not message. Does not implicitly {@link proto_gc_update_player_tokenmoney_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {Iproto_gc_update_player_tokenmoney_not} message proto_gc_update_player_tokenmoney_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_update_player_tokenmoney_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.plyChairid);
        if (message.itemInfo != null && message.itemInfo.length)
            for (var i = 0; i < message.itemInfo.length; ++i)
                $root.proto_player_itemInfo.encode(message.itemInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_update_player_tokenmoney_not message, length delimited. Does not implicitly {@link proto_gc_update_player_tokenmoney_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {Iproto_gc_update_player_tokenmoney_not} message proto_gc_update_player_tokenmoney_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_update_player_tokenmoney_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_update_player_tokenmoney_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_update_player_tokenmoney_not} proto_gc_update_player_tokenmoney_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_update_player_tokenmoney_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_update_player_tokenmoney_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plyChairid = reader.int32();
                break;
            case 2:
                if (!(message.itemInfo && message.itemInfo.length))
                    message.itemInfo = [];
                message.itemInfo.push($root.proto_player_itemInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("plyChairid"))
            throw $util.ProtocolError("missing required 'plyChairid'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_update_player_tokenmoney_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_update_player_tokenmoney_not} proto_gc_update_player_tokenmoney_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_update_player_tokenmoney_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_update_player_tokenmoney_not message.
     * @function verify
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_update_player_tokenmoney_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.plyChairid))
            return "plyChairid: integer expected";
        if (message.itemInfo != null && message.hasOwnProperty("itemInfo")) {
            if (!Array.isArray(message.itemInfo))
                return "itemInfo: array expected";
            for (var i = 0; i < message.itemInfo.length; ++i) {
                var error = $root.proto_player_itemInfo.verify(message.itemInfo[i]);
                if (error)
                    return "itemInfo." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_update_player_tokenmoney_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_update_player_tokenmoney_not} proto_gc_update_player_tokenmoney_not
     */
    proto_gc_update_player_tokenmoney_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_update_player_tokenmoney_not)
            return object;
        var message = new $root.proto_gc_update_player_tokenmoney_not();
        if (object.plyChairid != null)
            message.plyChairid = object.plyChairid | 0;
        if (object.itemInfo) {
            if (!Array.isArray(object.itemInfo))
                throw TypeError(".proto_gc_update_player_tokenmoney_not.itemInfo: array expected");
            message.itemInfo = [];
            for (var i = 0; i < object.itemInfo.length; ++i) {
                if (typeof object.itemInfo[i] !== "object")
                    throw TypeError(".proto_gc_update_player_tokenmoney_not.itemInfo: object expected");
                message.itemInfo[i] = $root.proto_player_itemInfo.fromObject(object.itemInfo[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_update_player_tokenmoney_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_update_player_tokenmoney_not
     * @static
     * @param {proto_gc_update_player_tokenmoney_not} message proto_gc_update_player_tokenmoney_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_update_player_tokenmoney_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.itemInfo = [];
        if (options.defaults)
            object.plyChairid = 0;
        if (message.plyChairid != null && message.hasOwnProperty("plyChairid"))
            object.plyChairid = message.plyChairid;
        if (message.itemInfo && message.itemInfo.length) {
            object.itemInfo = [];
            for (var j = 0; j < message.itemInfo.length; ++j)
                object.itemInfo[j] = $root.proto_player_itemInfo.toObject(message.itemInfo[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_update_player_tokenmoney_not to JSON.
     * @function toJSON
     * @memberof proto_gc_update_player_tokenmoney_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_update_player_tokenmoney_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_update_player_tokenmoney_not;
})();

$root.proto_player_itemInfo = (function() {

    /**
     * Properties of a proto_player_itemInfo.
     * @exports Iproto_player_itemInfo
     * @interface Iproto_player_itemInfo
     * @property {number} nItemIndex proto_player_itemInfo nItemIndex
     * @property {number} nItemNum proto_player_itemInfo nItemNum
     */

    /**
     * Constructs a new proto_player_itemInfo.
     * @exports proto_player_itemInfo
     * @classdesc Represents a proto_player_itemInfo.
     * @implements Iproto_player_itemInfo
     * @constructor
     * @param {Iproto_player_itemInfo=} [properties] Properties to set
     */
    function proto_player_itemInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_player_itemInfo nItemIndex.
     * @member {number} nItemIndex
     * @memberof proto_player_itemInfo
     * @instance
     */
    proto_player_itemInfo.prototype.nItemIndex = 0;

    /**
     * proto_player_itemInfo nItemNum.
     * @member {number} nItemNum
     * @memberof proto_player_itemInfo
     * @instance
     */
    proto_player_itemInfo.prototype.nItemNum = 0;

    /**
     * Creates a new proto_player_itemInfo instance using the specified properties.
     * @function create
     * @memberof proto_player_itemInfo
     * @static
     * @param {Iproto_player_itemInfo=} [properties] Properties to set
     * @returns {proto_player_itemInfo} proto_player_itemInfo instance
     */
    proto_player_itemInfo.create = function create(properties) {
        return new proto_player_itemInfo(properties);
    };

    /**
     * Encodes the specified proto_player_itemInfo message. Does not implicitly {@link proto_player_itemInfo.verify|verify} messages.
     * @function encode
     * @memberof proto_player_itemInfo
     * @static
     * @param {Iproto_player_itemInfo} message proto_player_itemInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_player_itemInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nItemIndex);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nItemNum);
        return writer;
    };

    /**
     * Encodes the specified proto_player_itemInfo message, length delimited. Does not implicitly {@link proto_player_itemInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_player_itemInfo
     * @static
     * @param {Iproto_player_itemInfo} message proto_player_itemInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_player_itemInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_player_itemInfo message from the specified reader or buffer.
     * @function decode
     * @memberof proto_player_itemInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_player_itemInfo} proto_player_itemInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_player_itemInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_player_itemInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nItemIndex = reader.int32();
                break;
            case 2:
                message.nItemNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nItemIndex"))
            throw $util.ProtocolError("missing required 'nItemIndex'", { instance: message });
        if (!message.hasOwnProperty("nItemNum"))
            throw $util.ProtocolError("missing required 'nItemNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_player_itemInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_player_itemInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_player_itemInfo} proto_player_itemInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_player_itemInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_player_itemInfo message.
     * @function verify
     * @memberof proto_player_itemInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_player_itemInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nItemIndex))
            return "nItemIndex: integer expected";
        if (!$util.isInteger(message.nItemNum))
            return "nItemNum: integer expected";
        return null;
    };

    /**
     * Creates a proto_player_itemInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_player_itemInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_player_itemInfo} proto_player_itemInfo
     */
    proto_player_itemInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_player_itemInfo)
            return object;
        var message = new $root.proto_player_itemInfo();
        if (object.nItemIndex != null)
            message.nItemIndex = object.nItemIndex | 0;
        if (object.nItemNum != null)
            message.nItemNum = object.nItemNum | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_player_itemInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_player_itemInfo
     * @static
     * @param {proto_player_itemInfo} message proto_player_itemInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_player_itemInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nItemIndex = 0;
            object.nItemNum = 0;
        }
        if (message.nItemIndex != null && message.hasOwnProperty("nItemIndex"))
            object.nItemIndex = message.nItemIndex;
        if (message.nItemNum != null && message.hasOwnProperty("nItemNum"))
            object.nItemNum = message.nItemNum;
        return object;
    };

    /**
     * Converts this proto_player_itemInfo to JSON.
     * @function toJSON
     * @memberof proto_player_itemInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_player_itemInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_player_itemInfo;
})();

$root.proto_gc_common_not = (function() {

    /**
     * Properties of a proto_gc_common_not.
     * @exports Iproto_gc_common_not
     * @interface Iproto_gc_common_not
     * @property {number} nOp proto_gc_common_not nOp
     * @property {number} cChairID proto_gc_common_not cChairID
     */

    /**
     * Constructs a new proto_gc_common_not.
     * @exports proto_gc_common_not
     * @classdesc Represents a proto_gc_common_not.
     * @implements Iproto_gc_common_not
     * @constructor
     * @param {Iproto_gc_common_not=} [properties] Properties to set
     */
    function proto_gc_common_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_common_not nOp.
     * @member {number} nOp
     * @memberof proto_gc_common_not
     * @instance
     */
    proto_gc_common_not.prototype.nOp = 0;

    /**
     * proto_gc_common_not cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_common_not
     * @instance
     */
    proto_gc_common_not.prototype.cChairID = 0;

    /**
     * Creates a new proto_gc_common_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_common_not
     * @static
     * @param {Iproto_gc_common_not=} [properties] Properties to set
     * @returns {proto_gc_common_not} proto_gc_common_not instance
     */
    proto_gc_common_not.create = function create(properties) {
        return new proto_gc_common_not(properties);
    };

    /**
     * Encodes the specified proto_gc_common_not message. Does not implicitly {@link proto_gc_common_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_common_not
     * @static
     * @param {Iproto_gc_common_not} message proto_gc_common_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_common_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nOp);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cChairID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_common_not message, length delimited. Does not implicitly {@link proto_gc_common_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_common_not
     * @static
     * @param {Iproto_gc_common_not} message proto_gc_common_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_common_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_common_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_common_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_common_not} proto_gc_common_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_common_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_common_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nOp = reader.int32();
                break;
            case 2:
                message.cChairID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nOp"))
            throw $util.ProtocolError("missing required 'nOp'", { instance: message });
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_common_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_common_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_common_not} proto_gc_common_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_common_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_common_not message.
     * @function verify
     * @memberof proto_gc_common_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_common_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nOp))
            return "nOp: integer expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_common_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_common_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_common_not} proto_gc_common_not
     */
    proto_gc_common_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_common_not)
            return object;
        var message = new $root.proto_gc_common_not();
        if (object.nOp != null)
            message.nOp = object.nOp | 0;
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_common_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_common_not
     * @static
     * @param {proto_gc_common_not} message proto_gc_common_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_common_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nOp = 0;
            object.cChairID = 0;
        }
        if (message.nOp != null && message.hasOwnProperty("nOp"))
            object.nOp = message.nOp;
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        return object;
    };

    /**
     * Converts this proto_gc_common_not to JSON.
     * @function toJSON
     * @memberof proto_gc_common_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_common_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_common_not;
})();

$root.proto_gc_complete_data_not = (function() {

    /**
     * Properties of a proto_gc_complete_data_not.
     * @exports Iproto_gc_complete_data_not
     * @interface Iproto_gc_complete_data_not
     * @property {number} nGameMoney proto_gc_complete_data_not nGameMoney
     * @property {number} nDouble proto_gc_complete_data_not nDouble
     * @property {number} cLord proto_gc_complete_data_not cLord
     * @property {Array.<Iproto_CCard>|null} [vecLordCards] proto_gc_complete_data_not vecLordCards
     * @property {Array.<Iproto_stUserData>|null} [vecData] proto_gc_complete_data_not vecData
     */

    /**
     * Constructs a new proto_gc_complete_data_not.
     * @exports proto_gc_complete_data_not
     * @classdesc Represents a proto_gc_complete_data_not.
     * @implements Iproto_gc_complete_data_not
     * @constructor
     * @param {Iproto_gc_complete_data_not=} [properties] Properties to set
     */
    function proto_gc_complete_data_not(properties) {
        this.vecLordCards = [];
        this.vecData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_complete_data_not nGameMoney.
     * @member {number} nGameMoney
     * @memberof proto_gc_complete_data_not
     * @instance
     */
    proto_gc_complete_data_not.prototype.nGameMoney = 0;

    /**
     * proto_gc_complete_data_not nDouble.
     * @member {number} nDouble
     * @memberof proto_gc_complete_data_not
     * @instance
     */
    proto_gc_complete_data_not.prototype.nDouble = 0;

    /**
     * proto_gc_complete_data_not cLord.
     * @member {number} cLord
     * @memberof proto_gc_complete_data_not
     * @instance
     */
    proto_gc_complete_data_not.prototype.cLord = 0;

    /**
     * proto_gc_complete_data_not vecLordCards.
     * @member {Array.<Iproto_CCard>} vecLordCards
     * @memberof proto_gc_complete_data_not
     * @instance
     */
    proto_gc_complete_data_not.prototype.vecLordCards = $util.emptyArray;

    /**
     * proto_gc_complete_data_not vecData.
     * @member {Array.<Iproto_stUserData>} vecData
     * @memberof proto_gc_complete_data_not
     * @instance
     */
    proto_gc_complete_data_not.prototype.vecData = $util.emptyArray;

    /**
     * Creates a new proto_gc_complete_data_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {Iproto_gc_complete_data_not=} [properties] Properties to set
     * @returns {proto_gc_complete_data_not} proto_gc_complete_data_not instance
     */
    proto_gc_complete_data_not.create = function create(properties) {
        return new proto_gc_complete_data_not(properties);
    };

    /**
     * Encodes the specified proto_gc_complete_data_not message. Does not implicitly {@link proto_gc_complete_data_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {Iproto_gc_complete_data_not} message proto_gc_complete_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_complete_data_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nGameMoney);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nDouble);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cLord);
        if (message.vecLordCards != null && message.vecLordCards.length)
            for (var i = 0; i < message.vecLordCards.length; ++i)
                $root.proto_CCard.encode(message.vecLordCards[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.vecData != null && message.vecData.length)
            for (var i = 0; i < message.vecData.length; ++i)
                $root.proto_stUserData.encode(message.vecData[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_complete_data_not message, length delimited. Does not implicitly {@link proto_gc_complete_data_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {Iproto_gc_complete_data_not} message proto_gc_complete_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_complete_data_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_complete_data_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_complete_data_not} proto_gc_complete_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_complete_data_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_complete_data_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nGameMoney = reader.int32();
                break;
            case 2:
                message.nDouble = reader.int32();
                break;
            case 3:
                message.cLord = reader.int32();
                break;
            case 4:
                if (!(message.vecLordCards && message.vecLordCards.length))
                    message.vecLordCards = [];
                message.vecLordCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.vecData && message.vecData.length))
                    message.vecData = [];
                message.vecData.push($root.proto_stUserData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nGameMoney"))
            throw $util.ProtocolError("missing required 'nGameMoney'", { instance: message });
        if (!message.hasOwnProperty("nDouble"))
            throw $util.ProtocolError("missing required 'nDouble'", { instance: message });
        if (!message.hasOwnProperty("cLord"))
            throw $util.ProtocolError("missing required 'cLord'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_complete_data_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_complete_data_not} proto_gc_complete_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_complete_data_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_complete_data_not message.
     * @function verify
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_complete_data_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nGameMoney))
            return "nGameMoney: integer expected";
        if (!$util.isInteger(message.nDouble))
            return "nDouble: integer expected";
        if (!$util.isInteger(message.cLord))
            return "cLord: integer expected";
        if (message.vecLordCards != null && message.hasOwnProperty("vecLordCards")) {
            if (!Array.isArray(message.vecLordCards))
                return "vecLordCards: array expected";
            for (var i = 0; i < message.vecLordCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecLordCards[i]);
                if (error)
                    return "vecLordCards." + error;
            }
        }
        if (message.vecData != null && message.hasOwnProperty("vecData")) {
            if (!Array.isArray(message.vecData))
                return "vecData: array expected";
            for (var i = 0; i < message.vecData.length; ++i) {
                var error = $root.proto_stUserData.verify(message.vecData[i]);
                if (error)
                    return "vecData." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_complete_data_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_complete_data_not} proto_gc_complete_data_not
     */
    proto_gc_complete_data_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_complete_data_not)
            return object;
        var message = new $root.proto_gc_complete_data_not();
        if (object.nGameMoney != null)
            message.nGameMoney = object.nGameMoney | 0;
        if (object.nDouble != null)
            message.nDouble = object.nDouble | 0;
        if (object.cLord != null)
            message.cLord = object.cLord | 0;
        if (object.vecLordCards) {
            if (!Array.isArray(object.vecLordCards))
                throw TypeError(".proto_gc_complete_data_not.vecLordCards: array expected");
            message.vecLordCards = [];
            for (var i = 0; i < object.vecLordCards.length; ++i) {
                if (typeof object.vecLordCards[i] !== "object")
                    throw TypeError(".proto_gc_complete_data_not.vecLordCards: object expected");
                message.vecLordCards[i] = $root.proto_CCard.fromObject(object.vecLordCards[i]);
            }
        }
        if (object.vecData) {
            if (!Array.isArray(object.vecData))
                throw TypeError(".proto_gc_complete_data_not.vecData: array expected");
            message.vecData = [];
            for (var i = 0; i < object.vecData.length; ++i) {
                if (typeof object.vecData[i] !== "object")
                    throw TypeError(".proto_gc_complete_data_not.vecData: object expected");
                message.vecData[i] = $root.proto_stUserData.fromObject(object.vecData[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_complete_data_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_complete_data_not
     * @static
     * @param {proto_gc_complete_data_not} message proto_gc_complete_data_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_complete_data_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecLordCards = [];
            object.vecData = [];
        }
        if (options.defaults) {
            object.nGameMoney = 0;
            object.nDouble = 0;
            object.cLord = 0;
        }
        if (message.nGameMoney != null && message.hasOwnProperty("nGameMoney"))
            object.nGameMoney = message.nGameMoney;
        if (message.nDouble != null && message.hasOwnProperty("nDouble"))
            object.nDouble = message.nDouble;
        if (message.cLord != null && message.hasOwnProperty("cLord"))
            object.cLord = message.cLord;
        if (message.vecLordCards && message.vecLordCards.length) {
            object.vecLordCards = [];
            for (var j = 0; j < message.vecLordCards.length; ++j)
                object.vecLordCards[j] = $root.proto_CCard.toObject(message.vecLordCards[j], options);
        }
        if (message.vecData && message.vecData.length) {
            object.vecData = [];
            for (var j = 0; j < message.vecData.length; ++j)
                object.vecData[j] = $root.proto_stUserData.toObject(message.vecData[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_complete_data_not to JSON.
     * @function toJSON
     * @memberof proto_gc_complete_data_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_complete_data_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_complete_data_not;
})();

$root.proto_sic_show_result_not = (function() {

    /**
     * Properties of a proto_sic_show_result_not.
     * @exports Iproto_sic_show_result_not
     * @interface Iproto_sic_show_result_not
     */

    /**
     * Constructs a new proto_sic_show_result_not.
     * @exports proto_sic_show_result_not
     * @classdesc Represents a proto_sic_show_result_not.
     * @implements Iproto_sic_show_result_not
     * @constructor
     * @param {Iproto_sic_show_result_not=} [properties] Properties to set
     */
    function proto_sic_show_result_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_sic_show_result_not instance using the specified properties.
     * @function create
     * @memberof proto_sic_show_result_not
     * @static
     * @param {Iproto_sic_show_result_not=} [properties] Properties to set
     * @returns {proto_sic_show_result_not} proto_sic_show_result_not instance
     */
    proto_sic_show_result_not.create = function create(properties) {
        return new proto_sic_show_result_not(properties);
    };

    /**
     * Encodes the specified proto_sic_show_result_not message. Does not implicitly {@link proto_sic_show_result_not.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_show_result_not
     * @static
     * @param {Iproto_sic_show_result_not} message proto_sic_show_result_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_show_result_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_show_result_not message, length delimited. Does not implicitly {@link proto_sic_show_result_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_show_result_not
     * @static
     * @param {Iproto_sic_show_result_not} message proto_sic_show_result_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_show_result_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_show_result_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_show_result_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_show_result_not} proto_sic_show_result_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_show_result_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_show_result_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_sic_show_result_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_show_result_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_show_result_not} proto_sic_show_result_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_show_result_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_show_result_not message.
     * @function verify
     * @memberof proto_sic_show_result_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_show_result_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_sic_show_result_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_show_result_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_show_result_not} proto_sic_show_result_not
     */
    proto_sic_show_result_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_show_result_not)
            return object;
        return new $root.proto_sic_show_result_not();
    };

    /**
     * Creates a plain object from a proto_sic_show_result_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_show_result_not
     * @static
     * @param {proto_sic_show_result_not} message proto_sic_show_result_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_show_result_not.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_sic_show_result_not to JSON.
     * @function toJSON
     * @memberof proto_sic_show_result_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_show_result_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_show_result_not;
})();

$root.proto_gc_get_redpackets_award_ack = (function() {

    /**
     * Properties of a proto_gc_get_redpackets_award_ack.
     * @exports Iproto_gc_get_redpackets_award_ack
     * @interface Iproto_gc_get_redpackets_award_ack
     * @property {number} ret proto_gc_get_redpackets_award_ack ret
     * @property {number} curRounds proto_gc_get_redpackets_award_ack curRounds
     * @property {number} limitRounds proto_gc_get_redpackets_award_ack limitRounds
     * @property {number} nAmount proto_gc_get_redpackets_award_ack nAmount
     * @property {number} cItemtype proto_gc_get_redpackets_award_ack cItemtype
     * @property {number} taskId proto_gc_get_redpackets_award_ack taskId
     * @property {Array.<Iproto_player_itemInfo>|null} [fakeItem] proto_gc_get_redpackets_award_ack fakeItem
     */

    /**
     * Constructs a new proto_gc_get_redpackets_award_ack.
     * @exports proto_gc_get_redpackets_award_ack
     * @classdesc Represents a proto_gc_get_redpackets_award_ack.
     * @implements Iproto_gc_get_redpackets_award_ack
     * @constructor
     * @param {Iproto_gc_get_redpackets_award_ack=} [properties] Properties to set
     */
    function proto_gc_get_redpackets_award_ack(properties) {
        this.fakeItem = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_get_redpackets_award_ack ret.
     * @member {number} ret
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.ret = 0;

    /**
     * proto_gc_get_redpackets_award_ack curRounds.
     * @member {number} curRounds
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.curRounds = 0;

    /**
     * proto_gc_get_redpackets_award_ack limitRounds.
     * @member {number} limitRounds
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.limitRounds = 0;

    /**
     * proto_gc_get_redpackets_award_ack nAmount.
     * @member {number} nAmount
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.nAmount = 0;

    /**
     * proto_gc_get_redpackets_award_ack cItemtype.
     * @member {number} cItemtype
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.cItemtype = 0;

    /**
     * proto_gc_get_redpackets_award_ack taskId.
     * @member {number} taskId
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.taskId = 0;

    /**
     * proto_gc_get_redpackets_award_ack fakeItem.
     * @member {Array.<Iproto_player_itemInfo>} fakeItem
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     */
    proto_gc_get_redpackets_award_ack.prototype.fakeItem = $util.emptyArray;

    /**
     * Creates a new proto_gc_get_redpackets_award_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {Iproto_gc_get_redpackets_award_ack=} [properties] Properties to set
     * @returns {proto_gc_get_redpackets_award_ack} proto_gc_get_redpackets_award_ack instance
     */
    proto_gc_get_redpackets_award_ack.create = function create(properties) {
        return new proto_gc_get_redpackets_award_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_get_redpackets_award_ack message. Does not implicitly {@link proto_gc_get_redpackets_award_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {Iproto_gc_get_redpackets_award_ack} message proto_gc_get_redpackets_award_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_redpackets_award_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.curRounds);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.limitRounds);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nAmount);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cItemtype);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.taskId);
        if (message.fakeItem != null && message.fakeItem.length)
            for (var i = 0; i < message.fakeItem.length; ++i)
                $root.proto_player_itemInfo.encode(message.fakeItem[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_get_redpackets_award_ack message, length delimited. Does not implicitly {@link proto_gc_get_redpackets_award_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {Iproto_gc_get_redpackets_award_ack} message proto_gc_get_redpackets_award_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_redpackets_award_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_get_redpackets_award_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_get_redpackets_award_ack} proto_gc_get_redpackets_award_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_redpackets_award_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_get_redpackets_award_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.curRounds = reader.int32();
                break;
            case 3:
                message.limitRounds = reader.int32();
                break;
            case 4:
                message.nAmount = reader.int32();
                break;
            case 5:
                message.cItemtype = reader.int32();
                break;
            case 6:
                message.taskId = reader.int32();
                break;
            case 7:
                if (!(message.fakeItem && message.fakeItem.length))
                    message.fakeItem = [];
                message.fakeItem.push($root.proto_player_itemInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("curRounds"))
            throw $util.ProtocolError("missing required 'curRounds'", { instance: message });
        if (!message.hasOwnProperty("limitRounds"))
            throw $util.ProtocolError("missing required 'limitRounds'", { instance: message });
        if (!message.hasOwnProperty("nAmount"))
            throw $util.ProtocolError("missing required 'nAmount'", { instance: message });
        if (!message.hasOwnProperty("cItemtype"))
            throw $util.ProtocolError("missing required 'cItemtype'", { instance: message });
        if (!message.hasOwnProperty("taskId"))
            throw $util.ProtocolError("missing required 'taskId'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_get_redpackets_award_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_get_redpackets_award_ack} proto_gc_get_redpackets_award_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_redpackets_award_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_get_redpackets_award_ack message.
     * @function verify
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_get_redpackets_award_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (!$util.isInteger(message.curRounds))
            return "curRounds: integer expected";
        if (!$util.isInteger(message.limitRounds))
            return "limitRounds: integer expected";
        if (!$util.isInteger(message.nAmount))
            return "nAmount: integer expected";
        if (!$util.isInteger(message.cItemtype))
            return "cItemtype: integer expected";
        if (!$util.isInteger(message.taskId))
            return "taskId: integer expected";
        if (message.fakeItem != null && message.hasOwnProperty("fakeItem")) {
            if (!Array.isArray(message.fakeItem))
                return "fakeItem: array expected";
            for (var i = 0; i < message.fakeItem.length; ++i) {
                var error = $root.proto_player_itemInfo.verify(message.fakeItem[i]);
                if (error)
                    return "fakeItem." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_get_redpackets_award_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_get_redpackets_award_ack} proto_gc_get_redpackets_award_ack
     */
    proto_gc_get_redpackets_award_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_get_redpackets_award_ack)
            return object;
        var message = new $root.proto_gc_get_redpackets_award_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.curRounds != null)
            message.curRounds = object.curRounds | 0;
        if (object.limitRounds != null)
            message.limitRounds = object.limitRounds | 0;
        if (object.nAmount != null)
            message.nAmount = object.nAmount | 0;
        if (object.cItemtype != null)
            message.cItemtype = object.cItemtype | 0;
        if (object.taskId != null)
            message.taskId = object.taskId | 0;
        if (object.fakeItem) {
            if (!Array.isArray(object.fakeItem))
                throw TypeError(".proto_gc_get_redpackets_award_ack.fakeItem: array expected");
            message.fakeItem = [];
            for (var i = 0; i < object.fakeItem.length; ++i) {
                if (typeof object.fakeItem[i] !== "object")
                    throw TypeError(".proto_gc_get_redpackets_award_ack.fakeItem: object expected");
                message.fakeItem[i] = $root.proto_player_itemInfo.fromObject(object.fakeItem[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_get_redpackets_award_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_get_redpackets_award_ack
     * @static
     * @param {proto_gc_get_redpackets_award_ack} message proto_gc_get_redpackets_award_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_get_redpackets_award_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.fakeItem = [];
        if (options.defaults) {
            object.ret = 0;
            object.curRounds = 0;
            object.limitRounds = 0;
            object.nAmount = 0;
            object.cItemtype = 0;
            object.taskId = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.curRounds != null && message.hasOwnProperty("curRounds"))
            object.curRounds = message.curRounds;
        if (message.limitRounds != null && message.hasOwnProperty("limitRounds"))
            object.limitRounds = message.limitRounds;
        if (message.nAmount != null && message.hasOwnProperty("nAmount"))
            object.nAmount = message.nAmount;
        if (message.cItemtype != null && message.hasOwnProperty("cItemtype"))
            object.cItemtype = message.cItemtype;
        if (message.taskId != null && message.hasOwnProperty("taskId"))
            object.taskId = message.taskId;
        if (message.fakeItem && message.fakeItem.length) {
            object.fakeItem = [];
            for (var j = 0; j < message.fakeItem.length; ++j)
                object.fakeItem[j] = $root.proto_player_itemInfo.toObject(message.fakeItem[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_get_redpackets_award_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_get_redpackets_award_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_get_redpackets_award_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_get_redpackets_award_ack;
})();

$root.proto_cg_get_redpackets_award_req = (function() {

    /**
     * Properties of a proto_cg_get_redpackets_award_req.
     * @exports Iproto_cg_get_redpackets_award_req
     * @interface Iproto_cg_get_redpackets_award_req
     * @property {number} type proto_cg_get_redpackets_award_req type
     */

    /**
     * Constructs a new proto_cg_get_redpackets_award_req.
     * @exports proto_cg_get_redpackets_award_req
     * @classdesc Represents a proto_cg_get_redpackets_award_req.
     * @implements Iproto_cg_get_redpackets_award_req
     * @constructor
     * @param {Iproto_cg_get_redpackets_award_req=} [properties] Properties to set
     */
    function proto_cg_get_redpackets_award_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_get_redpackets_award_req type.
     * @member {number} type
     * @memberof proto_cg_get_redpackets_award_req
     * @instance
     */
    proto_cg_get_redpackets_award_req.prototype.type = 0;

    /**
     * Creates a new proto_cg_get_redpackets_award_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {Iproto_cg_get_redpackets_award_req=} [properties] Properties to set
     * @returns {proto_cg_get_redpackets_award_req} proto_cg_get_redpackets_award_req instance
     */
    proto_cg_get_redpackets_award_req.create = function create(properties) {
        return new proto_cg_get_redpackets_award_req(properties);
    };

    /**
     * Encodes the specified proto_cg_get_redpackets_award_req message. Does not implicitly {@link proto_cg_get_redpackets_award_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {Iproto_cg_get_redpackets_award_req} message proto_cg_get_redpackets_award_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_redpackets_award_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_get_redpackets_award_req message, length delimited. Does not implicitly {@link proto_cg_get_redpackets_award_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {Iproto_cg_get_redpackets_award_req} message proto_cg_get_redpackets_award_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_redpackets_award_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_get_redpackets_award_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_get_redpackets_award_req} proto_cg_get_redpackets_award_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_redpackets_award_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_get_redpackets_award_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_get_redpackets_award_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_get_redpackets_award_req} proto_cg_get_redpackets_award_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_redpackets_award_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_get_redpackets_award_req message.
     * @function verify
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_get_redpackets_award_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.type))
            return "type: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_get_redpackets_award_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_get_redpackets_award_req} proto_cg_get_redpackets_award_req
     */
    proto_cg_get_redpackets_award_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_get_redpackets_award_req)
            return object;
        var message = new $root.proto_cg_get_redpackets_award_req();
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_get_redpackets_award_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_get_redpackets_award_req
     * @static
     * @param {proto_cg_get_redpackets_award_req} message proto_cg_get_redpackets_award_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_get_redpackets_award_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.type = 0;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };

    /**
     * Converts this proto_cg_get_redpackets_award_req to JSON.
     * @function toJSON
     * @memberof proto_cg_get_redpackets_award_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_get_redpackets_award_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_get_redpackets_award_req;
})();

$root.proto_gc_send_dizhu_not = (function() {

    /**
     * Properties of a proto_gc_send_dizhu_not.
     * @exports Iproto_gc_send_dizhu_not
     * @interface Iproto_gc_send_dizhu_not
     * @property {number} nGameMoney proto_gc_send_dizhu_not nGameMoney
     */

    /**
     * Constructs a new proto_gc_send_dizhu_not.
     * @exports proto_gc_send_dizhu_not
     * @classdesc Represents a proto_gc_send_dizhu_not.
     * @implements Iproto_gc_send_dizhu_not
     * @constructor
     * @param {Iproto_gc_send_dizhu_not=} [properties] Properties to set
     */
    function proto_gc_send_dizhu_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_send_dizhu_not nGameMoney.
     * @member {number} nGameMoney
     * @memberof proto_gc_send_dizhu_not
     * @instance
     */
    proto_gc_send_dizhu_not.prototype.nGameMoney = 0;

    /**
     * Creates a new proto_gc_send_dizhu_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {Iproto_gc_send_dizhu_not=} [properties] Properties to set
     * @returns {proto_gc_send_dizhu_not} proto_gc_send_dizhu_not instance
     */
    proto_gc_send_dizhu_not.create = function create(properties) {
        return new proto_gc_send_dizhu_not(properties);
    };

    /**
     * Encodes the specified proto_gc_send_dizhu_not message. Does not implicitly {@link proto_gc_send_dizhu_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {Iproto_gc_send_dizhu_not} message proto_gc_send_dizhu_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_send_dizhu_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nGameMoney);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_send_dizhu_not message, length delimited. Does not implicitly {@link proto_gc_send_dizhu_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {Iproto_gc_send_dizhu_not} message proto_gc_send_dizhu_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_send_dizhu_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_send_dizhu_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_send_dizhu_not} proto_gc_send_dizhu_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_send_dizhu_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_send_dizhu_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nGameMoney = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nGameMoney"))
            throw $util.ProtocolError("missing required 'nGameMoney'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_send_dizhu_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_send_dizhu_not} proto_gc_send_dizhu_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_send_dizhu_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_send_dizhu_not message.
     * @function verify
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_send_dizhu_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nGameMoney))
            return "nGameMoney: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_send_dizhu_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_send_dizhu_not} proto_gc_send_dizhu_not
     */
    proto_gc_send_dizhu_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_send_dizhu_not)
            return object;
        var message = new $root.proto_gc_send_dizhu_not();
        if (object.nGameMoney != null)
            message.nGameMoney = object.nGameMoney | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_send_dizhu_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_send_dizhu_not
     * @static
     * @param {proto_gc_send_dizhu_not} message proto_gc_send_dizhu_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_send_dizhu_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nGameMoney = 0;
        if (message.nGameMoney != null && message.hasOwnProperty("nGameMoney"))
            object.nGameMoney = message.nGameMoney;
        return object;
    };

    /**
     * Converts this proto_gc_send_dizhu_not to JSON.
     * @function toJSON
     * @memberof proto_gc_send_dizhu_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_send_dizhu_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_send_dizhu_not;
})();

$root.proto_gc_ju_count_not = (function() {

    /**
     * Properties of a proto_gc_ju_count_not.
     * @exports Iproto_gc_ju_count_not
     * @interface Iproto_gc_ju_count_not
     * @property {number} nJuCount proto_gc_ju_count_not nJuCount
     */

    /**
     * Constructs a new proto_gc_ju_count_not.
     * @exports proto_gc_ju_count_not
     * @classdesc Represents a proto_gc_ju_count_not.
     * @implements Iproto_gc_ju_count_not
     * @constructor
     * @param {Iproto_gc_ju_count_not=} [properties] Properties to set
     */
    function proto_gc_ju_count_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_ju_count_not nJuCount.
     * @member {number} nJuCount
     * @memberof proto_gc_ju_count_not
     * @instance
     */
    proto_gc_ju_count_not.prototype.nJuCount = 0;

    /**
     * Creates a new proto_gc_ju_count_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {Iproto_gc_ju_count_not=} [properties] Properties to set
     * @returns {proto_gc_ju_count_not} proto_gc_ju_count_not instance
     */
    proto_gc_ju_count_not.create = function create(properties) {
        return new proto_gc_ju_count_not(properties);
    };

    /**
     * Encodes the specified proto_gc_ju_count_not message. Does not implicitly {@link proto_gc_ju_count_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {Iproto_gc_ju_count_not} message proto_gc_ju_count_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_ju_count_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nJuCount);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_ju_count_not message, length delimited. Does not implicitly {@link proto_gc_ju_count_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {Iproto_gc_ju_count_not} message proto_gc_ju_count_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_ju_count_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_ju_count_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_ju_count_not} proto_gc_ju_count_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_ju_count_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_ju_count_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nJuCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nJuCount"))
            throw $util.ProtocolError("missing required 'nJuCount'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_ju_count_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_ju_count_not} proto_gc_ju_count_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_ju_count_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_ju_count_not message.
     * @function verify
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_ju_count_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nJuCount))
            return "nJuCount: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_ju_count_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_ju_count_not} proto_gc_ju_count_not
     */
    proto_gc_ju_count_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_ju_count_not)
            return object;
        var message = new $root.proto_gc_ju_count_not();
        if (object.nJuCount != null)
            message.nJuCount = object.nJuCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_ju_count_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_ju_count_not
     * @static
     * @param {proto_gc_ju_count_not} message proto_gc_ju_count_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_ju_count_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nJuCount = 0;
        if (message.nJuCount != null && message.hasOwnProperty("nJuCount"))
            object.nJuCount = message.nJuCount;
        return object;
    };

    /**
     * Converts this proto_gc_ju_count_not to JSON.
     * @function toJSON
     * @memberof proto_gc_ju_count_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_ju_count_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_ju_count_not;
})();

$root.proto_sic_bet_update_req = (function() {

    /**
     * Properties of a proto_sic_bet_update_req.
     * @exports Iproto_sic_bet_update_req
     * @interface Iproto_sic_bet_update_req
     * @property {number} nBetUpdateAckTag proto_sic_bet_update_req nBetUpdateAckTag
     */

    /**
     * Constructs a new proto_sic_bet_update_req.
     * @exports proto_sic_bet_update_req
     * @classdesc Represents a proto_sic_bet_update_req.
     * @implements Iproto_sic_bet_update_req
     * @constructor
     * @param {Iproto_sic_bet_update_req=} [properties] Properties to set
     */
    function proto_sic_bet_update_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_bet_update_req nBetUpdateAckTag.
     * @member {number} nBetUpdateAckTag
     * @memberof proto_sic_bet_update_req
     * @instance
     */
    proto_sic_bet_update_req.prototype.nBetUpdateAckTag = 0;

    /**
     * Creates a new proto_sic_bet_update_req instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {Iproto_sic_bet_update_req=} [properties] Properties to set
     * @returns {proto_sic_bet_update_req} proto_sic_bet_update_req instance
     */
    proto_sic_bet_update_req.create = function create(properties) {
        return new proto_sic_bet_update_req(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_update_req message. Does not implicitly {@link proto_sic_bet_update_req.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {Iproto_sic_bet_update_req} message proto_sic_bet_update_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_update_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nBetUpdateAckTag);
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_update_req message, length delimited. Does not implicitly {@link proto_sic_bet_update_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {Iproto_sic_bet_update_req} message proto_sic_bet_update_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_update_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_update_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_update_req} proto_sic_bet_update_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_update_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_update_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nBetUpdateAckTag = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nBetUpdateAckTag"))
            throw $util.ProtocolError("missing required 'nBetUpdateAckTag'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_bet_update_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_update_req} proto_sic_bet_update_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_update_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_update_req message.
     * @function verify
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_update_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nBetUpdateAckTag))
            return "nBetUpdateAckTag: integer expected";
        return null;
    };

    /**
     * Creates a proto_sic_bet_update_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_update_req} proto_sic_bet_update_req
     */
    proto_sic_bet_update_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_update_req)
            return object;
        var message = new $root.proto_sic_bet_update_req();
        if (object.nBetUpdateAckTag != null)
            message.nBetUpdateAckTag = object.nBetUpdateAckTag | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_bet_update_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_update_req
     * @static
     * @param {proto_sic_bet_update_req} message proto_sic_bet_update_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_update_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nBetUpdateAckTag = 0;
        if (message.nBetUpdateAckTag != null && message.hasOwnProperty("nBetUpdateAckTag"))
            object.nBetUpdateAckTag = message.nBetUpdateAckTag;
        return object;
    };

    /**
     * Converts this proto_sic_bet_update_req to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_update_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_update_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_update_req;
})();

$root.proto_gc_extra_double_score_not = (function() {

    /**
     * Properties of a proto_gc_extra_double_score_not.
     * @exports Iproto_gc_extra_double_score_not
     * @interface Iproto_gc_extra_double_score_not
     * @property {number} nDouble proto_gc_extra_double_score_not nDouble
     * @property {number} nLordDouble proto_gc_extra_double_score_not nLordDouble
     * @property {number} nSerialID proto_gc_extra_double_score_not nSerialID
     */

    /**
     * Constructs a new proto_gc_extra_double_score_not.
     * @exports proto_gc_extra_double_score_not
     * @classdesc Represents a proto_gc_extra_double_score_not.
     * @implements Iproto_gc_extra_double_score_not
     * @constructor
     * @param {Iproto_gc_extra_double_score_not=} [properties] Properties to set
     */
    function proto_gc_extra_double_score_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_extra_double_score_not nDouble.
     * @member {number} nDouble
     * @memberof proto_gc_extra_double_score_not
     * @instance
     */
    proto_gc_extra_double_score_not.prototype.nDouble = 0;

    /**
     * proto_gc_extra_double_score_not nLordDouble.
     * @member {number} nLordDouble
     * @memberof proto_gc_extra_double_score_not
     * @instance
     */
    proto_gc_extra_double_score_not.prototype.nLordDouble = 0;

    /**
     * proto_gc_extra_double_score_not nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_extra_double_score_not
     * @instance
     */
    proto_gc_extra_double_score_not.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_extra_double_score_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {Iproto_gc_extra_double_score_not=} [properties] Properties to set
     * @returns {proto_gc_extra_double_score_not} proto_gc_extra_double_score_not instance
     */
    proto_gc_extra_double_score_not.create = function create(properties) {
        return new proto_gc_extra_double_score_not(properties);
    };

    /**
     * Encodes the specified proto_gc_extra_double_score_not message. Does not implicitly {@link proto_gc_extra_double_score_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {Iproto_gc_extra_double_score_not} message proto_gc_extra_double_score_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_extra_double_score_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nDouble);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nLordDouble);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_extra_double_score_not message, length delimited. Does not implicitly {@link proto_gc_extra_double_score_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {Iproto_gc_extra_double_score_not} message proto_gc_extra_double_score_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_extra_double_score_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_extra_double_score_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_extra_double_score_not} proto_gc_extra_double_score_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_extra_double_score_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_extra_double_score_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nDouble = reader.int32();
                break;
            case 2:
                message.nLordDouble = reader.int32();
                break;
            case 3:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nDouble"))
            throw $util.ProtocolError("missing required 'nDouble'", { instance: message });
        if (!message.hasOwnProperty("nLordDouble"))
            throw $util.ProtocolError("missing required 'nLordDouble'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_extra_double_score_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_extra_double_score_not} proto_gc_extra_double_score_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_extra_double_score_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_extra_double_score_not message.
     * @function verify
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_extra_double_score_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nDouble))
            return "nDouble: integer expected";
        if (!$util.isInteger(message.nLordDouble))
            return "nLordDouble: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_extra_double_score_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_extra_double_score_not} proto_gc_extra_double_score_not
     */
    proto_gc_extra_double_score_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_extra_double_score_not)
            return object;
        var message = new $root.proto_gc_extra_double_score_not();
        if (object.nDouble != null)
            message.nDouble = object.nDouble | 0;
        if (object.nLordDouble != null)
            message.nLordDouble = object.nLordDouble | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_extra_double_score_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_extra_double_score_not
     * @static
     * @param {proto_gc_extra_double_score_not} message proto_gc_extra_double_score_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_extra_double_score_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nDouble = 0;
            object.nLordDouble = 0;
            object.nSerialID = 0;
        }
        if (message.nDouble != null && message.hasOwnProperty("nDouble"))
            object.nDouble = message.nDouble;
        if (message.nLordDouble != null && message.hasOwnProperty("nLordDouble"))
            object.nLordDouble = message.nLordDouble;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_extra_double_score_not to JSON.
     * @function toJSON
     * @memberof proto_gc_extra_double_score_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_extra_double_score_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_extra_double_score_not;
})();

$root.proto_gc_had_start_not = (function() {

    /**
     * Properties of a proto_gc_had_start_not.
     * @exports Iproto_gc_had_start_not
     * @interface Iproto_gc_had_start_not
     */

    /**
     * Constructs a new proto_gc_had_start_not.
     * @exports proto_gc_had_start_not
     * @classdesc Represents a proto_gc_had_start_not.
     * @implements Iproto_gc_had_start_not
     * @constructor
     * @param {Iproto_gc_had_start_not=} [properties] Properties to set
     */
    function proto_gc_had_start_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_gc_had_start_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_had_start_not
     * @static
     * @param {Iproto_gc_had_start_not=} [properties] Properties to set
     * @returns {proto_gc_had_start_not} proto_gc_had_start_not instance
     */
    proto_gc_had_start_not.create = function create(properties) {
        return new proto_gc_had_start_not(properties);
    };

    /**
     * Encodes the specified proto_gc_had_start_not message. Does not implicitly {@link proto_gc_had_start_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_had_start_not
     * @static
     * @param {Iproto_gc_had_start_not} message proto_gc_had_start_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_had_start_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_had_start_not message, length delimited. Does not implicitly {@link proto_gc_had_start_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_had_start_not
     * @static
     * @param {Iproto_gc_had_start_not} message proto_gc_had_start_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_had_start_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_had_start_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_had_start_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_had_start_not} proto_gc_had_start_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_had_start_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_had_start_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_had_start_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_had_start_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_had_start_not} proto_gc_had_start_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_had_start_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_had_start_not message.
     * @function verify
     * @memberof proto_gc_had_start_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_had_start_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_gc_had_start_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_had_start_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_had_start_not} proto_gc_had_start_not
     */
    proto_gc_had_start_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_had_start_not)
            return object;
        return new $root.proto_gc_had_start_not();
    };

    /**
     * Creates a plain object from a proto_gc_had_start_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_had_start_not
     * @static
     * @param {proto_gc_had_start_not} message proto_gc_had_start_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_had_start_not.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_gc_had_start_not to JSON.
     * @function toJSON
     * @memberof proto_gc_had_start_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_had_start_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_had_start_not;
})();

$root.proto_gc_pause_game_not = (function() {

    /**
     * Properties of a proto_gc_pause_game_not.
     * @exports Iproto_gc_pause_game_not
     * @interface Iproto_gc_pause_game_not
     * @property {number} nFlag proto_gc_pause_game_not nFlag
     * @property {number} nMinTime proto_gc_pause_game_not nMinTime
     * @property {number} nSecTime proto_gc_pause_game_not nSecTime
     * @property {number} cChairId proto_gc_pause_game_not cChairId
     * @property {string} sNickName proto_gc_pause_game_not sNickName
     */

    /**
     * Constructs a new proto_gc_pause_game_not.
     * @exports proto_gc_pause_game_not
     * @classdesc Represents a proto_gc_pause_game_not.
     * @implements Iproto_gc_pause_game_not
     * @constructor
     * @param {Iproto_gc_pause_game_not=} [properties] Properties to set
     */
    function proto_gc_pause_game_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_pause_game_not nFlag.
     * @member {number} nFlag
     * @memberof proto_gc_pause_game_not
     * @instance
     */
    proto_gc_pause_game_not.prototype.nFlag = 0;

    /**
     * proto_gc_pause_game_not nMinTime.
     * @member {number} nMinTime
     * @memberof proto_gc_pause_game_not
     * @instance
     */
    proto_gc_pause_game_not.prototype.nMinTime = 0;

    /**
     * proto_gc_pause_game_not nSecTime.
     * @member {number} nSecTime
     * @memberof proto_gc_pause_game_not
     * @instance
     */
    proto_gc_pause_game_not.prototype.nSecTime = 0;

    /**
     * proto_gc_pause_game_not cChairId.
     * @member {number} cChairId
     * @memberof proto_gc_pause_game_not
     * @instance
     */
    proto_gc_pause_game_not.prototype.cChairId = 0;

    /**
     * proto_gc_pause_game_not sNickName.
     * @member {string} sNickName
     * @memberof proto_gc_pause_game_not
     * @instance
     */
    proto_gc_pause_game_not.prototype.sNickName = "";

    /**
     * Creates a new proto_gc_pause_game_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {Iproto_gc_pause_game_not=} [properties] Properties to set
     * @returns {proto_gc_pause_game_not} proto_gc_pause_game_not instance
     */
    proto_gc_pause_game_not.create = function create(properties) {
        return new proto_gc_pause_game_not(properties);
    };

    /**
     * Encodes the specified proto_gc_pause_game_not message. Does not implicitly {@link proto_gc_pause_game_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {Iproto_gc_pause_game_not} message proto_gc_pause_game_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_pause_game_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nFlag);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nMinTime);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nSecTime);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cChairId);
        writer.uint32(/* id 5, wireType 2 =*/42).string(message.sNickName);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_pause_game_not message, length delimited. Does not implicitly {@link proto_gc_pause_game_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {Iproto_gc_pause_game_not} message proto_gc_pause_game_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_pause_game_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_pause_game_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_pause_game_not} proto_gc_pause_game_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_pause_game_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_pause_game_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nFlag = reader.int32();
                break;
            case 2:
                message.nMinTime = reader.int32();
                break;
            case 3:
                message.nSecTime = reader.int32();
                break;
            case 4:
                message.cChairId = reader.int32();
                break;
            case 5:
                message.sNickName = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nFlag"))
            throw $util.ProtocolError("missing required 'nFlag'", { instance: message });
        if (!message.hasOwnProperty("nMinTime"))
            throw $util.ProtocolError("missing required 'nMinTime'", { instance: message });
        if (!message.hasOwnProperty("nSecTime"))
            throw $util.ProtocolError("missing required 'nSecTime'", { instance: message });
        if (!message.hasOwnProperty("cChairId"))
            throw $util.ProtocolError("missing required 'cChairId'", { instance: message });
        if (!message.hasOwnProperty("sNickName"))
            throw $util.ProtocolError("missing required 'sNickName'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_pause_game_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_pause_game_not} proto_gc_pause_game_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_pause_game_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_pause_game_not message.
     * @function verify
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_pause_game_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nFlag))
            return "nFlag: integer expected";
        if (!$util.isInteger(message.nMinTime))
            return "nMinTime: integer expected";
        if (!$util.isInteger(message.nSecTime))
            return "nSecTime: integer expected";
        if (!$util.isInteger(message.cChairId))
            return "cChairId: integer expected";
        if (!$util.isString(message.sNickName))
            return "sNickName: string expected";
        return null;
    };

    /**
     * Creates a proto_gc_pause_game_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_pause_game_not} proto_gc_pause_game_not
     */
    proto_gc_pause_game_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_pause_game_not)
            return object;
        var message = new $root.proto_gc_pause_game_not();
        if (object.nFlag != null)
            message.nFlag = object.nFlag | 0;
        if (object.nMinTime != null)
            message.nMinTime = object.nMinTime | 0;
        if (object.nSecTime != null)
            message.nSecTime = object.nSecTime | 0;
        if (object.cChairId != null)
            message.cChairId = object.cChairId | 0;
        if (object.sNickName != null)
            message.sNickName = String(object.sNickName);
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_pause_game_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_pause_game_not
     * @static
     * @param {proto_gc_pause_game_not} message proto_gc_pause_game_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_pause_game_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nFlag = 0;
            object.nMinTime = 0;
            object.nSecTime = 0;
            object.cChairId = 0;
            object.sNickName = "";
        }
        if (message.nFlag != null && message.hasOwnProperty("nFlag"))
            object.nFlag = message.nFlag;
        if (message.nMinTime != null && message.hasOwnProperty("nMinTime"))
            object.nMinTime = message.nMinTime;
        if (message.nSecTime != null && message.hasOwnProperty("nSecTime"))
            object.nSecTime = message.nSecTime;
        if (message.cChairId != null && message.hasOwnProperty("cChairId"))
            object.cChairId = message.cChairId;
        if (message.sNickName != null && message.hasOwnProperty("sNickName"))
            object.sNickName = message.sNickName;
        return object;
    };

    /**
     * Converts this proto_gc_pause_game_not to JSON.
     * @function toJSON
     * @memberof proto_gc_pause_game_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_pause_game_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_pause_game_not;
})();

$root.proto_gc_private_room_result_not = (function() {

    /**
     * Properties of a proto_gc_private_room_result_not.
     * @exports Iproto_gc_private_room_result_not
     * @interface Iproto_gc_private_room_result_not
     * @property {number} ret proto_gc_private_room_result_not ret
     * @property {Array.<Iproto_GameStatisc>|null} [vecGameStatiscs] proto_gc_private_room_result_not vecGameStatiscs
     */

    /**
     * Constructs a new proto_gc_private_room_result_not.
     * @exports proto_gc_private_room_result_not
     * @classdesc Represents a proto_gc_private_room_result_not.
     * @implements Iproto_gc_private_room_result_not
     * @constructor
     * @param {Iproto_gc_private_room_result_not=} [properties] Properties to set
     */
    function proto_gc_private_room_result_not(properties) {
        this.vecGameStatiscs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_private_room_result_not ret.
     * @member {number} ret
     * @memberof proto_gc_private_room_result_not
     * @instance
     */
    proto_gc_private_room_result_not.prototype.ret = 0;

    /**
     * proto_gc_private_room_result_not vecGameStatiscs.
     * @member {Array.<Iproto_GameStatisc>} vecGameStatiscs
     * @memberof proto_gc_private_room_result_not
     * @instance
     */
    proto_gc_private_room_result_not.prototype.vecGameStatiscs = $util.emptyArray;

    /**
     * Creates a new proto_gc_private_room_result_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {Iproto_gc_private_room_result_not=} [properties] Properties to set
     * @returns {proto_gc_private_room_result_not} proto_gc_private_room_result_not instance
     */
    proto_gc_private_room_result_not.create = function create(properties) {
        return new proto_gc_private_room_result_not(properties);
    };

    /**
     * Encodes the specified proto_gc_private_room_result_not message. Does not implicitly {@link proto_gc_private_room_result_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {Iproto_gc_private_room_result_not} message proto_gc_private_room_result_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_private_room_result_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        if (message.vecGameStatiscs != null && message.vecGameStatiscs.length)
            for (var i = 0; i < message.vecGameStatiscs.length; ++i)
                $root.proto_GameStatisc.encode(message.vecGameStatiscs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_private_room_result_not message, length delimited. Does not implicitly {@link proto_gc_private_room_result_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {Iproto_gc_private_room_result_not} message proto_gc_private_room_result_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_private_room_result_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_private_room_result_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_private_room_result_not} proto_gc_private_room_result_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_private_room_result_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_private_room_result_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                if (!(message.vecGameStatiscs && message.vecGameStatiscs.length))
                    message.vecGameStatiscs = [];
                message.vecGameStatiscs.push($root.proto_GameStatisc.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_private_room_result_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_private_room_result_not} proto_gc_private_room_result_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_private_room_result_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_private_room_result_not message.
     * @function verify
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_private_room_result_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (message.vecGameStatiscs != null && message.hasOwnProperty("vecGameStatiscs")) {
            if (!Array.isArray(message.vecGameStatiscs))
                return "vecGameStatiscs: array expected";
            for (var i = 0; i < message.vecGameStatiscs.length; ++i) {
                var error = $root.proto_GameStatisc.verify(message.vecGameStatiscs[i]);
                if (error)
                    return "vecGameStatiscs." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_private_room_result_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_private_room_result_not} proto_gc_private_room_result_not
     */
    proto_gc_private_room_result_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_private_room_result_not)
            return object;
        var message = new $root.proto_gc_private_room_result_not();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.vecGameStatiscs) {
            if (!Array.isArray(object.vecGameStatiscs))
                throw TypeError(".proto_gc_private_room_result_not.vecGameStatiscs: array expected");
            message.vecGameStatiscs = [];
            for (var i = 0; i < object.vecGameStatiscs.length; ++i) {
                if (typeof object.vecGameStatiscs[i] !== "object")
                    throw TypeError(".proto_gc_private_room_result_not.vecGameStatiscs: object expected");
                message.vecGameStatiscs[i] = $root.proto_GameStatisc.fromObject(object.vecGameStatiscs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_private_room_result_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_private_room_result_not
     * @static
     * @param {proto_gc_private_room_result_not} message proto_gc_private_room_result_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_private_room_result_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecGameStatiscs = [];
        if (options.defaults)
            object.ret = 0;
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.vecGameStatiscs && message.vecGameStatiscs.length) {
            object.vecGameStatiscs = [];
            for (var j = 0; j < message.vecGameStatiscs.length; ++j)
                object.vecGameStatiscs[j] = $root.proto_GameStatisc.toObject(message.vecGameStatiscs[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_private_room_result_not to JSON.
     * @function toJSON
     * @memberof proto_gc_private_room_result_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_private_room_result_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_private_room_result_not;
})();

$root.proto_gc_get_card_ack = (function() {

    /**
     * Properties of a proto_gc_get_card_ack.
     * @exports Iproto_gc_get_card_ack
     * @interface Iproto_gc_get_card_ack
     * @property {number} num proto_gc_get_card_ack num
     * @property {Array.<Iproto_CCard>|null} [vecCards0] proto_gc_get_card_ack vecCards0
     * @property {Array.<Iproto_CCard>|null} [vecCards1] proto_gc_get_card_ack vecCards1
     * @property {Array.<Iproto_CCard>|null} [vecCards2] proto_gc_get_card_ack vecCards2
     */

    /**
     * Constructs a new proto_gc_get_card_ack.
     * @exports proto_gc_get_card_ack
     * @classdesc Represents a proto_gc_get_card_ack.
     * @implements Iproto_gc_get_card_ack
     * @constructor
     * @param {Iproto_gc_get_card_ack=} [properties] Properties to set
     */
    function proto_gc_get_card_ack(properties) {
        this.vecCards0 = [];
        this.vecCards1 = [];
        this.vecCards2 = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_get_card_ack num.
     * @member {number} num
     * @memberof proto_gc_get_card_ack
     * @instance
     */
    proto_gc_get_card_ack.prototype.num = 0;

    /**
     * proto_gc_get_card_ack vecCards0.
     * @member {Array.<Iproto_CCard>} vecCards0
     * @memberof proto_gc_get_card_ack
     * @instance
     */
    proto_gc_get_card_ack.prototype.vecCards0 = $util.emptyArray;

    /**
     * proto_gc_get_card_ack vecCards1.
     * @member {Array.<Iproto_CCard>} vecCards1
     * @memberof proto_gc_get_card_ack
     * @instance
     */
    proto_gc_get_card_ack.prototype.vecCards1 = $util.emptyArray;

    /**
     * proto_gc_get_card_ack vecCards2.
     * @member {Array.<Iproto_CCard>} vecCards2
     * @memberof proto_gc_get_card_ack
     * @instance
     */
    proto_gc_get_card_ack.prototype.vecCards2 = $util.emptyArray;

    /**
     * Creates a new proto_gc_get_card_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {Iproto_gc_get_card_ack=} [properties] Properties to set
     * @returns {proto_gc_get_card_ack} proto_gc_get_card_ack instance
     */
    proto_gc_get_card_ack.create = function create(properties) {
        return new proto_gc_get_card_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_get_card_ack message. Does not implicitly {@link proto_gc_get_card_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {Iproto_gc_get_card_ack} message proto_gc_get_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_card_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.num);
        if (message.vecCards0 != null && message.vecCards0.length)
            for (var i = 0; i < message.vecCards0.length; ++i)
                $root.proto_CCard.encode(message.vecCards0[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.vecCards1 != null && message.vecCards1.length)
            for (var i = 0; i < message.vecCards1.length; ++i)
                $root.proto_CCard.encode(message.vecCards1[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.vecCards2 != null && message.vecCards2.length)
            for (var i = 0; i < message.vecCards2.length; ++i)
                $root.proto_CCard.encode(message.vecCards2[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_get_card_ack message, length delimited. Does not implicitly {@link proto_gc_get_card_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {Iproto_gc_get_card_ack} message proto_gc_get_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_card_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_get_card_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_get_card_ack} proto_gc_get_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_card_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_get_card_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.num = reader.int32();
                break;
            case 2:
                if (!(message.vecCards0 && message.vecCards0.length))
                    message.vecCards0 = [];
                message.vecCards0.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.vecCards1 && message.vecCards1.length))
                    message.vecCards1 = [];
                message.vecCards1.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 4:
                if (!(message.vecCards2 && message.vecCards2.length))
                    message.vecCards2 = [];
                message.vecCards2.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("num"))
            throw $util.ProtocolError("missing required 'num'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_get_card_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_get_card_ack} proto_gc_get_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_card_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_get_card_ack message.
     * @function verify
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_get_card_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.num))
            return "num: integer expected";
        if (message.vecCards0 != null && message.hasOwnProperty("vecCards0")) {
            if (!Array.isArray(message.vecCards0))
                return "vecCards0: array expected";
            for (var i = 0; i < message.vecCards0.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards0[i]);
                if (error)
                    return "vecCards0." + error;
            }
        }
        if (message.vecCards1 != null && message.hasOwnProperty("vecCards1")) {
            if (!Array.isArray(message.vecCards1))
                return "vecCards1: array expected";
            for (var i = 0; i < message.vecCards1.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards1[i]);
                if (error)
                    return "vecCards1." + error;
            }
        }
        if (message.vecCards2 != null && message.hasOwnProperty("vecCards2")) {
            if (!Array.isArray(message.vecCards2))
                return "vecCards2: array expected";
            for (var i = 0; i < message.vecCards2.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards2[i]);
                if (error)
                    return "vecCards2." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_get_card_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_get_card_ack} proto_gc_get_card_ack
     */
    proto_gc_get_card_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_get_card_ack)
            return object;
        var message = new $root.proto_gc_get_card_ack();
        if (object.num != null)
            message.num = object.num | 0;
        if (object.vecCards0) {
            if (!Array.isArray(object.vecCards0))
                throw TypeError(".proto_gc_get_card_ack.vecCards0: array expected");
            message.vecCards0 = [];
            for (var i = 0; i < object.vecCards0.length; ++i) {
                if (typeof object.vecCards0[i] !== "object")
                    throw TypeError(".proto_gc_get_card_ack.vecCards0: object expected");
                message.vecCards0[i] = $root.proto_CCard.fromObject(object.vecCards0[i]);
            }
        }
        if (object.vecCards1) {
            if (!Array.isArray(object.vecCards1))
                throw TypeError(".proto_gc_get_card_ack.vecCards1: array expected");
            message.vecCards1 = [];
            for (var i = 0; i < object.vecCards1.length; ++i) {
                if (typeof object.vecCards1[i] !== "object")
                    throw TypeError(".proto_gc_get_card_ack.vecCards1: object expected");
                message.vecCards1[i] = $root.proto_CCard.fromObject(object.vecCards1[i]);
            }
        }
        if (object.vecCards2) {
            if (!Array.isArray(object.vecCards2))
                throw TypeError(".proto_gc_get_card_ack.vecCards2: array expected");
            message.vecCards2 = [];
            for (var i = 0; i < object.vecCards2.length; ++i) {
                if (typeof object.vecCards2[i] !== "object")
                    throw TypeError(".proto_gc_get_card_ack.vecCards2: object expected");
                message.vecCards2[i] = $root.proto_CCard.fromObject(object.vecCards2[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_get_card_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_get_card_ack
     * @static
     * @param {proto_gc_get_card_ack} message proto_gc_get_card_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_get_card_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecCards0 = [];
            object.vecCards1 = [];
            object.vecCards2 = [];
        }
        if (options.defaults)
            object.num = 0;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        if (message.vecCards0 && message.vecCards0.length) {
            object.vecCards0 = [];
            for (var j = 0; j < message.vecCards0.length; ++j)
                object.vecCards0[j] = $root.proto_CCard.toObject(message.vecCards0[j], options);
        }
        if (message.vecCards1 && message.vecCards1.length) {
            object.vecCards1 = [];
            for (var j = 0; j < message.vecCards1.length; ++j)
                object.vecCards1[j] = $root.proto_CCard.toObject(message.vecCards1[j], options);
        }
        if (message.vecCards2 && message.vecCards2.length) {
            object.vecCards2 = [];
            for (var j = 0; j < message.vecCards2.length; ++j)
                object.vecCards2[j] = $root.proto_CCard.toObject(message.vecCards2[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_get_card_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_get_card_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_get_card_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_get_card_ack;
})();

$root.proto_cg_private_room_result_req = (function() {

    /**
     * Properties of a proto_cg_private_room_result_req.
     * @exports Iproto_cg_private_room_result_req
     * @interface Iproto_cg_private_room_result_req
     */

    /**
     * Constructs a new proto_cg_private_room_result_req.
     * @exports proto_cg_private_room_result_req
     * @classdesc Represents a proto_cg_private_room_result_req.
     * @implements Iproto_cg_private_room_result_req
     * @constructor
     * @param {Iproto_cg_private_room_result_req=} [properties] Properties to set
     */
    function proto_cg_private_room_result_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_private_room_result_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {Iproto_cg_private_room_result_req=} [properties] Properties to set
     * @returns {proto_cg_private_room_result_req} proto_cg_private_room_result_req instance
     */
    proto_cg_private_room_result_req.create = function create(properties) {
        return new proto_cg_private_room_result_req(properties);
    };

    /**
     * Encodes the specified proto_cg_private_room_result_req message. Does not implicitly {@link proto_cg_private_room_result_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {Iproto_cg_private_room_result_req} message proto_cg_private_room_result_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_private_room_result_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_private_room_result_req message, length delimited. Does not implicitly {@link proto_cg_private_room_result_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {Iproto_cg_private_room_result_req} message proto_cg_private_room_result_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_private_room_result_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_private_room_result_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_private_room_result_req} proto_cg_private_room_result_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_private_room_result_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_private_room_result_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_private_room_result_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_private_room_result_req} proto_cg_private_room_result_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_private_room_result_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_private_room_result_req message.
     * @function verify
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_private_room_result_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_private_room_result_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_private_room_result_req} proto_cg_private_room_result_req
     */
    proto_cg_private_room_result_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_private_room_result_req)
            return object;
        return new $root.proto_cg_private_room_result_req();
    };

    /**
     * Creates a plain object from a proto_cg_private_room_result_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_private_room_result_req
     * @static
     * @param {proto_cg_private_room_result_req} message proto_cg_private_room_result_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_private_room_result_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_private_room_result_req to JSON.
     * @function toJSON
     * @memberof proto_cg_private_room_result_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_private_room_result_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_private_room_result_req;
})();

$root.proto_GameStatisc = (function() {

    /**
     * Properties of a proto_GameStatisc.
     * @exports Iproto_GameStatisc
     * @interface Iproto_GameStatisc
     * @property {number} cChairID proto_GameStatisc cChairID
     * @property {number} nCallTimes proto_GameStatisc nCallTimes
     * @property {number} nLordTimes proto_GameStatisc nLordTimes
     * @property {number} nWinTimes proto_GameStatisc nWinTimes
     * @property {number|Long} nZhanJi proto_GameStatisc nZhanJi
     */

    /**
     * Constructs a new proto_GameStatisc.
     * @exports proto_GameStatisc
     * @classdesc Represents a proto_GameStatisc.
     * @implements Iproto_GameStatisc
     * @constructor
     * @param {Iproto_GameStatisc=} [properties] Properties to set
     */
    function proto_GameStatisc(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_GameStatisc cChairID.
     * @member {number} cChairID
     * @memberof proto_GameStatisc
     * @instance
     */
    proto_GameStatisc.prototype.cChairID = 0;

    /**
     * proto_GameStatisc nCallTimes.
     * @member {number} nCallTimes
     * @memberof proto_GameStatisc
     * @instance
     */
    proto_GameStatisc.prototype.nCallTimes = 0;

    /**
     * proto_GameStatisc nLordTimes.
     * @member {number} nLordTimes
     * @memberof proto_GameStatisc
     * @instance
     */
    proto_GameStatisc.prototype.nLordTimes = 0;

    /**
     * proto_GameStatisc nWinTimes.
     * @member {number} nWinTimes
     * @memberof proto_GameStatisc
     * @instance
     */
    proto_GameStatisc.prototype.nWinTimes = 0;

    /**
     * proto_GameStatisc nZhanJi.
     * @member {number|Long} nZhanJi
     * @memberof proto_GameStatisc
     * @instance
     */
    proto_GameStatisc.prototype.nZhanJi = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new proto_GameStatisc instance using the specified properties.
     * @function create
     * @memberof proto_GameStatisc
     * @static
     * @param {Iproto_GameStatisc=} [properties] Properties to set
     * @returns {proto_GameStatisc} proto_GameStatisc instance
     */
    proto_GameStatisc.create = function create(properties) {
        return new proto_GameStatisc(properties);
    };

    /**
     * Encodes the specified proto_GameStatisc message. Does not implicitly {@link proto_GameStatisc.verify|verify} messages.
     * @function encode
     * @memberof proto_GameStatisc
     * @static
     * @param {Iproto_GameStatisc} message proto_GameStatisc message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_GameStatisc.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nCallTimes);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nLordTimes);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nWinTimes);
        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.nZhanJi);
        return writer;
    };

    /**
     * Encodes the specified proto_GameStatisc message, length delimited. Does not implicitly {@link proto_GameStatisc.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_GameStatisc
     * @static
     * @param {Iproto_GameStatisc} message proto_GameStatisc message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_GameStatisc.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_GameStatisc message from the specified reader or buffer.
     * @function decode
     * @memberof proto_GameStatisc
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_GameStatisc} proto_GameStatisc
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_GameStatisc.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_GameStatisc();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                message.nCallTimes = reader.int32();
                break;
            case 3:
                message.nLordTimes = reader.int32();
                break;
            case 4:
                message.nWinTimes = reader.int32();
                break;
            case 5:
                message.nZhanJi = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        if (!message.hasOwnProperty("nCallTimes"))
            throw $util.ProtocolError("missing required 'nCallTimes'", { instance: message });
        if (!message.hasOwnProperty("nLordTimes"))
            throw $util.ProtocolError("missing required 'nLordTimes'", { instance: message });
        if (!message.hasOwnProperty("nWinTimes"))
            throw $util.ProtocolError("missing required 'nWinTimes'", { instance: message });
        if (!message.hasOwnProperty("nZhanJi"))
            throw $util.ProtocolError("missing required 'nZhanJi'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_GameStatisc message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_GameStatisc
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_GameStatisc} proto_GameStatisc
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_GameStatisc.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_GameStatisc message.
     * @function verify
     * @memberof proto_GameStatisc
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_GameStatisc.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (!$util.isInteger(message.nCallTimes))
            return "nCallTimes: integer expected";
        if (!$util.isInteger(message.nLordTimes))
            return "nLordTimes: integer expected";
        if (!$util.isInteger(message.nWinTimes))
            return "nWinTimes: integer expected";
        if (!$util.isInteger(message.nZhanJi) && !(message.nZhanJi && $util.isInteger(message.nZhanJi.low) && $util.isInteger(message.nZhanJi.high)))
            return "nZhanJi: integer|Long expected";
        return null;
    };

    /**
     * Creates a proto_GameStatisc message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_GameStatisc
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_GameStatisc} proto_GameStatisc
     */
    proto_GameStatisc.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_GameStatisc)
            return object;
        var message = new $root.proto_GameStatisc();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.nCallTimes != null)
            message.nCallTimes = object.nCallTimes | 0;
        if (object.nLordTimes != null)
            message.nLordTimes = object.nLordTimes | 0;
        if (object.nWinTimes != null)
            message.nWinTimes = object.nWinTimes | 0;
        if (object.nZhanJi != null)
            if ($util.Long)
                (message.nZhanJi = $util.Long.fromValue(object.nZhanJi)).unsigned = false;
            else if (typeof object.nZhanJi === "string")
                message.nZhanJi = parseInt(object.nZhanJi, 10);
            else if (typeof object.nZhanJi === "number")
                message.nZhanJi = object.nZhanJi;
            else if (typeof object.nZhanJi === "object")
                message.nZhanJi = new $util.LongBits(object.nZhanJi.low >>> 0, object.nZhanJi.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a proto_GameStatisc message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_GameStatisc
     * @static
     * @param {proto_GameStatisc} message proto_GameStatisc
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_GameStatisc.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cChairID = 0;
            object.nCallTimes = 0;
            object.nLordTimes = 0;
            object.nWinTimes = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nZhanJi = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nZhanJi = options.longs === String ? "0" : 0;
        }
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.nCallTimes != null && message.hasOwnProperty("nCallTimes"))
            object.nCallTimes = message.nCallTimes;
        if (message.nLordTimes != null && message.hasOwnProperty("nLordTimes"))
            object.nLordTimes = message.nLordTimes;
        if (message.nWinTimes != null && message.hasOwnProperty("nWinTimes"))
            object.nWinTimes = message.nWinTimes;
        if (message.nZhanJi != null && message.hasOwnProperty("nZhanJi"))
            if (typeof message.nZhanJi === "number")
                object.nZhanJi = options.longs === String ? String(message.nZhanJi) : message.nZhanJi;
            else
                object.nZhanJi = options.longs === String ? $util.Long.prototype.toString.call(message.nZhanJi) : options.longs === Number ? new $util.LongBits(message.nZhanJi.low >>> 0, message.nZhanJi.high >>> 0).toNumber() : message.nZhanJi;
        return object;
    };

    /**
     * Converts this proto_GameStatisc to JSON.
     * @function toJSON
     * @memberof proto_GameStatisc
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_GameStatisc.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_GameStatisc;
})();

$root.proto_gc_two_show_card_not = (function() {

    /**
     * Properties of a proto_gc_two_show_card_not.
     * @exports Iproto_gc_two_show_card_not
     * @interface Iproto_gc_two_show_card_not
     * @property {number} cChairID proto_gc_two_show_card_not cChairID
     * @property {number} nLordPos proto_gc_two_show_card_not nLordPos
     * @property {Iproto_CCard} cLordCard proto_gc_two_show_card_not cLordCard
     */

    /**
     * Constructs a new proto_gc_two_show_card_not.
     * @exports proto_gc_two_show_card_not
     * @classdesc Represents a proto_gc_two_show_card_not.
     * @implements Iproto_gc_two_show_card_not
     * @constructor
     * @param {Iproto_gc_two_show_card_not=} [properties] Properties to set
     */
    function proto_gc_two_show_card_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_two_show_card_not cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_two_show_card_not
     * @instance
     */
    proto_gc_two_show_card_not.prototype.cChairID = 0;

    /**
     * proto_gc_two_show_card_not nLordPos.
     * @member {number} nLordPos
     * @memberof proto_gc_two_show_card_not
     * @instance
     */
    proto_gc_two_show_card_not.prototype.nLordPos = 0;

    /**
     * proto_gc_two_show_card_not cLordCard.
     * @member {Iproto_CCard} cLordCard
     * @memberof proto_gc_two_show_card_not
     * @instance
     */
    proto_gc_two_show_card_not.prototype.cLordCard = null;

    /**
     * Creates a new proto_gc_two_show_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {Iproto_gc_two_show_card_not=} [properties] Properties to set
     * @returns {proto_gc_two_show_card_not} proto_gc_two_show_card_not instance
     */
    proto_gc_two_show_card_not.create = function create(properties) {
        return new proto_gc_two_show_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_two_show_card_not message. Does not implicitly {@link proto_gc_two_show_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {Iproto_gc_two_show_card_not} message proto_gc_two_show_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_show_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nLordPos);
        $root.proto_CCard.encode(message.cLordCard, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_two_show_card_not message, length delimited. Does not implicitly {@link proto_gc_two_show_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {Iproto_gc_two_show_card_not} message proto_gc_two_show_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_show_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_two_show_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_two_show_card_not} proto_gc_two_show_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_show_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_two_show_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                message.nLordPos = reader.int32();
                break;
            case 3:
                message.cLordCard = $root.proto_CCard.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        if (!message.hasOwnProperty("nLordPos"))
            throw $util.ProtocolError("missing required 'nLordPos'", { instance: message });
        if (!message.hasOwnProperty("cLordCard"))
            throw $util.ProtocolError("missing required 'cLordCard'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_two_show_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_two_show_card_not} proto_gc_two_show_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_show_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_two_show_card_not message.
     * @function verify
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_two_show_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (!$util.isInteger(message.nLordPos))
            return "nLordPos: integer expected";
        {
            var error = $root.proto_CCard.verify(message.cLordCard);
            if (error)
                return "cLordCard." + error;
        }
        return null;
    };

    /**
     * Creates a proto_gc_two_show_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_two_show_card_not} proto_gc_two_show_card_not
     */
    proto_gc_two_show_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_two_show_card_not)
            return object;
        var message = new $root.proto_gc_two_show_card_not();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.nLordPos != null)
            message.nLordPos = object.nLordPos | 0;
        if (object.cLordCard != null) {
            if (typeof object.cLordCard !== "object")
                throw TypeError(".proto_gc_two_show_card_not.cLordCard: object expected");
            message.cLordCard = $root.proto_CCard.fromObject(object.cLordCard);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_two_show_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_two_show_card_not
     * @static
     * @param {proto_gc_two_show_card_not} message proto_gc_two_show_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_two_show_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cChairID = 0;
            object.nLordPos = 0;
            object.cLordCard = null;
        }
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.nLordPos != null && message.hasOwnProperty("nLordPos"))
            object.nLordPos = message.nLordPos;
        if (message.cLordCard != null && message.hasOwnProperty("cLordCard"))
            object.cLordCard = $root.proto_CCard.toObject(message.cLordCard, options);
        return object;
    };

    /**
     * Converts this proto_gc_two_show_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_two_show_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_two_show_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_two_show_card_not;
})();

$root.proto_gc_two_complete_data_not = (function() {

    /**
     * Properties of a proto_gc_two_complete_data_not.
     * @exports Iproto_gc_two_complete_data_not
     * @interface Iproto_gc_two_complete_data_not
     * @property {number} nGameMoney proto_gc_two_complete_data_not nGameMoney
     * @property {number} nDouble proto_gc_two_complete_data_not nDouble
     * @property {number} cLord proto_gc_two_complete_data_not cLord
     * @property {Array.<Iproto_CCard>|null} [vecLordCards] proto_gc_two_complete_data_not vecLordCards
     * @property {Array.<Iproto_stUserData>|null} [vecData] proto_gc_two_complete_data_not vecData
     * @property {number} nLetNum proto_gc_two_complete_data_not nLetNum
     * @property {number} nStart proto_gc_two_complete_data_not nStart
     */

    /**
     * Constructs a new proto_gc_two_complete_data_not.
     * @exports proto_gc_two_complete_data_not
     * @classdesc Represents a proto_gc_two_complete_data_not.
     * @implements Iproto_gc_two_complete_data_not
     * @constructor
     * @param {Iproto_gc_two_complete_data_not=} [properties] Properties to set
     */
    function proto_gc_two_complete_data_not(properties) {
        this.vecLordCards = [];
        this.vecData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_two_complete_data_not nGameMoney.
     * @member {number} nGameMoney
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.nGameMoney = 0;

    /**
     * proto_gc_two_complete_data_not nDouble.
     * @member {number} nDouble
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.nDouble = 0;

    /**
     * proto_gc_two_complete_data_not cLord.
     * @member {number} cLord
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.cLord = 0;

    /**
     * proto_gc_two_complete_data_not vecLordCards.
     * @member {Array.<Iproto_CCard>} vecLordCards
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.vecLordCards = $util.emptyArray;

    /**
     * proto_gc_two_complete_data_not vecData.
     * @member {Array.<Iproto_stUserData>} vecData
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.vecData = $util.emptyArray;

    /**
     * proto_gc_two_complete_data_not nLetNum.
     * @member {number} nLetNum
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.nLetNum = 0;

    /**
     * proto_gc_two_complete_data_not nStart.
     * @member {number} nStart
     * @memberof proto_gc_two_complete_data_not
     * @instance
     */
    proto_gc_two_complete_data_not.prototype.nStart = 0;

    /**
     * Creates a new proto_gc_two_complete_data_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {Iproto_gc_two_complete_data_not=} [properties] Properties to set
     * @returns {proto_gc_two_complete_data_not} proto_gc_two_complete_data_not instance
     */
    proto_gc_two_complete_data_not.create = function create(properties) {
        return new proto_gc_two_complete_data_not(properties);
    };

    /**
     * Encodes the specified proto_gc_two_complete_data_not message. Does not implicitly {@link proto_gc_two_complete_data_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {Iproto_gc_two_complete_data_not} message proto_gc_two_complete_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_complete_data_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nGameMoney);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nDouble);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cLord);
        if (message.vecLordCards != null && message.vecLordCards.length)
            for (var i = 0; i < message.vecLordCards.length; ++i)
                $root.proto_CCard.encode(message.vecLordCards[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.vecData != null && message.vecData.length)
            for (var i = 0; i < message.vecData.length; ++i)
                $root.proto_stUserData.encode(message.vecData[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nLetNum);
        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.nStart);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_two_complete_data_not message, length delimited. Does not implicitly {@link proto_gc_two_complete_data_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {Iproto_gc_two_complete_data_not} message proto_gc_two_complete_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_complete_data_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_two_complete_data_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_two_complete_data_not} proto_gc_two_complete_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_complete_data_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_two_complete_data_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nGameMoney = reader.int32();
                break;
            case 2:
                message.nDouble = reader.int32();
                break;
            case 3:
                message.cLord = reader.int32();
                break;
            case 4:
                if (!(message.vecLordCards && message.vecLordCards.length))
                    message.vecLordCards = [];
                message.vecLordCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.vecData && message.vecData.length))
                    message.vecData = [];
                message.vecData.push($root.proto_stUserData.decode(reader, reader.uint32()));
                break;
            case 6:
                message.nLetNum = reader.int32();
                break;
            case 7:
                message.nStart = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nGameMoney"))
            throw $util.ProtocolError("missing required 'nGameMoney'", { instance: message });
        if (!message.hasOwnProperty("nDouble"))
            throw $util.ProtocolError("missing required 'nDouble'", { instance: message });
        if (!message.hasOwnProperty("cLord"))
            throw $util.ProtocolError("missing required 'cLord'", { instance: message });
        if (!message.hasOwnProperty("nLetNum"))
            throw $util.ProtocolError("missing required 'nLetNum'", { instance: message });
        if (!message.hasOwnProperty("nStart"))
            throw $util.ProtocolError("missing required 'nStart'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_two_complete_data_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_two_complete_data_not} proto_gc_two_complete_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_complete_data_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_two_complete_data_not message.
     * @function verify
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_two_complete_data_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nGameMoney))
            return "nGameMoney: integer expected";
        if (!$util.isInteger(message.nDouble))
            return "nDouble: integer expected";
        if (!$util.isInteger(message.cLord))
            return "cLord: integer expected";
        if (message.vecLordCards != null && message.hasOwnProperty("vecLordCards")) {
            if (!Array.isArray(message.vecLordCards))
                return "vecLordCards: array expected";
            for (var i = 0; i < message.vecLordCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecLordCards[i]);
                if (error)
                    return "vecLordCards." + error;
            }
        }
        if (message.vecData != null && message.hasOwnProperty("vecData")) {
            if (!Array.isArray(message.vecData))
                return "vecData: array expected";
            for (var i = 0; i < message.vecData.length; ++i) {
                var error = $root.proto_stUserData.verify(message.vecData[i]);
                if (error)
                    return "vecData." + error;
            }
        }
        if (!$util.isInteger(message.nLetNum))
            return "nLetNum: integer expected";
        if (!$util.isInteger(message.nStart))
            return "nStart: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_two_complete_data_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_two_complete_data_not} proto_gc_two_complete_data_not
     */
    proto_gc_two_complete_data_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_two_complete_data_not)
            return object;
        var message = new $root.proto_gc_two_complete_data_not();
        if (object.nGameMoney != null)
            message.nGameMoney = object.nGameMoney | 0;
        if (object.nDouble != null)
            message.nDouble = object.nDouble | 0;
        if (object.cLord != null)
            message.cLord = object.cLord | 0;
        if (object.vecLordCards) {
            if (!Array.isArray(object.vecLordCards))
                throw TypeError(".proto_gc_two_complete_data_not.vecLordCards: array expected");
            message.vecLordCards = [];
            for (var i = 0; i < object.vecLordCards.length; ++i) {
                if (typeof object.vecLordCards[i] !== "object")
                    throw TypeError(".proto_gc_two_complete_data_not.vecLordCards: object expected");
                message.vecLordCards[i] = $root.proto_CCard.fromObject(object.vecLordCards[i]);
            }
        }
        if (object.vecData) {
            if (!Array.isArray(object.vecData))
                throw TypeError(".proto_gc_two_complete_data_not.vecData: array expected");
            message.vecData = [];
            for (var i = 0; i < object.vecData.length; ++i) {
                if (typeof object.vecData[i] !== "object")
                    throw TypeError(".proto_gc_two_complete_data_not.vecData: object expected");
                message.vecData[i] = $root.proto_stUserData.fromObject(object.vecData[i]);
            }
        }
        if (object.nLetNum != null)
            message.nLetNum = object.nLetNum | 0;
        if (object.nStart != null)
            message.nStart = object.nStart | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_two_complete_data_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_two_complete_data_not
     * @static
     * @param {proto_gc_two_complete_data_not} message proto_gc_two_complete_data_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_two_complete_data_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecLordCards = [];
            object.vecData = [];
        }
        if (options.defaults) {
            object.nGameMoney = 0;
            object.nDouble = 0;
            object.cLord = 0;
            object.nLetNum = 0;
            object.nStart = 0;
        }
        if (message.nGameMoney != null && message.hasOwnProperty("nGameMoney"))
            object.nGameMoney = message.nGameMoney;
        if (message.nDouble != null && message.hasOwnProperty("nDouble"))
            object.nDouble = message.nDouble;
        if (message.cLord != null && message.hasOwnProperty("cLord"))
            object.cLord = message.cLord;
        if (message.vecLordCards && message.vecLordCards.length) {
            object.vecLordCards = [];
            for (var j = 0; j < message.vecLordCards.length; ++j)
                object.vecLordCards[j] = $root.proto_CCard.toObject(message.vecLordCards[j], options);
        }
        if (message.vecData && message.vecData.length) {
            object.vecData = [];
            for (var j = 0; j < message.vecData.length; ++j)
                object.vecData[j] = $root.proto_stUserData.toObject(message.vecData[j], options);
        }
        if (message.nLetNum != null && message.hasOwnProperty("nLetNum"))
            object.nLetNum = message.nLetNum;
        if (message.nStart != null && message.hasOwnProperty("nStart"))
            object.nStart = message.nStart;
        return object;
    };

    /**
     * Converts this proto_gc_two_complete_data_not to JSON.
     * @function toJSON
     * @memberof proto_gc_two_complete_data_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_two_complete_data_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_two_complete_data_not;
})();

$root.proto_stUserResult1 = (function() {

    /**
     * Properties of a proto_stUserResult1.
     * @exports Iproto_stUserResult1
     * @interface Iproto_stUserResult1
     * @property {number} nChairID proto_stUserResult1 nChairID
     * @property {number} nScore proto_stUserResult1 nScore
     * @property {number} nJifen proto_stUserResult1 nJifen
     */

    /**
     * Constructs a new proto_stUserResult1.
     * @exports proto_stUserResult1
     * @classdesc Represents a proto_stUserResult1.
     * @implements Iproto_stUserResult1
     * @constructor
     * @param {Iproto_stUserResult1=} [properties] Properties to set
     */
    function proto_stUserResult1(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_stUserResult1 nChairID.
     * @member {number} nChairID
     * @memberof proto_stUserResult1
     * @instance
     */
    proto_stUserResult1.prototype.nChairID = 0;

    /**
     * proto_stUserResult1 nScore.
     * @member {number} nScore
     * @memberof proto_stUserResult1
     * @instance
     */
    proto_stUserResult1.prototype.nScore = 0;

    /**
     * proto_stUserResult1 nJifen.
     * @member {number} nJifen
     * @memberof proto_stUserResult1
     * @instance
     */
    proto_stUserResult1.prototype.nJifen = 0;

    /**
     * Creates a new proto_stUserResult1 instance using the specified properties.
     * @function create
     * @memberof proto_stUserResult1
     * @static
     * @param {Iproto_stUserResult1=} [properties] Properties to set
     * @returns {proto_stUserResult1} proto_stUserResult1 instance
     */
    proto_stUserResult1.create = function create(properties) {
        return new proto_stUserResult1(properties);
    };

    /**
     * Encodes the specified proto_stUserResult1 message. Does not implicitly {@link proto_stUserResult1.verify|verify} messages.
     * @function encode
     * @memberof proto_stUserResult1
     * @static
     * @param {Iproto_stUserResult1} message proto_stUserResult1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_stUserResult1.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nChairID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nScore);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nJifen);
        return writer;
    };

    /**
     * Encodes the specified proto_stUserResult1 message, length delimited. Does not implicitly {@link proto_stUserResult1.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_stUserResult1
     * @static
     * @param {Iproto_stUserResult1} message proto_stUserResult1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_stUserResult1.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_stUserResult1 message from the specified reader or buffer.
     * @function decode
     * @memberof proto_stUserResult1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_stUserResult1} proto_stUserResult1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_stUserResult1.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_stUserResult1();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nChairID = reader.int32();
                break;
            case 2:
                message.nScore = reader.int32();
                break;
            case 3:
                message.nJifen = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nChairID"))
            throw $util.ProtocolError("missing required 'nChairID'", { instance: message });
        if (!message.hasOwnProperty("nScore"))
            throw $util.ProtocolError("missing required 'nScore'", { instance: message });
        if (!message.hasOwnProperty("nJifen"))
            throw $util.ProtocolError("missing required 'nJifen'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_stUserResult1 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_stUserResult1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_stUserResult1} proto_stUserResult1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_stUserResult1.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_stUserResult1 message.
     * @function verify
     * @memberof proto_stUserResult1
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_stUserResult1.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nChairID))
            return "nChairID: integer expected";
        if (!$util.isInteger(message.nScore))
            return "nScore: integer expected";
        if (!$util.isInteger(message.nJifen))
            return "nJifen: integer expected";
        return null;
    };

    /**
     * Creates a proto_stUserResult1 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_stUserResult1
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_stUserResult1} proto_stUserResult1
     */
    proto_stUserResult1.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_stUserResult1)
            return object;
        var message = new $root.proto_stUserResult1();
        if (object.nChairID != null)
            message.nChairID = object.nChairID | 0;
        if (object.nScore != null)
            message.nScore = object.nScore | 0;
        if (object.nJifen != null)
            message.nJifen = object.nJifen | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_stUserResult1 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_stUserResult1
     * @static
     * @param {proto_stUserResult1} message proto_stUserResult1
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_stUserResult1.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nChairID = 0;
            object.nScore = 0;
            object.nJifen = 0;
        }
        if (message.nChairID != null && message.hasOwnProperty("nChairID"))
            object.nChairID = message.nChairID;
        if (message.nScore != null && message.hasOwnProperty("nScore"))
            object.nScore = message.nScore;
        if (message.nJifen != null && message.hasOwnProperty("nJifen"))
            object.nJifen = message.nJifen;
        return object;
    };

    /**
     * Converts this proto_stUserResult1 to JSON.
     * @function toJSON
     * @memberof proto_stUserResult1
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_stUserResult1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_stUserResult1;
})();

$root.proto_gc_two_let_card_not = (function() {

    /**
     * Properties of a proto_gc_two_let_card_not.
     * @exports Iproto_gc_two_let_card_not
     * @interface Iproto_gc_two_let_card_not
     * @property {number} nLetNum proto_gc_two_let_card_not nLetNum
     */

    /**
     * Constructs a new proto_gc_two_let_card_not.
     * @exports proto_gc_two_let_card_not
     * @classdesc Represents a proto_gc_two_let_card_not.
     * @implements Iproto_gc_two_let_card_not
     * @constructor
     * @param {Iproto_gc_two_let_card_not=} [properties] Properties to set
     */
    function proto_gc_two_let_card_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_two_let_card_not nLetNum.
     * @member {number} nLetNum
     * @memberof proto_gc_two_let_card_not
     * @instance
     */
    proto_gc_two_let_card_not.prototype.nLetNum = 0;

    /**
     * Creates a new proto_gc_two_let_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {Iproto_gc_two_let_card_not=} [properties] Properties to set
     * @returns {proto_gc_two_let_card_not} proto_gc_two_let_card_not instance
     */
    proto_gc_two_let_card_not.create = function create(properties) {
        return new proto_gc_two_let_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_two_let_card_not message. Does not implicitly {@link proto_gc_two_let_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {Iproto_gc_two_let_card_not} message proto_gc_two_let_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_let_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nLetNum);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_two_let_card_not message, length delimited. Does not implicitly {@link proto_gc_two_let_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {Iproto_gc_two_let_card_not} message proto_gc_two_let_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_two_let_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_two_let_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_two_let_card_not} proto_gc_two_let_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_let_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_two_let_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nLetNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nLetNum"))
            throw $util.ProtocolError("missing required 'nLetNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_two_let_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_two_let_card_not} proto_gc_two_let_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_two_let_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_two_let_card_not message.
     * @function verify
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_two_let_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nLetNum))
            return "nLetNum: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_two_let_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_two_let_card_not} proto_gc_two_let_card_not
     */
    proto_gc_two_let_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_two_let_card_not)
            return object;
        var message = new $root.proto_gc_two_let_card_not();
        if (object.nLetNum != null)
            message.nLetNum = object.nLetNum | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_two_let_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_two_let_card_not
     * @static
     * @param {proto_gc_two_let_card_not} message proto_gc_two_let_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_two_let_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nLetNum = 0;
        if (message.nLetNum != null && message.hasOwnProperty("nLetNum"))
            object.nLetNum = message.nLetNum;
        return object;
    };

    /**
     * Converts this proto_gc_two_let_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_two_let_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_two_let_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_two_let_card_not;
})();

$root.proto_cg_get_card_req = (function() {

    /**
     * Properties of a proto_cg_get_card_req.
     * @exports Iproto_cg_get_card_req
     * @interface Iproto_cg_get_card_req
     * @property {number} nSerialID proto_cg_get_card_req nSerialID
     */

    /**
     * Constructs a new proto_cg_get_card_req.
     * @exports proto_cg_get_card_req
     * @classdesc Represents a proto_cg_get_card_req.
     * @implements Iproto_cg_get_card_req
     * @constructor
     * @param {Iproto_cg_get_card_req=} [properties] Properties to set
     */
    function proto_cg_get_card_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_get_card_req nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_get_card_req
     * @instance
     */
    proto_cg_get_card_req.prototype.nSerialID = 0;

    /**
     * Creates a new proto_cg_get_card_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_get_card_req
     * @static
     * @param {Iproto_cg_get_card_req=} [properties] Properties to set
     * @returns {proto_cg_get_card_req} proto_cg_get_card_req instance
     */
    proto_cg_get_card_req.create = function create(properties) {
        return new proto_cg_get_card_req(properties);
    };

    /**
     * Encodes the specified proto_cg_get_card_req message. Does not implicitly {@link proto_cg_get_card_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_get_card_req
     * @static
     * @param {Iproto_cg_get_card_req} message proto_cg_get_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_card_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_get_card_req message, length delimited. Does not implicitly {@link proto_cg_get_card_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_get_card_req
     * @static
     * @param {Iproto_cg_get_card_req} message proto_cg_get_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_card_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_get_card_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_get_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_get_card_req} proto_cg_get_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_card_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_get_card_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_get_card_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_get_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_get_card_req} proto_cg_get_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_card_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_get_card_req message.
     * @function verify
     * @memberof proto_cg_get_card_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_get_card_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_get_card_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_get_card_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_get_card_req} proto_cg_get_card_req
     */
    proto_cg_get_card_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_get_card_req)
            return object;
        var message = new $root.proto_cg_get_card_req();
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_get_card_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_get_card_req
     * @static
     * @param {proto_cg_get_card_req} message proto_cg_get_card_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_get_card_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nSerialID = 0;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_cg_get_card_req to JSON.
     * @function toJSON
     * @memberof proto_cg_get_card_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_get_card_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_get_card_req;
})();

$root.proto_gc_lord_card_lottery_info = (function() {

    /**
     * Properties of a proto_gc_lord_card_lottery_info.
     * @exports Iproto_gc_lord_card_lottery_info
     * @interface Iproto_gc_lord_card_lottery_info
     * @property {number} fee proto_gc_lord_card_lottery_info fee
     * @property {Array.<number>|null} [vecReward] proto_gc_lord_card_lottery_info vecReward
     */

    /**
     * Constructs a new proto_gc_lord_card_lottery_info.
     * @exports proto_gc_lord_card_lottery_info
     * @classdesc Represents a proto_gc_lord_card_lottery_info.
     * @implements Iproto_gc_lord_card_lottery_info
     * @constructor
     * @param {Iproto_gc_lord_card_lottery_info=} [properties] Properties to set
     */
    function proto_gc_lord_card_lottery_info(properties) {
        this.vecReward = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_lord_card_lottery_info fee.
     * @member {number} fee
     * @memberof proto_gc_lord_card_lottery_info
     * @instance
     */
    proto_gc_lord_card_lottery_info.prototype.fee = 0;

    /**
     * proto_gc_lord_card_lottery_info vecReward.
     * @member {Array.<number>} vecReward
     * @memberof proto_gc_lord_card_lottery_info
     * @instance
     */
    proto_gc_lord_card_lottery_info.prototype.vecReward = $util.emptyArray;

    /**
     * Creates a new proto_gc_lord_card_lottery_info instance using the specified properties.
     * @function create
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {Iproto_gc_lord_card_lottery_info=} [properties] Properties to set
     * @returns {proto_gc_lord_card_lottery_info} proto_gc_lord_card_lottery_info instance
     */
    proto_gc_lord_card_lottery_info.create = function create(properties) {
        return new proto_gc_lord_card_lottery_info(properties);
    };

    /**
     * Encodes the specified proto_gc_lord_card_lottery_info message. Does not implicitly {@link proto_gc_lord_card_lottery_info.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {Iproto_gc_lord_card_lottery_info} message proto_gc_lord_card_lottery_info message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_lord_card_lottery_info.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.fee);
        if (message.vecReward != null && message.vecReward.length)
            for (var i = 0; i < message.vecReward.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.vecReward[i]);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_lord_card_lottery_info message, length delimited. Does not implicitly {@link proto_gc_lord_card_lottery_info.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {Iproto_gc_lord_card_lottery_info} message proto_gc_lord_card_lottery_info message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_lord_card_lottery_info.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_lord_card_lottery_info message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_lord_card_lottery_info} proto_gc_lord_card_lottery_info
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_lord_card_lottery_info.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_lord_card_lottery_info();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fee = reader.int32();
                break;
            case 2:
                if (!(message.vecReward && message.vecReward.length))
                    message.vecReward = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecReward.push(reader.int32());
                } else
                    message.vecReward.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("fee"))
            throw $util.ProtocolError("missing required 'fee'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_lord_card_lottery_info message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_lord_card_lottery_info} proto_gc_lord_card_lottery_info
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_lord_card_lottery_info.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_lord_card_lottery_info message.
     * @function verify
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_lord_card_lottery_info.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.fee))
            return "fee: integer expected";
        if (message.vecReward != null && message.hasOwnProperty("vecReward")) {
            if (!Array.isArray(message.vecReward))
                return "vecReward: array expected";
            for (var i = 0; i < message.vecReward.length; ++i)
                if (!$util.isInteger(message.vecReward[i]))
                    return "vecReward: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a proto_gc_lord_card_lottery_info message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_lord_card_lottery_info} proto_gc_lord_card_lottery_info
     */
    proto_gc_lord_card_lottery_info.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_lord_card_lottery_info)
            return object;
        var message = new $root.proto_gc_lord_card_lottery_info();
        if (object.fee != null)
            message.fee = object.fee | 0;
        if (object.vecReward) {
            if (!Array.isArray(object.vecReward))
                throw TypeError(".proto_gc_lord_card_lottery_info.vecReward: array expected");
            message.vecReward = [];
            for (var i = 0; i < object.vecReward.length; ++i)
                message.vecReward[i] = object.vecReward[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_lord_card_lottery_info message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_lord_card_lottery_info
     * @static
     * @param {proto_gc_lord_card_lottery_info} message proto_gc_lord_card_lottery_info
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_lord_card_lottery_info.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecReward = [];
        if (options.defaults)
            object.fee = 0;
        if (message.fee != null && message.hasOwnProperty("fee"))
            object.fee = message.fee;
        if (message.vecReward && message.vecReward.length) {
            object.vecReward = [];
            for (var j = 0; j < message.vecReward.length; ++j)
                object.vecReward[j] = message.vecReward[j];
        }
        return object;
    };

    /**
     * Converts this proto_gc_lord_card_lottery_info to JSON.
     * @function toJSON
     * @memberof proto_gc_lord_card_lottery_info
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_lord_card_lottery_info.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_lord_card_lottery_info;
})();

$root.proto_gc_get_lord_card_reward = (function() {

    /**
     * Properties of a proto_gc_get_lord_card_reward.
     * @exports Iproto_gc_get_lord_card_reward
     * @interface Iproto_gc_get_lord_card_reward
     * @property {number} index proto_gc_get_lord_card_reward index
     * @property {number} money proto_gc_get_lord_card_reward money
     */

    /**
     * Constructs a new proto_gc_get_lord_card_reward.
     * @exports proto_gc_get_lord_card_reward
     * @classdesc Represents a proto_gc_get_lord_card_reward.
     * @implements Iproto_gc_get_lord_card_reward
     * @constructor
     * @param {Iproto_gc_get_lord_card_reward=} [properties] Properties to set
     */
    function proto_gc_get_lord_card_reward(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_get_lord_card_reward index.
     * @member {number} index
     * @memberof proto_gc_get_lord_card_reward
     * @instance
     */
    proto_gc_get_lord_card_reward.prototype.index = 0;

    /**
     * proto_gc_get_lord_card_reward money.
     * @member {number} money
     * @memberof proto_gc_get_lord_card_reward
     * @instance
     */
    proto_gc_get_lord_card_reward.prototype.money = 0;

    /**
     * Creates a new proto_gc_get_lord_card_reward instance using the specified properties.
     * @function create
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {Iproto_gc_get_lord_card_reward=} [properties] Properties to set
     * @returns {proto_gc_get_lord_card_reward} proto_gc_get_lord_card_reward instance
     */
    proto_gc_get_lord_card_reward.create = function create(properties) {
        return new proto_gc_get_lord_card_reward(properties);
    };

    /**
     * Encodes the specified proto_gc_get_lord_card_reward message. Does not implicitly {@link proto_gc_get_lord_card_reward.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {Iproto_gc_get_lord_card_reward} message proto_gc_get_lord_card_reward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_lord_card_reward.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.money);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_get_lord_card_reward message, length delimited. Does not implicitly {@link proto_gc_get_lord_card_reward.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {Iproto_gc_get_lord_card_reward} message proto_gc_get_lord_card_reward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_lord_card_reward.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_get_lord_card_reward message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_get_lord_card_reward} proto_gc_get_lord_card_reward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_lord_card_reward.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_get_lord_card_reward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.int32();
                break;
            case 2:
                message.money = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("index"))
            throw $util.ProtocolError("missing required 'index'", { instance: message });
        if (!message.hasOwnProperty("money"))
            throw $util.ProtocolError("missing required 'money'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_get_lord_card_reward message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_get_lord_card_reward} proto_gc_get_lord_card_reward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_lord_card_reward.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_get_lord_card_reward message.
     * @function verify
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_get_lord_card_reward.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.index))
            return "index: integer expected";
        if (!$util.isInteger(message.money))
            return "money: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_get_lord_card_reward message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_get_lord_card_reward} proto_gc_get_lord_card_reward
     */
    proto_gc_get_lord_card_reward.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_get_lord_card_reward)
            return object;
        var message = new $root.proto_gc_get_lord_card_reward();
        if (object.index != null)
            message.index = object.index | 0;
        if (object.money != null)
            message.money = object.money | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_get_lord_card_reward message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_get_lord_card_reward
     * @static
     * @param {proto_gc_get_lord_card_reward} message proto_gc_get_lord_card_reward
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_get_lord_card_reward.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.index = 0;
            object.money = 0;
        }
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.money != null && message.hasOwnProperty("money"))
            object.money = message.money;
        return object;
    };

    /**
     * Converts this proto_gc_get_lord_card_reward to JSON.
     * @function toJSON
     * @memberof proto_gc_get_lord_card_reward
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_get_lord_card_reward.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_get_lord_card_reward;
})();

$root.proto_gc_game_model = (function() {

    /**
     * Properties of a proto_gc_game_model.
     * @exports Iproto_gc_game_model
     * @interface Iproto_gc_game_model
     * @property {number} cModelType proto_gc_game_model cModelType
     */

    /**
     * Constructs a new proto_gc_game_model.
     * @exports proto_gc_game_model
     * @classdesc Represents a proto_gc_game_model.
     * @implements Iproto_gc_game_model
     * @constructor
     * @param {Iproto_gc_game_model=} [properties] Properties to set
     */
    function proto_gc_game_model(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_game_model cModelType.
     * @member {number} cModelType
     * @memberof proto_gc_game_model
     * @instance
     */
    proto_gc_game_model.prototype.cModelType = 0;

    /**
     * Creates a new proto_gc_game_model instance using the specified properties.
     * @function create
     * @memberof proto_gc_game_model
     * @static
     * @param {Iproto_gc_game_model=} [properties] Properties to set
     * @returns {proto_gc_game_model} proto_gc_game_model instance
     */
    proto_gc_game_model.create = function create(properties) {
        return new proto_gc_game_model(properties);
    };

    /**
     * Encodes the specified proto_gc_game_model message. Does not implicitly {@link proto_gc_game_model.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_game_model
     * @static
     * @param {Iproto_gc_game_model} message proto_gc_game_model message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_model.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cModelType);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_game_model message, length delimited. Does not implicitly {@link proto_gc_game_model.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_game_model
     * @static
     * @param {Iproto_gc_game_model} message proto_gc_game_model message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_model.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_game_model message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_game_model
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_game_model} proto_gc_game_model
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_model.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_game_model();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cModelType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cModelType"))
            throw $util.ProtocolError("missing required 'cModelType'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_game_model message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_game_model
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_game_model} proto_gc_game_model
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_model.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_game_model message.
     * @function verify
     * @memberof proto_gc_game_model
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_game_model.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cModelType))
            return "cModelType: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_game_model message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_game_model
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_game_model} proto_gc_game_model
     */
    proto_gc_game_model.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_game_model)
            return object;
        var message = new $root.proto_gc_game_model();
        if (object.cModelType != null)
            message.cModelType = object.cModelType | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_game_model message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_game_model
     * @static
     * @param {proto_gc_game_model} message proto_gc_game_model
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_game_model.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cModelType = 0;
        if (message.cModelType != null && message.hasOwnProperty("cModelType"))
            object.cModelType = message.cModelType;
        return object;
    };

    /**
     * Converts this proto_gc_game_model to JSON.
     * @function toJSON
     * @memberof proto_gc_game_model
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_game_model.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_game_model;
})();

$root.proto_gc_three_draw_ack_card = (function() {

    /**
     * Properties of a proto_gc_three_draw_ack_card.
     * @exports Iproto_gc_three_draw_ack_card
     * @interface Iproto_gc_three_draw_ack_card
     * @property {number} ret proto_gc_three_draw_ack_card ret
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_three_draw_ack_card vecCards
     * @property {Array.<number>|null} [vecRates] proto_gc_three_draw_ack_card vecRates
     * @property {number|Long} nMoney proto_gc_three_draw_ack_card nMoney
     * @property {number|Long} nDiZhu proto_gc_three_draw_ack_card nDiZhu
     * @property {number} fRate proto_gc_three_draw_ack_card fRate
     */

    /**
     * Constructs a new proto_gc_three_draw_ack_card.
     * @exports proto_gc_three_draw_ack_card
     * @classdesc Represents a proto_gc_three_draw_ack_card.
     * @implements Iproto_gc_three_draw_ack_card
     * @constructor
     * @param {Iproto_gc_three_draw_ack_card=} [properties] Properties to set
     */
    function proto_gc_three_draw_ack_card(properties) {
        this.vecCards = [];
        this.vecRates = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_three_draw_ack_card ret.
     * @member {number} ret
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     */
    proto_gc_three_draw_ack_card.prototype.ret = 0;

    /**
     * proto_gc_three_draw_ack_card vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     */
    proto_gc_three_draw_ack_card.prototype.vecCards = $util.emptyArray;

    /**
     * proto_gc_three_draw_ack_card vecRates.
     * @member {Array.<number>} vecRates
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     */
    proto_gc_three_draw_ack_card.prototype.vecRates = $util.emptyArray;

    /**
     * proto_gc_three_draw_ack_card nMoney.
     * @member {number|Long} nMoney
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     */
    proto_gc_three_draw_ack_card.prototype.nMoney = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_gc_three_draw_ack_card nDiZhu.
     * @member {number|Long} nDiZhu
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     */
    proto_gc_three_draw_ack_card.prototype.nDiZhu = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_gc_three_draw_ack_card fRate.
     * @member {number} fRate
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     */
    proto_gc_three_draw_ack_card.prototype.fRate = 0;

    /**
     * Creates a new proto_gc_three_draw_ack_card instance using the specified properties.
     * @function create
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {Iproto_gc_three_draw_ack_card=} [properties] Properties to set
     * @returns {proto_gc_three_draw_ack_card} proto_gc_three_draw_ack_card instance
     */
    proto_gc_three_draw_ack_card.create = function create(properties) {
        return new proto_gc_three_draw_ack_card(properties);
    };

    /**
     * Encodes the specified proto_gc_three_draw_ack_card message. Does not implicitly {@link proto_gc_three_draw_ack_card.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {Iproto_gc_three_draw_ack_card} message proto_gc_three_draw_ack_card message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_three_draw_ack_card.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.vecRates != null && message.vecRates.length)
            for (var i = 0; i < message.vecRates.length; ++i)
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.vecRates[i]);
        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.nMoney);
        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.nDiZhu);
        writer.uint32(/* id 6, wireType 5 =*/53).float(message.fRate);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_three_draw_ack_card message, length delimited. Does not implicitly {@link proto_gc_three_draw_ack_card.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {Iproto_gc_three_draw_ack_card} message proto_gc_three_draw_ack_card message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_three_draw_ack_card.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_three_draw_ack_card message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_three_draw_ack_card} proto_gc_three_draw_ack_card
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_three_draw_ack_card.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_three_draw_ack_card();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.vecRates && message.vecRates.length))
                    message.vecRates = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecRates.push(reader.float());
                } else
                    message.vecRates.push(reader.float());
                break;
            case 4:
                message.nMoney = reader.int64();
                break;
            case 5:
                message.nDiZhu = reader.int64();
                break;
            case 6:
                message.fRate = reader.float();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("nMoney"))
            throw $util.ProtocolError("missing required 'nMoney'", { instance: message });
        if (!message.hasOwnProperty("nDiZhu"))
            throw $util.ProtocolError("missing required 'nDiZhu'", { instance: message });
        if (!message.hasOwnProperty("fRate"))
            throw $util.ProtocolError("missing required 'fRate'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_three_draw_ack_card message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_three_draw_ack_card} proto_gc_three_draw_ack_card
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_three_draw_ack_card.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_three_draw_ack_card message.
     * @function verify
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_three_draw_ack_card.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        if (message.vecRates != null && message.hasOwnProperty("vecRates")) {
            if (!Array.isArray(message.vecRates))
                return "vecRates: array expected";
            for (var i = 0; i < message.vecRates.length; ++i)
                if (typeof message.vecRates[i] !== "number")
                    return "vecRates: number[] expected";
        }
        if (!$util.isInteger(message.nMoney) && !(message.nMoney && $util.isInteger(message.nMoney.low) && $util.isInteger(message.nMoney.high)))
            return "nMoney: integer|Long expected";
        if (!$util.isInteger(message.nDiZhu) && !(message.nDiZhu && $util.isInteger(message.nDiZhu.low) && $util.isInteger(message.nDiZhu.high)))
            return "nDiZhu: integer|Long expected";
        if (typeof message.fRate !== "number")
            return "fRate: number expected";
        return null;
    };

    /**
     * Creates a proto_gc_three_draw_ack_card message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_three_draw_ack_card} proto_gc_three_draw_ack_card
     */
    proto_gc_three_draw_ack_card.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_three_draw_ack_card)
            return object;
        var message = new $root.proto_gc_three_draw_ack_card();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_three_draw_ack_card.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_three_draw_ack_card.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        if (object.vecRates) {
            if (!Array.isArray(object.vecRates))
                throw TypeError(".proto_gc_three_draw_ack_card.vecRates: array expected");
            message.vecRates = [];
            for (var i = 0; i < object.vecRates.length; ++i)
                message.vecRates[i] = Number(object.vecRates[i]);
        }
        if (object.nMoney != null)
            if ($util.Long)
                (message.nMoney = $util.Long.fromValue(object.nMoney)).unsigned = false;
            else if (typeof object.nMoney === "string")
                message.nMoney = parseInt(object.nMoney, 10);
            else if (typeof object.nMoney === "number")
                message.nMoney = object.nMoney;
            else if (typeof object.nMoney === "object")
                message.nMoney = new $util.LongBits(object.nMoney.low >>> 0, object.nMoney.high >>> 0).toNumber();
        if (object.nDiZhu != null)
            if ($util.Long)
                (message.nDiZhu = $util.Long.fromValue(object.nDiZhu)).unsigned = false;
            else if (typeof object.nDiZhu === "string")
                message.nDiZhu = parseInt(object.nDiZhu, 10);
            else if (typeof object.nDiZhu === "number")
                message.nDiZhu = object.nDiZhu;
            else if (typeof object.nDiZhu === "object")
                message.nDiZhu = new $util.LongBits(object.nDiZhu.low >>> 0, object.nDiZhu.high >>> 0).toNumber();
        if (object.fRate != null)
            message.fRate = Number(object.fRate);
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_three_draw_ack_card message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_three_draw_ack_card
     * @static
     * @param {proto_gc_three_draw_ack_card} message proto_gc_three_draw_ack_card
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_three_draw_ack_card.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecCards = [];
            object.vecRates = [];
        }
        if (options.defaults) {
            object.ret = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nMoney = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nDiZhu = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nDiZhu = options.longs === String ? "0" : 0;
            object.fRate = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        if (message.vecRates && message.vecRates.length) {
            object.vecRates = [];
            for (var j = 0; j < message.vecRates.length; ++j)
                object.vecRates[j] = options.json && !isFinite(message.vecRates[j]) ? String(message.vecRates[j]) : message.vecRates[j];
        }
        if (message.nMoney != null && message.hasOwnProperty("nMoney"))
            if (typeof message.nMoney === "number")
                object.nMoney = options.longs === String ? String(message.nMoney) : message.nMoney;
            else
                object.nMoney = options.longs === String ? $util.Long.prototype.toString.call(message.nMoney) : options.longs === Number ? new $util.LongBits(message.nMoney.low >>> 0, message.nMoney.high >>> 0).toNumber() : message.nMoney;
        if (message.nDiZhu != null && message.hasOwnProperty("nDiZhu"))
            if (typeof message.nDiZhu === "number")
                object.nDiZhu = options.longs === String ? String(message.nDiZhu) : message.nDiZhu;
            else
                object.nDiZhu = options.longs === String ? $util.Long.prototype.toString.call(message.nDiZhu) : options.longs === Number ? new $util.LongBits(message.nDiZhu.low >>> 0, message.nDiZhu.high >>> 0).toNumber() : message.nDiZhu;
        if (message.fRate != null && message.hasOwnProperty("fRate"))
            object.fRate = options.json && !isFinite(message.fRate) ? String(message.fRate) : message.fRate;
        return object;
    };

    /**
     * Converts this proto_gc_three_draw_ack_card to JSON.
     * @function toJSON
     * @memberof proto_gc_three_draw_ack_card
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_three_draw_ack_card.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_three_draw_ack_card;
})();

$root.proto_sic_bet_ack = (function() {

    /**
     * Properties of a proto_sic_bet_ack.
     * @exports Iproto_sic_bet_ack
     * @interface Iproto_sic_bet_ack
     * @property {number} bAllow proto_sic_bet_ack bAllow
     * @property {number} cCellID proto_sic_bet_ack cCellID
     * @property {number} nAmountCell proto_sic_bet_ack nAmountCell
     * @property {number} nAmountCellTotal proto_sic_bet_ack nAmountCellTotal
     */

    /**
     * Constructs a new proto_sic_bet_ack.
     * @exports proto_sic_bet_ack
     * @classdesc Represents a proto_sic_bet_ack.
     * @implements Iproto_sic_bet_ack
     * @constructor
     * @param {Iproto_sic_bet_ack=} [properties] Properties to set
     */
    function proto_sic_bet_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_bet_ack bAllow.
     * @member {number} bAllow
     * @memberof proto_sic_bet_ack
     * @instance
     */
    proto_sic_bet_ack.prototype.bAllow = 0;

    /**
     * proto_sic_bet_ack cCellID.
     * @member {number} cCellID
     * @memberof proto_sic_bet_ack
     * @instance
     */
    proto_sic_bet_ack.prototype.cCellID = 0;

    /**
     * proto_sic_bet_ack nAmountCell.
     * @member {number} nAmountCell
     * @memberof proto_sic_bet_ack
     * @instance
     */
    proto_sic_bet_ack.prototype.nAmountCell = 0;

    /**
     * proto_sic_bet_ack nAmountCellTotal.
     * @member {number} nAmountCellTotal
     * @memberof proto_sic_bet_ack
     * @instance
     */
    proto_sic_bet_ack.prototype.nAmountCellTotal = 0;

    /**
     * Creates a new proto_sic_bet_ack instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_ack
     * @static
     * @param {Iproto_sic_bet_ack=} [properties] Properties to set
     * @returns {proto_sic_bet_ack} proto_sic_bet_ack instance
     */
    proto_sic_bet_ack.create = function create(properties) {
        return new proto_sic_bet_ack(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_ack message. Does not implicitly {@link proto_sic_bet_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_ack
     * @static
     * @param {Iproto_sic_bet_ack} message proto_sic_bet_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.bAllow);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cCellID);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nAmountCell);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nAmountCellTotal);
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_ack message, length delimited. Does not implicitly {@link proto_sic_bet_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_ack
     * @static
     * @param {Iproto_sic_bet_ack} message proto_sic_bet_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_ack} proto_sic_bet_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.bAllow = reader.int32();
                break;
            case 2:
                message.cCellID = reader.int32();
                break;
            case 3:
                message.nAmountCell = reader.int32();
                break;
            case 4:
                message.nAmountCellTotal = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("bAllow"))
            throw $util.ProtocolError("missing required 'bAllow'", { instance: message });
        if (!message.hasOwnProperty("cCellID"))
            throw $util.ProtocolError("missing required 'cCellID'", { instance: message });
        if (!message.hasOwnProperty("nAmountCell"))
            throw $util.ProtocolError("missing required 'nAmountCell'", { instance: message });
        if (!message.hasOwnProperty("nAmountCellTotal"))
            throw $util.ProtocolError("missing required 'nAmountCellTotal'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_bet_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_ack} proto_sic_bet_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_ack message.
     * @function verify
     * @memberof proto_sic_bet_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.bAllow))
            return "bAllow: integer expected";
        if (!$util.isInteger(message.cCellID))
            return "cCellID: integer expected";
        if (!$util.isInteger(message.nAmountCell))
            return "nAmountCell: integer expected";
        if (!$util.isInteger(message.nAmountCellTotal))
            return "nAmountCellTotal: integer expected";
        return null;
    };

    /**
     * Creates a proto_sic_bet_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_ack} proto_sic_bet_ack
     */
    proto_sic_bet_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_ack)
            return object;
        var message = new $root.proto_sic_bet_ack();
        if (object.bAllow != null)
            message.bAllow = object.bAllow | 0;
        if (object.cCellID != null)
            message.cCellID = object.cCellID | 0;
        if (object.nAmountCell != null)
            message.nAmountCell = object.nAmountCell | 0;
        if (object.nAmountCellTotal != null)
            message.nAmountCellTotal = object.nAmountCellTotal | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_bet_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_ack
     * @static
     * @param {proto_sic_bet_ack} message proto_sic_bet_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.bAllow = 0;
            object.cCellID = 0;
            object.nAmountCell = 0;
            object.nAmountCellTotal = 0;
        }
        if (message.bAllow != null && message.hasOwnProperty("bAllow"))
            object.bAllow = message.bAllow;
        if (message.cCellID != null && message.hasOwnProperty("cCellID"))
            object.cCellID = message.cCellID;
        if (message.nAmountCell != null && message.hasOwnProperty("nAmountCell"))
            object.nAmountCell = message.nAmountCell;
        if (message.nAmountCellTotal != null && message.hasOwnProperty("nAmountCellTotal"))
            object.nAmountCellTotal = message.nAmountCellTotal;
        return object;
    };

    /**
     * Converts this proto_sic_bet_ack to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_ack;
})();

$root.proto_cg_lord_card_lottery_info = (function() {

    /**
     * Properties of a proto_cg_lord_card_lottery_info.
     * @exports Iproto_cg_lord_card_lottery_info
     * @interface Iproto_cg_lord_card_lottery_info
     */

    /**
     * Constructs a new proto_cg_lord_card_lottery_info.
     * @exports proto_cg_lord_card_lottery_info
     * @classdesc Represents a proto_cg_lord_card_lottery_info.
     * @implements Iproto_cg_lord_card_lottery_info
     * @constructor
     * @param {Iproto_cg_lord_card_lottery_info=} [properties] Properties to set
     */
    function proto_cg_lord_card_lottery_info(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_lord_card_lottery_info instance using the specified properties.
     * @function create
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {Iproto_cg_lord_card_lottery_info=} [properties] Properties to set
     * @returns {proto_cg_lord_card_lottery_info} proto_cg_lord_card_lottery_info instance
     */
    proto_cg_lord_card_lottery_info.create = function create(properties) {
        return new proto_cg_lord_card_lottery_info(properties);
    };

    /**
     * Encodes the specified proto_cg_lord_card_lottery_info message. Does not implicitly {@link proto_cg_lord_card_lottery_info.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {Iproto_cg_lord_card_lottery_info} message proto_cg_lord_card_lottery_info message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_lord_card_lottery_info.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_lord_card_lottery_info message, length delimited. Does not implicitly {@link proto_cg_lord_card_lottery_info.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {Iproto_cg_lord_card_lottery_info} message proto_cg_lord_card_lottery_info message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_lord_card_lottery_info.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_lord_card_lottery_info message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_lord_card_lottery_info} proto_cg_lord_card_lottery_info
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_lord_card_lottery_info.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_lord_card_lottery_info();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_lord_card_lottery_info message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_lord_card_lottery_info} proto_cg_lord_card_lottery_info
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_lord_card_lottery_info.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_lord_card_lottery_info message.
     * @function verify
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_lord_card_lottery_info.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_lord_card_lottery_info message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_lord_card_lottery_info} proto_cg_lord_card_lottery_info
     */
    proto_cg_lord_card_lottery_info.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_lord_card_lottery_info)
            return object;
        return new $root.proto_cg_lord_card_lottery_info();
    };

    /**
     * Creates a plain object from a proto_cg_lord_card_lottery_info message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_lord_card_lottery_info
     * @static
     * @param {proto_cg_lord_card_lottery_info} message proto_cg_lord_card_lottery_info
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_lord_card_lottery_info.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_lord_card_lottery_info to JSON.
     * @function toJSON
     * @memberof proto_cg_lord_card_lottery_info
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_lord_card_lottery_info.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_lord_card_lottery_info;
})();

$root.proto_CCard = (function() {

    /**
     * Properties of a proto_CCard.
     * @exports Iproto_CCard
     * @interface Iproto_CCard
     * @property {number} mNColor proto_CCard mNColor
     * @property {number} mNValue proto_CCard mNValue
     * @property {number} mNCard_Baovalue proto_CCard mNCard_Baovalue
     */

    /**
     * Constructs a new proto_CCard.
     * @exports proto_CCard
     * @classdesc Represents a proto_CCard.
     * @implements Iproto_CCard
     * @constructor
     * @param {Iproto_CCard=} [properties] Properties to set
     */
    function proto_CCard(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_CCard mNColor.
     * @member {number} mNColor
     * @memberof proto_CCard
     * @instance
     */
    proto_CCard.prototype.mNColor = 0;

    /**
     * proto_CCard mNValue.
     * @member {number} mNValue
     * @memberof proto_CCard
     * @instance
     */
    proto_CCard.prototype.mNValue = 0;

    /**
     * proto_CCard mNCard_Baovalue.
     * @member {number} mNCard_Baovalue
     * @memberof proto_CCard
     * @instance
     */
    proto_CCard.prototype.mNCard_Baovalue = 0;

    /**
     * Creates a new proto_CCard instance using the specified properties.
     * @function create
     * @memberof proto_CCard
     * @static
     * @param {Iproto_CCard=} [properties] Properties to set
     * @returns {proto_CCard} proto_CCard instance
     */
    proto_CCard.create = function create(properties) {
        return new proto_CCard(properties);
    };

    /**
     * Encodes the specified proto_CCard message. Does not implicitly {@link proto_CCard.verify|verify} messages.
     * @function encode
     * @memberof proto_CCard
     * @static
     * @param {Iproto_CCard} message proto_CCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_CCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mNColor);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mNValue);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mNCard_Baovalue);
        return writer;
    };

    /**
     * Encodes the specified proto_CCard message, length delimited. Does not implicitly {@link proto_CCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_CCard
     * @static
     * @param {Iproto_CCard} message proto_CCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_CCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_CCard message from the specified reader or buffer.
     * @function decode
     * @memberof proto_CCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_CCard} proto_CCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_CCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_CCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.mNColor = reader.int32();
                break;
            case 2:
                message.mNValue = reader.int32();
                break;
            case 3:
                message.mNCard_Baovalue = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mNColor"))
            throw $util.ProtocolError("missing required 'mNColor'", { instance: message });
        if (!message.hasOwnProperty("mNValue"))
            throw $util.ProtocolError("missing required 'mNValue'", { instance: message });
        if (!message.hasOwnProperty("mNCard_Baovalue"))
            throw $util.ProtocolError("missing required 'mNCard_Baovalue'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_CCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_CCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_CCard} proto_CCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_CCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_CCard message.
     * @function verify
     * @memberof proto_CCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_CCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mNColor))
            return "mNColor: integer expected";
        if (!$util.isInteger(message.mNValue))
            return "mNValue: integer expected";
        if (!$util.isInteger(message.mNCard_Baovalue))
            return "mNCard_Baovalue: integer expected";
        return null;
    };

    /**
     * Creates a proto_CCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_CCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_CCard} proto_CCard
     */
    proto_CCard.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_CCard)
            return object;
        var message = new $root.proto_CCard();
        if (object.mNColor != null)
            message.mNColor = object.mNColor | 0;
        if (object.mNValue != null)
            message.mNValue = object.mNValue | 0;
        if (object.mNCard_Baovalue != null)
            message.mNCard_Baovalue = object.mNCard_Baovalue | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_CCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_CCard
     * @static
     * @param {proto_CCard} message proto_CCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_CCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mNColor = 0;
            object.mNValue = 0;
            object.mNCard_Baovalue = 0;
        }
        if (message.mNColor != null && message.hasOwnProperty("mNColor"))
            object.mNColor = message.mNColor;
        if (message.mNValue != null && message.hasOwnProperty("mNValue"))
            object.mNValue = message.mNValue;
        if (message.mNCard_Baovalue != null && message.hasOwnProperty("mNCard_Baovalue"))
            object.mNCard_Baovalue = message.mNCard_Baovalue;
        return object;
    };

    /**
     * Converts this proto_CCard to JSON.
     * @function toJSON
     * @memberof proto_CCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_CCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_CCard;
})();

$root.proto_cg_three_draw_req_card = (function() {

    /**
     * Properties of a proto_cg_three_draw_req_card.
     * @exports Iproto_cg_three_draw_req_card
     * @interface Iproto_cg_three_draw_req_card
     */

    /**
     * Constructs a new proto_cg_three_draw_req_card.
     * @exports proto_cg_three_draw_req_card
     * @classdesc Represents a proto_cg_three_draw_req_card.
     * @implements Iproto_cg_three_draw_req_card
     * @constructor
     * @param {Iproto_cg_three_draw_req_card=} [properties] Properties to set
     */
    function proto_cg_three_draw_req_card(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_three_draw_req_card instance using the specified properties.
     * @function create
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {Iproto_cg_three_draw_req_card=} [properties] Properties to set
     * @returns {proto_cg_three_draw_req_card} proto_cg_three_draw_req_card instance
     */
    proto_cg_three_draw_req_card.create = function create(properties) {
        return new proto_cg_three_draw_req_card(properties);
    };

    /**
     * Encodes the specified proto_cg_three_draw_req_card message. Does not implicitly {@link proto_cg_three_draw_req_card.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {Iproto_cg_three_draw_req_card} message proto_cg_three_draw_req_card message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_three_draw_req_card.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_three_draw_req_card message, length delimited. Does not implicitly {@link proto_cg_three_draw_req_card.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {Iproto_cg_three_draw_req_card} message proto_cg_three_draw_req_card message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_three_draw_req_card.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_three_draw_req_card message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_three_draw_req_card} proto_cg_three_draw_req_card
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_three_draw_req_card.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_three_draw_req_card();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_three_draw_req_card message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_three_draw_req_card} proto_cg_three_draw_req_card
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_three_draw_req_card.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_three_draw_req_card message.
     * @function verify
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_three_draw_req_card.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_three_draw_req_card message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_three_draw_req_card} proto_cg_three_draw_req_card
     */
    proto_cg_three_draw_req_card.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_three_draw_req_card)
            return object;
        return new $root.proto_cg_three_draw_req_card();
    };

    /**
     * Creates a plain object from a proto_cg_three_draw_req_card message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_three_draw_req_card
     * @static
     * @param {proto_cg_three_draw_req_card} message proto_cg_three_draw_req_card
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_three_draw_req_card.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_three_draw_req_card to JSON.
     * @function toJSON
     * @memberof proto_cg_three_draw_req_card
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_three_draw_req_card.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_three_draw_req_card;
})();

$root.proto_gc_three_draw_ack_data = (function() {

    /**
     * Properties of a proto_gc_three_draw_ack_data.
     * @exports Iproto_gc_three_draw_ack_data
     * @interface Iproto_gc_three_draw_ack_data
     * @property {number} ret proto_gc_three_draw_ack_data ret
     * @property {Array.<Iproto_Money_DiZhu>|null} [vecMoneyDiZhus] proto_gc_three_draw_ack_data vecMoneyDiZhus
     * @property {Array.<Iproto_Kind_Rate>|null} [vecKindRates] proto_gc_three_draw_ack_data vecKindRates
     * @property {number} nBaoDiMoney proto_gc_three_draw_ack_data nBaoDiMoney
     * @property {number} nBaoDiRate proto_gc_three_draw_ack_data nBaoDiRate
     * @property {number} fMinRate proto_gc_three_draw_ack_data fMinRate
     */

    /**
     * Constructs a new proto_gc_three_draw_ack_data.
     * @exports proto_gc_three_draw_ack_data
     * @classdesc Represents a proto_gc_three_draw_ack_data.
     * @implements Iproto_gc_three_draw_ack_data
     * @constructor
     * @param {Iproto_gc_three_draw_ack_data=} [properties] Properties to set
     */
    function proto_gc_three_draw_ack_data(properties) {
        this.vecMoneyDiZhus = [];
        this.vecKindRates = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_three_draw_ack_data ret.
     * @member {number} ret
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     */
    proto_gc_three_draw_ack_data.prototype.ret = 0;

    /**
     * proto_gc_three_draw_ack_data vecMoneyDiZhus.
     * @member {Array.<Iproto_Money_DiZhu>} vecMoneyDiZhus
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     */
    proto_gc_three_draw_ack_data.prototype.vecMoneyDiZhus = $util.emptyArray;

    /**
     * proto_gc_three_draw_ack_data vecKindRates.
     * @member {Array.<Iproto_Kind_Rate>} vecKindRates
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     */
    proto_gc_three_draw_ack_data.prototype.vecKindRates = $util.emptyArray;

    /**
     * proto_gc_three_draw_ack_data nBaoDiMoney.
     * @member {number} nBaoDiMoney
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     */
    proto_gc_three_draw_ack_data.prototype.nBaoDiMoney = 0;

    /**
     * proto_gc_three_draw_ack_data nBaoDiRate.
     * @member {number} nBaoDiRate
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     */
    proto_gc_three_draw_ack_data.prototype.nBaoDiRate = 0;

    /**
     * proto_gc_three_draw_ack_data fMinRate.
     * @member {number} fMinRate
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     */
    proto_gc_three_draw_ack_data.prototype.fMinRate = 0;

    /**
     * Creates a new proto_gc_three_draw_ack_data instance using the specified properties.
     * @function create
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {Iproto_gc_three_draw_ack_data=} [properties] Properties to set
     * @returns {proto_gc_three_draw_ack_data} proto_gc_three_draw_ack_data instance
     */
    proto_gc_three_draw_ack_data.create = function create(properties) {
        return new proto_gc_three_draw_ack_data(properties);
    };

    /**
     * Encodes the specified proto_gc_three_draw_ack_data message. Does not implicitly {@link proto_gc_three_draw_ack_data.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {Iproto_gc_three_draw_ack_data} message proto_gc_three_draw_ack_data message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_three_draw_ack_data.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        if (message.vecMoneyDiZhus != null && message.vecMoneyDiZhus.length)
            for (var i = 0; i < message.vecMoneyDiZhus.length; ++i)
                $root.proto_Money_DiZhu.encode(message.vecMoneyDiZhus[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.vecKindRates != null && message.vecKindRates.length)
            for (var i = 0; i < message.vecKindRates.length; ++i)
                $root.proto_Kind_Rate.encode(message.vecKindRates[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nBaoDiMoney);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.nBaoDiRate);
        writer.uint32(/* id 6, wireType 5 =*/53).float(message.fMinRate);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_three_draw_ack_data message, length delimited. Does not implicitly {@link proto_gc_three_draw_ack_data.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {Iproto_gc_three_draw_ack_data} message proto_gc_three_draw_ack_data message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_three_draw_ack_data.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_three_draw_ack_data message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_three_draw_ack_data} proto_gc_three_draw_ack_data
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_three_draw_ack_data.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_three_draw_ack_data();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                if (!(message.vecMoneyDiZhus && message.vecMoneyDiZhus.length))
                    message.vecMoneyDiZhus = [];
                message.vecMoneyDiZhus.push($root.proto_Money_DiZhu.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.vecKindRates && message.vecKindRates.length))
                    message.vecKindRates = [];
                message.vecKindRates.push($root.proto_Kind_Rate.decode(reader, reader.uint32()));
                break;
            case 4:
                message.nBaoDiMoney = reader.int32();
                break;
            case 5:
                message.nBaoDiRate = reader.int32();
                break;
            case 6:
                message.fMinRate = reader.float();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("nBaoDiMoney"))
            throw $util.ProtocolError("missing required 'nBaoDiMoney'", { instance: message });
        if (!message.hasOwnProperty("nBaoDiRate"))
            throw $util.ProtocolError("missing required 'nBaoDiRate'", { instance: message });
        if (!message.hasOwnProperty("fMinRate"))
            throw $util.ProtocolError("missing required 'fMinRate'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_three_draw_ack_data message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_three_draw_ack_data} proto_gc_three_draw_ack_data
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_three_draw_ack_data.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_three_draw_ack_data message.
     * @function verify
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_three_draw_ack_data.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (message.vecMoneyDiZhus != null && message.hasOwnProperty("vecMoneyDiZhus")) {
            if (!Array.isArray(message.vecMoneyDiZhus))
                return "vecMoneyDiZhus: array expected";
            for (var i = 0; i < message.vecMoneyDiZhus.length; ++i) {
                var error = $root.proto_Money_DiZhu.verify(message.vecMoneyDiZhus[i]);
                if (error)
                    return "vecMoneyDiZhus." + error;
            }
        }
        if (message.vecKindRates != null && message.hasOwnProperty("vecKindRates")) {
            if (!Array.isArray(message.vecKindRates))
                return "vecKindRates: array expected";
            for (var i = 0; i < message.vecKindRates.length; ++i) {
                var error = $root.proto_Kind_Rate.verify(message.vecKindRates[i]);
                if (error)
                    return "vecKindRates." + error;
            }
        }
        if (!$util.isInteger(message.nBaoDiMoney))
            return "nBaoDiMoney: integer expected";
        if (!$util.isInteger(message.nBaoDiRate))
            return "nBaoDiRate: integer expected";
        if (typeof message.fMinRate !== "number")
            return "fMinRate: number expected";
        return null;
    };

    /**
     * Creates a proto_gc_three_draw_ack_data message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_three_draw_ack_data} proto_gc_three_draw_ack_data
     */
    proto_gc_three_draw_ack_data.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_three_draw_ack_data)
            return object;
        var message = new $root.proto_gc_three_draw_ack_data();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.vecMoneyDiZhus) {
            if (!Array.isArray(object.vecMoneyDiZhus))
                throw TypeError(".proto_gc_three_draw_ack_data.vecMoneyDiZhus: array expected");
            message.vecMoneyDiZhus = [];
            for (var i = 0; i < object.vecMoneyDiZhus.length; ++i) {
                if (typeof object.vecMoneyDiZhus[i] !== "object")
                    throw TypeError(".proto_gc_three_draw_ack_data.vecMoneyDiZhus: object expected");
                message.vecMoneyDiZhus[i] = $root.proto_Money_DiZhu.fromObject(object.vecMoneyDiZhus[i]);
            }
        }
        if (object.vecKindRates) {
            if (!Array.isArray(object.vecKindRates))
                throw TypeError(".proto_gc_three_draw_ack_data.vecKindRates: array expected");
            message.vecKindRates = [];
            for (var i = 0; i < object.vecKindRates.length; ++i) {
                if (typeof object.vecKindRates[i] !== "object")
                    throw TypeError(".proto_gc_three_draw_ack_data.vecKindRates: object expected");
                message.vecKindRates[i] = $root.proto_Kind_Rate.fromObject(object.vecKindRates[i]);
            }
        }
        if (object.nBaoDiMoney != null)
            message.nBaoDiMoney = object.nBaoDiMoney | 0;
        if (object.nBaoDiRate != null)
            message.nBaoDiRate = object.nBaoDiRate | 0;
        if (object.fMinRate != null)
            message.fMinRate = Number(object.fMinRate);
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_three_draw_ack_data message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_three_draw_ack_data
     * @static
     * @param {proto_gc_three_draw_ack_data} message proto_gc_three_draw_ack_data
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_three_draw_ack_data.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecMoneyDiZhus = [];
            object.vecKindRates = [];
        }
        if (options.defaults) {
            object.ret = 0;
            object.nBaoDiMoney = 0;
            object.nBaoDiRate = 0;
            object.fMinRate = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.vecMoneyDiZhus && message.vecMoneyDiZhus.length) {
            object.vecMoneyDiZhus = [];
            for (var j = 0; j < message.vecMoneyDiZhus.length; ++j)
                object.vecMoneyDiZhus[j] = $root.proto_Money_DiZhu.toObject(message.vecMoneyDiZhus[j], options);
        }
        if (message.vecKindRates && message.vecKindRates.length) {
            object.vecKindRates = [];
            for (var j = 0; j < message.vecKindRates.length; ++j)
                object.vecKindRates[j] = $root.proto_Kind_Rate.toObject(message.vecKindRates[j], options);
        }
        if (message.nBaoDiMoney != null && message.hasOwnProperty("nBaoDiMoney"))
            object.nBaoDiMoney = message.nBaoDiMoney;
        if (message.nBaoDiRate != null && message.hasOwnProperty("nBaoDiRate"))
            object.nBaoDiRate = message.nBaoDiRate;
        if (message.fMinRate != null && message.hasOwnProperty("fMinRate"))
            object.fMinRate = options.json && !isFinite(message.fMinRate) ? String(message.fMinRate) : message.fMinRate;
        return object;
    };

    /**
     * Converts this proto_gc_three_draw_ack_data to JSON.
     * @function toJSON
     * @memberof proto_gc_three_draw_ack_data
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_three_draw_ack_data.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_three_draw_ack_data;
})();

$root.proto_Kind_Rate = (function() {

    /**
     * Properties of a proto_Kind_Rate.
     * @exports Iproto_Kind_Rate
     * @interface Iproto_Kind_Rate
     * @property {string} strKind proto_Kind_Rate strKind
     * @property {string} strRate proto_Kind_Rate strRate
     */

    /**
     * Constructs a new proto_Kind_Rate.
     * @exports proto_Kind_Rate
     * @classdesc Represents a proto_Kind_Rate.
     * @implements Iproto_Kind_Rate
     * @constructor
     * @param {Iproto_Kind_Rate=} [properties] Properties to set
     */
    function proto_Kind_Rate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_Kind_Rate strKind.
     * @member {string} strKind
     * @memberof proto_Kind_Rate
     * @instance
     */
    proto_Kind_Rate.prototype.strKind = "";

    /**
     * proto_Kind_Rate strRate.
     * @member {string} strRate
     * @memberof proto_Kind_Rate
     * @instance
     */
    proto_Kind_Rate.prototype.strRate = "";

    /**
     * Creates a new proto_Kind_Rate instance using the specified properties.
     * @function create
     * @memberof proto_Kind_Rate
     * @static
     * @param {Iproto_Kind_Rate=} [properties] Properties to set
     * @returns {proto_Kind_Rate} proto_Kind_Rate instance
     */
    proto_Kind_Rate.create = function create(properties) {
        return new proto_Kind_Rate(properties);
    };

    /**
     * Encodes the specified proto_Kind_Rate message. Does not implicitly {@link proto_Kind_Rate.verify|verify} messages.
     * @function encode
     * @memberof proto_Kind_Rate
     * @static
     * @param {Iproto_Kind_Rate} message proto_Kind_Rate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_Kind_Rate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 2 =*/10).string(message.strKind);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.strRate);
        return writer;
    };

    /**
     * Encodes the specified proto_Kind_Rate message, length delimited. Does not implicitly {@link proto_Kind_Rate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_Kind_Rate
     * @static
     * @param {Iproto_Kind_Rate} message proto_Kind_Rate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_Kind_Rate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_Kind_Rate message from the specified reader or buffer.
     * @function decode
     * @memberof proto_Kind_Rate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_Kind_Rate} proto_Kind_Rate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_Kind_Rate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_Kind_Rate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.strKind = reader.string();
                break;
            case 2:
                message.strRate = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("strKind"))
            throw $util.ProtocolError("missing required 'strKind'", { instance: message });
        if (!message.hasOwnProperty("strRate"))
            throw $util.ProtocolError("missing required 'strRate'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_Kind_Rate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_Kind_Rate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_Kind_Rate} proto_Kind_Rate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_Kind_Rate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_Kind_Rate message.
     * @function verify
     * @memberof proto_Kind_Rate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_Kind_Rate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isString(message.strKind))
            return "strKind: string expected";
        if (!$util.isString(message.strRate))
            return "strRate: string expected";
        return null;
    };

    /**
     * Creates a proto_Kind_Rate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_Kind_Rate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_Kind_Rate} proto_Kind_Rate
     */
    proto_Kind_Rate.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_Kind_Rate)
            return object;
        var message = new $root.proto_Kind_Rate();
        if (object.strKind != null)
            message.strKind = String(object.strKind);
        if (object.strRate != null)
            message.strRate = String(object.strRate);
        return message;
    };

    /**
     * Creates a plain object from a proto_Kind_Rate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_Kind_Rate
     * @static
     * @param {proto_Kind_Rate} message proto_Kind_Rate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_Kind_Rate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.strKind = "";
            object.strRate = "";
        }
        if (message.strKind != null && message.hasOwnProperty("strKind"))
            object.strKind = message.strKind;
        if (message.strRate != null && message.hasOwnProperty("strRate"))
            object.strRate = message.strRate;
        return object;
    };

    /**
     * Converts this proto_Kind_Rate to JSON.
     * @function toJSON
     * @memberof proto_Kind_Rate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_Kind_Rate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_Kind_Rate;
})();

$root.proto_cli_my_req = (function() {

    /**
     * Properties of a proto_cli_my_req.
     * @exports Iproto_cli_my_req
     * @interface Iproto_cli_my_req
     * @property {number} a proto_cli_my_req a
     */

    /**
     * Constructs a new proto_cli_my_req.
     * @exports proto_cli_my_req
     * @classdesc Represents a proto_cli_my_req.
     * @implements Iproto_cli_my_req
     * @constructor
     * @param {Iproto_cli_my_req=} [properties] Properties to set
     */
    function proto_cli_my_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cli_my_req a.
     * @member {number} a
     * @memberof proto_cli_my_req
     * @instance
     */
    proto_cli_my_req.prototype.a = 0;

    /**
     * Creates a new proto_cli_my_req instance using the specified properties.
     * @function create
     * @memberof proto_cli_my_req
     * @static
     * @param {Iproto_cli_my_req=} [properties] Properties to set
     * @returns {proto_cli_my_req} proto_cli_my_req instance
     */
    proto_cli_my_req.create = function create(properties) {
        return new proto_cli_my_req(properties);
    };

    /**
     * Encodes the specified proto_cli_my_req message. Does not implicitly {@link proto_cli_my_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cli_my_req
     * @static
     * @param {Iproto_cli_my_req} message proto_cli_my_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cli_my_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.a);
        return writer;
    };

    /**
     * Encodes the specified proto_cli_my_req message, length delimited. Does not implicitly {@link proto_cli_my_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cli_my_req
     * @static
     * @param {Iproto_cli_my_req} message proto_cli_my_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cli_my_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cli_my_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cli_my_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cli_my_req} proto_cli_my_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cli_my_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cli_my_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.a = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("a"))
            throw $util.ProtocolError("missing required 'a'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cli_my_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cli_my_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cli_my_req} proto_cli_my_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cli_my_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cli_my_req message.
     * @function verify
     * @memberof proto_cli_my_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cli_my_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.a))
            return "a: integer expected";
        return null;
    };

    /**
     * Creates a proto_cli_my_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cli_my_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cli_my_req} proto_cli_my_req
     */
    proto_cli_my_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cli_my_req)
            return object;
        var message = new $root.proto_cli_my_req();
        if (object.a != null)
            message.a = object.a | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cli_my_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cli_my_req
     * @static
     * @param {proto_cli_my_req} message proto_cli_my_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cli_my_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.a = 0;
        if (message.a != null && message.hasOwnProperty("a"))
            object.a = message.a;
        return object;
    };

    /**
     * Converts this proto_cli_my_req to JSON.
     * @function toJSON
     * @memberof proto_cli_my_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cli_my_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cli_my_req;
})();

$root.proto_Money_DiZhu = (function() {

    /**
     * Properties of a proto_Money_DiZhu.
     * @exports Iproto_Money_DiZhu
     * @interface Iproto_Money_DiZhu
     * @property {number|Long} nMoney proto_Money_DiZhu nMoney
     * @property {number|Long} nDiZhu proto_Money_DiZhu nDiZhu
     */

    /**
     * Constructs a new proto_Money_DiZhu.
     * @exports proto_Money_DiZhu
     * @classdesc Represents a proto_Money_DiZhu.
     * @implements Iproto_Money_DiZhu
     * @constructor
     * @param {Iproto_Money_DiZhu=} [properties] Properties to set
     */
    function proto_Money_DiZhu(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_Money_DiZhu nMoney.
     * @member {number|Long} nMoney
     * @memberof proto_Money_DiZhu
     * @instance
     */
    proto_Money_DiZhu.prototype.nMoney = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * proto_Money_DiZhu nDiZhu.
     * @member {number|Long} nDiZhu
     * @memberof proto_Money_DiZhu
     * @instance
     */
    proto_Money_DiZhu.prototype.nDiZhu = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new proto_Money_DiZhu instance using the specified properties.
     * @function create
     * @memberof proto_Money_DiZhu
     * @static
     * @param {Iproto_Money_DiZhu=} [properties] Properties to set
     * @returns {proto_Money_DiZhu} proto_Money_DiZhu instance
     */
    proto_Money_DiZhu.create = function create(properties) {
        return new proto_Money_DiZhu(properties);
    };

    /**
     * Encodes the specified proto_Money_DiZhu message. Does not implicitly {@link proto_Money_DiZhu.verify|verify} messages.
     * @function encode
     * @memberof proto_Money_DiZhu
     * @static
     * @param {Iproto_Money_DiZhu} message proto_Money_DiZhu message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_Money_DiZhu.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.nMoney);
        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.nDiZhu);
        return writer;
    };

    /**
     * Encodes the specified proto_Money_DiZhu message, length delimited. Does not implicitly {@link proto_Money_DiZhu.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_Money_DiZhu
     * @static
     * @param {Iproto_Money_DiZhu} message proto_Money_DiZhu message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_Money_DiZhu.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_Money_DiZhu message from the specified reader or buffer.
     * @function decode
     * @memberof proto_Money_DiZhu
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_Money_DiZhu} proto_Money_DiZhu
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_Money_DiZhu.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_Money_DiZhu();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nMoney = reader.int64();
                break;
            case 2:
                message.nDiZhu = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nMoney"))
            throw $util.ProtocolError("missing required 'nMoney'", { instance: message });
        if (!message.hasOwnProperty("nDiZhu"))
            throw $util.ProtocolError("missing required 'nDiZhu'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_Money_DiZhu message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_Money_DiZhu
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_Money_DiZhu} proto_Money_DiZhu
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_Money_DiZhu.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_Money_DiZhu message.
     * @function verify
     * @memberof proto_Money_DiZhu
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_Money_DiZhu.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nMoney) && !(message.nMoney && $util.isInteger(message.nMoney.low) && $util.isInteger(message.nMoney.high)))
            return "nMoney: integer|Long expected";
        if (!$util.isInteger(message.nDiZhu) && !(message.nDiZhu && $util.isInteger(message.nDiZhu.low) && $util.isInteger(message.nDiZhu.high)))
            return "nDiZhu: integer|Long expected";
        return null;
    };

    /**
     * Creates a proto_Money_DiZhu message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_Money_DiZhu
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_Money_DiZhu} proto_Money_DiZhu
     */
    proto_Money_DiZhu.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_Money_DiZhu)
            return object;
        var message = new $root.proto_Money_DiZhu();
        if (object.nMoney != null)
            if ($util.Long)
                (message.nMoney = $util.Long.fromValue(object.nMoney)).unsigned = false;
            else if (typeof object.nMoney === "string")
                message.nMoney = parseInt(object.nMoney, 10);
            else if (typeof object.nMoney === "number")
                message.nMoney = object.nMoney;
            else if (typeof object.nMoney === "object")
                message.nMoney = new $util.LongBits(object.nMoney.low >>> 0, object.nMoney.high >>> 0).toNumber();
        if (object.nDiZhu != null)
            if ($util.Long)
                (message.nDiZhu = $util.Long.fromValue(object.nDiZhu)).unsigned = false;
            else if (typeof object.nDiZhu === "string")
                message.nDiZhu = parseInt(object.nDiZhu, 10);
            else if (typeof object.nDiZhu === "number")
                message.nDiZhu = object.nDiZhu;
            else if (typeof object.nDiZhu === "object")
                message.nDiZhu = new $util.LongBits(object.nDiZhu.low >>> 0, object.nDiZhu.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a proto_Money_DiZhu message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_Money_DiZhu
     * @static
     * @param {proto_Money_DiZhu} message proto_Money_DiZhu
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_Money_DiZhu.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nMoney = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nDiZhu = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nDiZhu = options.longs === String ? "0" : 0;
        }
        if (message.nMoney != null && message.hasOwnProperty("nMoney"))
            if (typeof message.nMoney === "number")
                object.nMoney = options.longs === String ? String(message.nMoney) : message.nMoney;
            else
                object.nMoney = options.longs === String ? $util.Long.prototype.toString.call(message.nMoney) : options.longs === Number ? new $util.LongBits(message.nMoney.low >>> 0, message.nMoney.high >>> 0).toNumber() : message.nMoney;
        if (message.nDiZhu != null && message.hasOwnProperty("nDiZhu"))
            if (typeof message.nDiZhu === "number")
                object.nDiZhu = options.longs === String ? String(message.nDiZhu) : message.nDiZhu;
            else
                object.nDiZhu = options.longs === String ? $util.Long.prototype.toString.call(message.nDiZhu) : options.longs === Number ? new $util.LongBits(message.nDiZhu.low >>> 0, message.nDiZhu.high >>> 0).toNumber() : message.nDiZhu;
        return object;
    };

    /**
     * Converts this proto_Money_DiZhu to JSON.
     * @function toJSON
     * @memberof proto_Money_DiZhu
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_Money_DiZhu.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_Money_DiZhu;
})();

$root.proto_gc_card_count_ack1 = (function() {

    /**
     * Properties of a proto_gc_card_count_ack1.
     * @exports Iproto_gc_card_count_ack1
     * @interface Iproto_gc_card_count_ack1
     * @property {number} countsNum proto_gc_card_count_ack1 countsNum
     * @property {Array.<Iproto_CCard>|null} [mVecPutCard] proto_gc_card_count_ack1 mVecPutCard
     */

    /**
     * Constructs a new proto_gc_card_count_ack1.
     * @exports proto_gc_card_count_ack1
     * @classdesc Represents a proto_gc_card_count_ack1.
     * @implements Iproto_gc_card_count_ack1
     * @constructor
     * @param {Iproto_gc_card_count_ack1=} [properties] Properties to set
     */
    function proto_gc_card_count_ack1(properties) {
        this.mVecPutCard = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_card_count_ack1 countsNum.
     * @member {number} countsNum
     * @memberof proto_gc_card_count_ack1
     * @instance
     */
    proto_gc_card_count_ack1.prototype.countsNum = 0;

    /**
     * proto_gc_card_count_ack1 mVecPutCard.
     * @member {Array.<Iproto_CCard>} mVecPutCard
     * @memberof proto_gc_card_count_ack1
     * @instance
     */
    proto_gc_card_count_ack1.prototype.mVecPutCard = $util.emptyArray;

    /**
     * Creates a new proto_gc_card_count_ack1 instance using the specified properties.
     * @function create
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {Iproto_gc_card_count_ack1=} [properties] Properties to set
     * @returns {proto_gc_card_count_ack1} proto_gc_card_count_ack1 instance
     */
    proto_gc_card_count_ack1.create = function create(properties) {
        return new proto_gc_card_count_ack1(properties);
    };

    /**
     * Encodes the specified proto_gc_card_count_ack1 message. Does not implicitly {@link proto_gc_card_count_ack1.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {Iproto_gc_card_count_ack1} message proto_gc_card_count_ack1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_card_count_ack1.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.countsNum);
        if (message.mVecPutCard != null && message.mVecPutCard.length)
            for (var i = 0; i < message.mVecPutCard.length; ++i)
                $root.proto_CCard.encode(message.mVecPutCard[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_card_count_ack1 message, length delimited. Does not implicitly {@link proto_gc_card_count_ack1.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {Iproto_gc_card_count_ack1} message proto_gc_card_count_ack1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_card_count_ack1.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_card_count_ack1 message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_card_count_ack1} proto_gc_card_count_ack1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_card_count_ack1.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_card_count_ack1();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.countsNum = reader.int32();
                break;
            case 2:
                if (!(message.mVecPutCard && message.mVecPutCard.length))
                    message.mVecPutCard = [];
                message.mVecPutCard.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("countsNum"))
            throw $util.ProtocolError("missing required 'countsNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_card_count_ack1 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_card_count_ack1} proto_gc_card_count_ack1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_card_count_ack1.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_card_count_ack1 message.
     * @function verify
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_card_count_ack1.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.countsNum))
            return "countsNum: integer expected";
        if (message.mVecPutCard != null && message.hasOwnProperty("mVecPutCard")) {
            if (!Array.isArray(message.mVecPutCard))
                return "mVecPutCard: array expected";
            for (var i = 0; i < message.mVecPutCard.length; ++i) {
                var error = $root.proto_CCard.verify(message.mVecPutCard[i]);
                if (error)
                    return "mVecPutCard." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_card_count_ack1 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_card_count_ack1} proto_gc_card_count_ack1
     */
    proto_gc_card_count_ack1.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_card_count_ack1)
            return object;
        var message = new $root.proto_gc_card_count_ack1();
        if (object.countsNum != null)
            message.countsNum = object.countsNum | 0;
        if (object.mVecPutCard) {
            if (!Array.isArray(object.mVecPutCard))
                throw TypeError(".proto_gc_card_count_ack1.mVecPutCard: array expected");
            message.mVecPutCard = [];
            for (var i = 0; i < object.mVecPutCard.length; ++i) {
                if (typeof object.mVecPutCard[i] !== "object")
                    throw TypeError(".proto_gc_card_count_ack1.mVecPutCard: object expected");
                message.mVecPutCard[i] = $root.proto_CCard.fromObject(object.mVecPutCard[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_card_count_ack1 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_card_count_ack1
     * @static
     * @param {proto_gc_card_count_ack1} message proto_gc_card_count_ack1
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_card_count_ack1.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mVecPutCard = [];
        if (options.defaults)
            object.countsNum = 0;
        if (message.countsNum != null && message.hasOwnProperty("countsNum"))
            object.countsNum = message.countsNum;
        if (message.mVecPutCard && message.mVecPutCard.length) {
            object.mVecPutCard = [];
            for (var j = 0; j < message.mVecPutCard.length; ++j)
                object.mVecPutCard[j] = $root.proto_CCard.toObject(message.mVecPutCard[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_card_count_ack1 to JSON.
     * @function toJSON
     * @memberof proto_gc_card_count_ack1
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_card_count_ack1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_card_count_ack1;
})();

$root.proto_mj_completedata_req = (function() {

    /**
     * Properties of a proto_mj_completedata_req.
     * @exports Iproto_mj_completedata_req
     * @interface Iproto_mj_completedata_req
     */

    /**
     * Constructs a new proto_mj_completedata_req.
     * @exports proto_mj_completedata_req
     * @classdesc Represents a proto_mj_completedata_req.
     * @implements Iproto_mj_completedata_req
     * @constructor
     * @param {Iproto_mj_completedata_req=} [properties] Properties to set
     */
    function proto_mj_completedata_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_mj_completedata_req instance using the specified properties.
     * @function create
     * @memberof proto_mj_completedata_req
     * @static
     * @param {Iproto_mj_completedata_req=} [properties] Properties to set
     * @returns {proto_mj_completedata_req} proto_mj_completedata_req instance
     */
    proto_mj_completedata_req.create = function create(properties) {
        return new proto_mj_completedata_req(properties);
    };

    /**
     * Encodes the specified proto_mj_completedata_req message. Does not implicitly {@link proto_mj_completedata_req.verify|verify} messages.
     * @function encode
     * @memberof proto_mj_completedata_req
     * @static
     * @param {Iproto_mj_completedata_req} message proto_mj_completedata_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_mj_completedata_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_mj_completedata_req message, length delimited. Does not implicitly {@link proto_mj_completedata_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_mj_completedata_req
     * @static
     * @param {Iproto_mj_completedata_req} message proto_mj_completedata_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_mj_completedata_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_mj_completedata_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_mj_completedata_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_mj_completedata_req} proto_mj_completedata_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_mj_completedata_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_mj_completedata_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_mj_completedata_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_mj_completedata_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_mj_completedata_req} proto_mj_completedata_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_mj_completedata_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_mj_completedata_req message.
     * @function verify
     * @memberof proto_mj_completedata_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_mj_completedata_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_mj_completedata_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_mj_completedata_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_mj_completedata_req} proto_mj_completedata_req
     */
    proto_mj_completedata_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_mj_completedata_req)
            return object;
        return new $root.proto_mj_completedata_req();
    };

    /**
     * Creates a plain object from a proto_mj_completedata_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_mj_completedata_req
     * @static
     * @param {proto_mj_completedata_req} message proto_mj_completedata_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_mj_completedata_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_mj_completedata_req to JSON.
     * @function toJSON
     * @memberof proto_mj_completedata_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_mj_completedata_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_mj_completedata_req;
})();

$root.proto_CCardsType = (function() {

    /**
     * Properties of a proto_CCardsType.
     * @exports Iproto_CCardsType
     * @interface Iproto_CCardsType
     * @property {number} mNTypeBomb proto_CCardsType mNTypeBomb
     * @property {number} mNTypeNum proto_CCardsType mNTypeNum
     * @property {number} mNTypeValue proto_CCardsType mNTypeValue
     */

    /**
     * Constructs a new proto_CCardsType.
     * @exports proto_CCardsType
     * @classdesc Represents a proto_CCardsType.
     * @implements Iproto_CCardsType
     * @constructor
     * @param {Iproto_CCardsType=} [properties] Properties to set
     */
    function proto_CCardsType(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_CCardsType mNTypeBomb.
     * @member {number} mNTypeBomb
     * @memberof proto_CCardsType
     * @instance
     */
    proto_CCardsType.prototype.mNTypeBomb = 0;

    /**
     * proto_CCardsType mNTypeNum.
     * @member {number} mNTypeNum
     * @memberof proto_CCardsType
     * @instance
     */
    proto_CCardsType.prototype.mNTypeNum = 0;

    /**
     * proto_CCardsType mNTypeValue.
     * @member {number} mNTypeValue
     * @memberof proto_CCardsType
     * @instance
     */
    proto_CCardsType.prototype.mNTypeValue = 0;

    /**
     * Creates a new proto_CCardsType instance using the specified properties.
     * @function create
     * @memberof proto_CCardsType
     * @static
     * @param {Iproto_CCardsType=} [properties] Properties to set
     * @returns {proto_CCardsType} proto_CCardsType instance
     */
    proto_CCardsType.create = function create(properties) {
        return new proto_CCardsType(properties);
    };

    /**
     * Encodes the specified proto_CCardsType message. Does not implicitly {@link proto_CCardsType.verify|verify} messages.
     * @function encode
     * @memberof proto_CCardsType
     * @static
     * @param {Iproto_CCardsType} message proto_CCardsType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_CCardsType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mNTypeBomb);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mNTypeNum);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mNTypeValue);
        return writer;
    };

    /**
     * Encodes the specified proto_CCardsType message, length delimited. Does not implicitly {@link proto_CCardsType.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_CCardsType
     * @static
     * @param {Iproto_CCardsType} message proto_CCardsType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_CCardsType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_CCardsType message from the specified reader or buffer.
     * @function decode
     * @memberof proto_CCardsType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_CCardsType} proto_CCardsType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_CCardsType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_CCardsType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.mNTypeBomb = reader.int32();
                break;
            case 2:
                message.mNTypeNum = reader.int32();
                break;
            case 3:
                message.mNTypeValue = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mNTypeBomb"))
            throw $util.ProtocolError("missing required 'mNTypeBomb'", { instance: message });
        if (!message.hasOwnProperty("mNTypeNum"))
            throw $util.ProtocolError("missing required 'mNTypeNum'", { instance: message });
        if (!message.hasOwnProperty("mNTypeValue"))
            throw $util.ProtocolError("missing required 'mNTypeValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_CCardsType message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_CCardsType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_CCardsType} proto_CCardsType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_CCardsType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_CCardsType message.
     * @function verify
     * @memberof proto_CCardsType
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_CCardsType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mNTypeBomb))
            return "mNTypeBomb: integer expected";
        if (!$util.isInteger(message.mNTypeNum))
            return "mNTypeNum: integer expected";
        if (!$util.isInteger(message.mNTypeValue))
            return "mNTypeValue: integer expected";
        return null;
    };

    /**
     * Creates a proto_CCardsType message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_CCardsType
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_CCardsType} proto_CCardsType
     */
    proto_CCardsType.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_CCardsType)
            return object;
        var message = new $root.proto_CCardsType();
        if (object.mNTypeBomb != null)
            message.mNTypeBomb = object.mNTypeBomb | 0;
        if (object.mNTypeNum != null)
            message.mNTypeNum = object.mNTypeNum | 0;
        if (object.mNTypeValue != null)
            message.mNTypeValue = object.mNTypeValue | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_CCardsType message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_CCardsType
     * @static
     * @param {proto_CCardsType} message proto_CCardsType
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_CCardsType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mNTypeBomb = 0;
            object.mNTypeNum = 0;
            object.mNTypeValue = 0;
        }
        if (message.mNTypeBomb != null && message.hasOwnProperty("mNTypeBomb"))
            object.mNTypeBomb = message.mNTypeBomb;
        if (message.mNTypeNum != null && message.hasOwnProperty("mNTypeNum"))
            object.mNTypeNum = message.mNTypeNum;
        if (message.mNTypeValue != null && message.hasOwnProperty("mNTypeValue"))
            object.mNTypeValue = message.mNTypeValue;
        return object;
    };

    /**
     * Converts this proto_CCardsType to JSON.
     * @function toJSON
     * @memberof proto_CCardsType
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_CCardsType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_CCardsType;
})();

$root.proto_svr_test_not = (function() {

    /**
     * Properties of a proto_svr_test_not.
     * @exports Iproto_svr_test_not
     * @interface Iproto_svr_test_not
     * @property {number} cTest proto_svr_test_not cTest
     * @property {number} nTest proto_svr_test_not nTest
     * @property {Array.<number>|null} [vecTest] proto_svr_test_not vecTest
     */

    /**
     * Constructs a new proto_svr_test_not.
     * @exports proto_svr_test_not
     * @classdesc Represents a proto_svr_test_not.
     * @implements Iproto_svr_test_not
     * @constructor
     * @param {Iproto_svr_test_not=} [properties] Properties to set
     */
    function proto_svr_test_not(properties) {
        this.vecTest = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_svr_test_not cTest.
     * @member {number} cTest
     * @memberof proto_svr_test_not
     * @instance
     */
    proto_svr_test_not.prototype.cTest = 0;

    /**
     * proto_svr_test_not nTest.
     * @member {number} nTest
     * @memberof proto_svr_test_not
     * @instance
     */
    proto_svr_test_not.prototype.nTest = 0;

    /**
     * proto_svr_test_not vecTest.
     * @member {Array.<number>} vecTest
     * @memberof proto_svr_test_not
     * @instance
     */
    proto_svr_test_not.prototype.vecTest = $util.emptyArray;

    /**
     * Creates a new proto_svr_test_not instance using the specified properties.
     * @function create
     * @memberof proto_svr_test_not
     * @static
     * @param {Iproto_svr_test_not=} [properties] Properties to set
     * @returns {proto_svr_test_not} proto_svr_test_not instance
     */
    proto_svr_test_not.create = function create(properties) {
        return new proto_svr_test_not(properties);
    };

    /**
     * Encodes the specified proto_svr_test_not message. Does not implicitly {@link proto_svr_test_not.verify|verify} messages.
     * @function encode
     * @memberof proto_svr_test_not
     * @static
     * @param {Iproto_svr_test_not} message proto_svr_test_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_svr_test_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cTest);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nTest);
        if (message.vecTest != null && message.vecTest.length)
            for (var i = 0; i < message.vecTest.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.vecTest[i]);
        return writer;
    };

    /**
     * Encodes the specified proto_svr_test_not message, length delimited. Does not implicitly {@link proto_svr_test_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_svr_test_not
     * @static
     * @param {Iproto_svr_test_not} message proto_svr_test_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_svr_test_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_svr_test_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_svr_test_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_svr_test_not} proto_svr_test_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_svr_test_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_svr_test_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cTest = reader.int32();
                break;
            case 2:
                message.nTest = reader.int32();
                break;
            case 3:
                if (!(message.vecTest && message.vecTest.length))
                    message.vecTest = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecTest.push(reader.int32());
                } else
                    message.vecTest.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cTest"))
            throw $util.ProtocolError("missing required 'cTest'", { instance: message });
        if (!message.hasOwnProperty("nTest"))
            throw $util.ProtocolError("missing required 'nTest'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_svr_test_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_svr_test_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_svr_test_not} proto_svr_test_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_svr_test_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_svr_test_not message.
     * @function verify
     * @memberof proto_svr_test_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_svr_test_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cTest))
            return "cTest: integer expected";
        if (!$util.isInteger(message.nTest))
            return "nTest: integer expected";
        if (message.vecTest != null && message.hasOwnProperty("vecTest")) {
            if (!Array.isArray(message.vecTest))
                return "vecTest: array expected";
            for (var i = 0; i < message.vecTest.length; ++i)
                if (!$util.isInteger(message.vecTest[i]))
                    return "vecTest: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a proto_svr_test_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_svr_test_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_svr_test_not} proto_svr_test_not
     */
    proto_svr_test_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_svr_test_not)
            return object;
        var message = new $root.proto_svr_test_not();
        if (object.cTest != null)
            message.cTest = object.cTest | 0;
        if (object.nTest != null)
            message.nTest = object.nTest | 0;
        if (object.vecTest) {
            if (!Array.isArray(object.vecTest))
                throw TypeError(".proto_svr_test_not.vecTest: array expected");
            message.vecTest = [];
            for (var i = 0; i < object.vecTest.length; ++i)
                message.vecTest[i] = object.vecTest[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_svr_test_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_svr_test_not
     * @static
     * @param {proto_svr_test_not} message proto_svr_test_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_svr_test_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecTest = [];
        if (options.defaults) {
            object.cTest = 0;
            object.nTest = 0;
        }
        if (message.cTest != null && message.hasOwnProperty("cTest"))
            object.cTest = message.cTest;
        if (message.nTest != null && message.hasOwnProperty("nTest"))
            object.nTest = message.nTest;
        if (message.vecTest && message.vecTest.length) {
            object.vecTest = [];
            for (var j = 0; j < message.vecTest.length; ++j)
                object.vecTest[j] = message.vecTest[j];
        }
        return object;
    };

    /**
     * Converts this proto_svr_test_not to JSON.
     * @function toJSON
     * @memberof proto_svr_test_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_svr_test_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_svr_test_not;
})();

$root.proto_sic_bet_clear_ack = (function() {

    /**
     * Properties of a proto_sic_bet_clear_ack.
     * @exports Iproto_sic_bet_clear_ack
     * @interface Iproto_sic_bet_clear_ack
     * @property {number} nBetUpdateAckTag proto_sic_bet_clear_ack nBetUpdateAckTag
     * @property {number} nAmountBack proto_sic_bet_clear_ack nAmountBack
     * @property {number} nAmountTotal proto_sic_bet_clear_ack nAmountTotal
     */

    /**
     * Constructs a new proto_sic_bet_clear_ack.
     * @exports proto_sic_bet_clear_ack
     * @classdesc Represents a proto_sic_bet_clear_ack.
     * @implements Iproto_sic_bet_clear_ack
     * @constructor
     * @param {Iproto_sic_bet_clear_ack=} [properties] Properties to set
     */
    function proto_sic_bet_clear_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_bet_clear_ack nBetUpdateAckTag.
     * @member {number} nBetUpdateAckTag
     * @memberof proto_sic_bet_clear_ack
     * @instance
     */
    proto_sic_bet_clear_ack.prototype.nBetUpdateAckTag = 0;

    /**
     * proto_sic_bet_clear_ack nAmountBack.
     * @member {number} nAmountBack
     * @memberof proto_sic_bet_clear_ack
     * @instance
     */
    proto_sic_bet_clear_ack.prototype.nAmountBack = 0;

    /**
     * proto_sic_bet_clear_ack nAmountTotal.
     * @member {number} nAmountTotal
     * @memberof proto_sic_bet_clear_ack
     * @instance
     */
    proto_sic_bet_clear_ack.prototype.nAmountTotal = 0;

    /**
     * Creates a new proto_sic_bet_clear_ack instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {Iproto_sic_bet_clear_ack=} [properties] Properties to set
     * @returns {proto_sic_bet_clear_ack} proto_sic_bet_clear_ack instance
     */
    proto_sic_bet_clear_ack.create = function create(properties) {
        return new proto_sic_bet_clear_ack(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_clear_ack message. Does not implicitly {@link proto_sic_bet_clear_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {Iproto_sic_bet_clear_ack} message proto_sic_bet_clear_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_clear_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nBetUpdateAckTag);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nAmountBack);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nAmountTotal);
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_clear_ack message, length delimited. Does not implicitly {@link proto_sic_bet_clear_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {Iproto_sic_bet_clear_ack} message proto_sic_bet_clear_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_clear_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_clear_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_clear_ack} proto_sic_bet_clear_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_clear_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_clear_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nBetUpdateAckTag = reader.int32();
                break;
            case 2:
                message.nAmountBack = reader.int32();
                break;
            case 3:
                message.nAmountTotal = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nBetUpdateAckTag"))
            throw $util.ProtocolError("missing required 'nBetUpdateAckTag'", { instance: message });
        if (!message.hasOwnProperty("nAmountBack"))
            throw $util.ProtocolError("missing required 'nAmountBack'", { instance: message });
        if (!message.hasOwnProperty("nAmountTotal"))
            throw $util.ProtocolError("missing required 'nAmountTotal'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_bet_clear_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_clear_ack} proto_sic_bet_clear_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_clear_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_clear_ack message.
     * @function verify
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_clear_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nBetUpdateAckTag))
            return "nBetUpdateAckTag: integer expected";
        if (!$util.isInteger(message.nAmountBack))
            return "nAmountBack: integer expected";
        if (!$util.isInteger(message.nAmountTotal))
            return "nAmountTotal: integer expected";
        return null;
    };

    /**
     * Creates a proto_sic_bet_clear_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_clear_ack} proto_sic_bet_clear_ack
     */
    proto_sic_bet_clear_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_clear_ack)
            return object;
        var message = new $root.proto_sic_bet_clear_ack();
        if (object.nBetUpdateAckTag != null)
            message.nBetUpdateAckTag = object.nBetUpdateAckTag | 0;
        if (object.nAmountBack != null)
            message.nAmountBack = object.nAmountBack | 0;
        if (object.nAmountTotal != null)
            message.nAmountTotal = object.nAmountTotal | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_bet_clear_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_clear_ack
     * @static
     * @param {proto_sic_bet_clear_ack} message proto_sic_bet_clear_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_clear_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nBetUpdateAckTag = 0;
            object.nAmountBack = 0;
            object.nAmountTotal = 0;
        }
        if (message.nBetUpdateAckTag != null && message.hasOwnProperty("nBetUpdateAckTag"))
            object.nBetUpdateAckTag = message.nBetUpdateAckTag;
        if (message.nAmountBack != null && message.hasOwnProperty("nAmountBack"))
            object.nAmountBack = message.nAmountBack;
        if (message.nAmountTotal != null && message.hasOwnProperty("nAmountTotal"))
            object.nAmountTotal = message.nAmountTotal;
        return object;
    };

    /**
     * Converts this proto_sic_bet_clear_ack to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_clear_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_clear_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_clear_ack;
})();

$root.proto_gc_refresh_card_not = (function() {

    /**
     * Properties of a proto_gc_refresh_card_not.
     * @exports Iproto_gc_refresh_card_not
     * @interface Iproto_gc_refresh_card_not
     * @property {number} cChairID proto_gc_refresh_card_not cChairID
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_refresh_card_not vecCards
     */

    /**
     * Constructs a new proto_gc_refresh_card_not.
     * @exports proto_gc_refresh_card_not
     * @classdesc Represents a proto_gc_refresh_card_not.
     * @implements Iproto_gc_refresh_card_not
     * @constructor
     * @param {Iproto_gc_refresh_card_not=} [properties] Properties to set
     */
    function proto_gc_refresh_card_not(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_refresh_card_not cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_refresh_card_not
     * @instance
     */
    proto_gc_refresh_card_not.prototype.cChairID = 0;

    /**
     * proto_gc_refresh_card_not vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_refresh_card_not
     * @instance
     */
    proto_gc_refresh_card_not.prototype.vecCards = $util.emptyArray;

    /**
     * Creates a new proto_gc_refresh_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {Iproto_gc_refresh_card_not=} [properties] Properties to set
     * @returns {proto_gc_refresh_card_not} proto_gc_refresh_card_not instance
     */
    proto_gc_refresh_card_not.create = function create(properties) {
        return new proto_gc_refresh_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_refresh_card_not message. Does not implicitly {@link proto_gc_refresh_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {Iproto_gc_refresh_card_not} message proto_gc_refresh_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_refresh_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_refresh_card_not message, length delimited. Does not implicitly {@link proto_gc_refresh_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {Iproto_gc_refresh_card_not} message proto_gc_refresh_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_refresh_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_refresh_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_refresh_card_not} proto_gc_refresh_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_refresh_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_refresh_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_refresh_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_refresh_card_not} proto_gc_refresh_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_refresh_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_refresh_card_not message.
     * @function verify
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_refresh_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_refresh_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_refresh_card_not} proto_gc_refresh_card_not
     */
    proto_gc_refresh_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_refresh_card_not)
            return object;
        var message = new $root.proto_gc_refresh_card_not();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_refresh_card_not.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_refresh_card_not.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_refresh_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_refresh_card_not
     * @static
     * @param {proto_gc_refresh_card_not} message proto_gc_refresh_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_refresh_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults)
            object.cChairID = 0;
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_refresh_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_refresh_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_refresh_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_refresh_card_not;
})();

$root.proto_gc_show_card_req = (function() {

    /**
     * Properties of a proto_gc_show_card_req.
     * @exports Iproto_gc_show_card_req
     * @interface Iproto_gc_show_card_req
     * @property {number} nSerialID proto_gc_show_card_req nSerialID
     * @property {number} nShowCardType proto_gc_show_card_req nShowCardType
     * @property {number} nShowCardBet proto_gc_show_card_req nShowCardBet
     */

    /**
     * Constructs a new proto_gc_show_card_req.
     * @exports proto_gc_show_card_req
     * @classdesc Represents a proto_gc_show_card_req.
     * @implements Iproto_gc_show_card_req
     * @constructor
     * @param {Iproto_gc_show_card_req=} [properties] Properties to set
     */
    function proto_gc_show_card_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_show_card_req nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_show_card_req
     * @instance
     */
    proto_gc_show_card_req.prototype.nSerialID = 0;

    /**
     * proto_gc_show_card_req nShowCardType.
     * @member {number} nShowCardType
     * @memberof proto_gc_show_card_req
     * @instance
     */
    proto_gc_show_card_req.prototype.nShowCardType = 0;

    /**
     * proto_gc_show_card_req nShowCardBet.
     * @member {number} nShowCardBet
     * @memberof proto_gc_show_card_req
     * @instance
     */
    proto_gc_show_card_req.prototype.nShowCardBet = 0;

    /**
     * Creates a new proto_gc_show_card_req instance using the specified properties.
     * @function create
     * @memberof proto_gc_show_card_req
     * @static
     * @param {Iproto_gc_show_card_req=} [properties] Properties to set
     * @returns {proto_gc_show_card_req} proto_gc_show_card_req instance
     */
    proto_gc_show_card_req.create = function create(properties) {
        return new proto_gc_show_card_req(properties);
    };

    /**
     * Encodes the specified proto_gc_show_card_req message. Does not implicitly {@link proto_gc_show_card_req.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_show_card_req
     * @static
     * @param {Iproto_gc_show_card_req} message proto_gc_show_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_show_card_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nSerialID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nShowCardType);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nShowCardBet);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_show_card_req message, length delimited. Does not implicitly {@link proto_gc_show_card_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_show_card_req
     * @static
     * @param {Iproto_gc_show_card_req} message proto_gc_show_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_show_card_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_show_card_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_show_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_show_card_req} proto_gc_show_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_show_card_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_show_card_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nSerialID = reader.int32();
                break;
            case 2:
                message.nShowCardType = reader.int32();
                break;
            case 3:
                message.nShowCardBet = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        if (!message.hasOwnProperty("nShowCardType"))
            throw $util.ProtocolError("missing required 'nShowCardType'", { instance: message });
        if (!message.hasOwnProperty("nShowCardBet"))
            throw $util.ProtocolError("missing required 'nShowCardBet'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_show_card_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_show_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_show_card_req} proto_gc_show_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_show_card_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_show_card_req message.
     * @function verify
     * @memberof proto_gc_show_card_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_show_card_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        if (!$util.isInteger(message.nShowCardType))
            return "nShowCardType: integer expected";
        if (!$util.isInteger(message.nShowCardBet))
            return "nShowCardBet: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_show_card_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_show_card_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_show_card_req} proto_gc_show_card_req
     */
    proto_gc_show_card_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_show_card_req)
            return object;
        var message = new $root.proto_gc_show_card_req();
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        if (object.nShowCardType != null)
            message.nShowCardType = object.nShowCardType | 0;
        if (object.nShowCardBet != null)
            message.nShowCardBet = object.nShowCardBet | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_show_card_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_show_card_req
     * @static
     * @param {proto_gc_show_card_req} message proto_gc_show_card_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_show_card_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nSerialID = 0;
            object.nShowCardType = 0;
            object.nShowCardBet = 0;
        }
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        if (message.nShowCardType != null && message.hasOwnProperty("nShowCardType"))
            object.nShowCardType = message.nShowCardType;
        if (message.nShowCardBet != null && message.hasOwnProperty("nShowCardBet"))
            object.nShowCardBet = message.nShowCardBet;
        return object;
    };

    /**
     * Converts this proto_gc_show_card_req to JSON.
     * @function toJSON
     * @memberof proto_gc_show_card_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_show_card_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_show_card_req;
})();

$root.proto_cg_auto_req = (function() {

    /**
     * Properties of a proto_cg_auto_req.
     * @exports Iproto_cg_auto_req
     * @interface Iproto_cg_auto_req
     * @property {number} cAuto proto_cg_auto_req cAuto
     */

    /**
     * Constructs a new proto_cg_auto_req.
     * @exports proto_cg_auto_req
     * @classdesc Represents a proto_cg_auto_req.
     * @implements Iproto_cg_auto_req
     * @constructor
     * @param {Iproto_cg_auto_req=} [properties] Properties to set
     */
    function proto_cg_auto_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_auto_req cAuto.
     * @member {number} cAuto
     * @memberof proto_cg_auto_req
     * @instance
     */
    proto_cg_auto_req.prototype.cAuto = 0;

    /**
     * Creates a new proto_cg_auto_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_auto_req
     * @static
     * @param {Iproto_cg_auto_req=} [properties] Properties to set
     * @returns {proto_cg_auto_req} proto_cg_auto_req instance
     */
    proto_cg_auto_req.create = function create(properties) {
        return new proto_cg_auto_req(properties);
    };

    /**
     * Encodes the specified proto_cg_auto_req message. Does not implicitly {@link proto_cg_auto_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_auto_req
     * @static
     * @param {Iproto_cg_auto_req} message proto_cg_auto_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_auto_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cAuto);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_auto_req message, length delimited. Does not implicitly {@link proto_cg_auto_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_auto_req
     * @static
     * @param {Iproto_cg_auto_req} message proto_cg_auto_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_auto_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_auto_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_auto_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_auto_req} proto_cg_auto_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_auto_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_auto_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cAuto = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cAuto"))
            throw $util.ProtocolError("missing required 'cAuto'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_auto_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_auto_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_auto_req} proto_cg_auto_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_auto_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_auto_req message.
     * @function verify
     * @memberof proto_cg_auto_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_auto_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cAuto))
            return "cAuto: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_auto_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_auto_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_auto_req} proto_cg_auto_req
     */
    proto_cg_auto_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_auto_req)
            return object;
        var message = new $root.proto_cg_auto_req();
        if (object.cAuto != null)
            message.cAuto = object.cAuto | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_auto_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_auto_req
     * @static
     * @param {proto_cg_auto_req} message proto_cg_auto_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_auto_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cAuto = 0;
        if (message.cAuto != null && message.hasOwnProperty("cAuto"))
            object.cAuto = message.cAuto;
        return object;
    };

    /**
     * Converts this proto_cg_auto_req to JSON.
     * @function toJSON
     * @memberof proto_cg_auto_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_auto_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_auto_req;
})();

$root.proto_sic_history_req = (function() {

    /**
     * Properties of a proto_sic_history_req.
     * @exports Iproto_sic_history_req
     * @interface Iproto_sic_history_req
     */

    /**
     * Constructs a new proto_sic_history_req.
     * @exports proto_sic_history_req
     * @classdesc Represents a proto_sic_history_req.
     * @implements Iproto_sic_history_req
     * @constructor
     * @param {Iproto_sic_history_req=} [properties] Properties to set
     */
    function proto_sic_history_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_sic_history_req instance using the specified properties.
     * @function create
     * @memberof proto_sic_history_req
     * @static
     * @param {Iproto_sic_history_req=} [properties] Properties to set
     * @returns {proto_sic_history_req} proto_sic_history_req instance
     */
    proto_sic_history_req.create = function create(properties) {
        return new proto_sic_history_req(properties);
    };

    /**
     * Encodes the specified proto_sic_history_req message. Does not implicitly {@link proto_sic_history_req.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_history_req
     * @static
     * @param {Iproto_sic_history_req} message proto_sic_history_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_history_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_history_req message, length delimited. Does not implicitly {@link proto_sic_history_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_history_req
     * @static
     * @param {Iproto_sic_history_req} message proto_sic_history_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_history_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_history_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_history_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_history_req} proto_sic_history_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_history_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_history_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_sic_history_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_history_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_history_req} proto_sic_history_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_history_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_history_req message.
     * @function verify
     * @memberof proto_sic_history_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_history_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_sic_history_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_history_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_history_req} proto_sic_history_req
     */
    proto_sic_history_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_history_req)
            return object;
        return new $root.proto_sic_history_req();
    };

    /**
     * Creates a plain object from a proto_sic_history_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_history_req
     * @static
     * @param {proto_sic_history_req} message proto_sic_history_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_history_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_sic_history_req to JSON.
     * @function toJSON
     * @memberof proto_sic_history_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_history_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_history_req;
})();

$root.proto_cg_card_count_req = (function() {

    /**
     * Properties of a proto_cg_card_count_req.
     * @exports Iproto_cg_card_count_req
     * @interface Iproto_cg_card_count_req
     */

    /**
     * Constructs a new proto_cg_card_count_req.
     * @exports proto_cg_card_count_req
     * @classdesc Represents a proto_cg_card_count_req.
     * @implements Iproto_cg_card_count_req
     * @constructor
     * @param {Iproto_cg_card_count_req=} [properties] Properties to set
     */
    function proto_cg_card_count_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_card_count_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_card_count_req
     * @static
     * @param {Iproto_cg_card_count_req=} [properties] Properties to set
     * @returns {proto_cg_card_count_req} proto_cg_card_count_req instance
     */
    proto_cg_card_count_req.create = function create(properties) {
        return new proto_cg_card_count_req(properties);
    };

    /**
     * Encodes the specified proto_cg_card_count_req message. Does not implicitly {@link proto_cg_card_count_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_card_count_req
     * @static
     * @param {Iproto_cg_card_count_req} message proto_cg_card_count_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_card_count_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_card_count_req message, length delimited. Does not implicitly {@link proto_cg_card_count_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_card_count_req
     * @static
     * @param {Iproto_cg_card_count_req} message proto_cg_card_count_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_card_count_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_card_count_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_card_count_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_card_count_req} proto_cg_card_count_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_card_count_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_card_count_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_card_count_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_card_count_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_card_count_req} proto_cg_card_count_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_card_count_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_card_count_req message.
     * @function verify
     * @memberof proto_cg_card_count_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_card_count_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_card_count_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_card_count_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_card_count_req} proto_cg_card_count_req
     */
    proto_cg_card_count_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_card_count_req)
            return object;
        return new $root.proto_cg_card_count_req();
    };

    /**
     * Creates a plain object from a proto_cg_card_count_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_card_count_req
     * @static
     * @param {proto_cg_card_count_req} message proto_cg_card_count_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_card_count_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_card_count_req to JSON.
     * @function toJSON
     * @memberof proto_cg_card_count_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_card_count_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_card_count_req;
})();

$root.proto_gc_task_complete_not = (function() {

    /**
     * Properties of a proto_gc_task_complete_not.
     * @exports Iproto_gc_task_complete_not
     * @interface Iproto_gc_task_complete_not
     * @property {number} chairId proto_gc_task_complete_not chairId
     * @property {number} taskStatus proto_gc_task_complete_not taskStatus
     */

    /**
     * Constructs a new proto_gc_task_complete_not.
     * @exports proto_gc_task_complete_not
     * @classdesc Represents a proto_gc_task_complete_not.
     * @implements Iproto_gc_task_complete_not
     * @constructor
     * @param {Iproto_gc_task_complete_not=} [properties] Properties to set
     */
    function proto_gc_task_complete_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_task_complete_not chairId.
     * @member {number} chairId
     * @memberof proto_gc_task_complete_not
     * @instance
     */
    proto_gc_task_complete_not.prototype.chairId = 0;

    /**
     * proto_gc_task_complete_not taskStatus.
     * @member {number} taskStatus
     * @memberof proto_gc_task_complete_not
     * @instance
     */
    proto_gc_task_complete_not.prototype.taskStatus = 0;

    /**
     * Creates a new proto_gc_task_complete_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {Iproto_gc_task_complete_not=} [properties] Properties to set
     * @returns {proto_gc_task_complete_not} proto_gc_task_complete_not instance
     */
    proto_gc_task_complete_not.create = function create(properties) {
        return new proto_gc_task_complete_not(properties);
    };

    /**
     * Encodes the specified proto_gc_task_complete_not message. Does not implicitly {@link proto_gc_task_complete_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {Iproto_gc_task_complete_not} message proto_gc_task_complete_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_task_complete_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.chairId);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskStatus);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_task_complete_not message, length delimited. Does not implicitly {@link proto_gc_task_complete_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {Iproto_gc_task_complete_not} message proto_gc_task_complete_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_task_complete_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_task_complete_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_task_complete_not} proto_gc_task_complete_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_task_complete_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_task_complete_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.chairId = reader.int32();
                break;
            case 2:
                message.taskStatus = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("chairId"))
            throw $util.ProtocolError("missing required 'chairId'", { instance: message });
        if (!message.hasOwnProperty("taskStatus"))
            throw $util.ProtocolError("missing required 'taskStatus'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_task_complete_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_task_complete_not} proto_gc_task_complete_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_task_complete_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_task_complete_not message.
     * @function verify
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_task_complete_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.chairId))
            return "chairId: integer expected";
        if (!$util.isInteger(message.taskStatus))
            return "taskStatus: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_task_complete_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_task_complete_not} proto_gc_task_complete_not
     */
    proto_gc_task_complete_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_task_complete_not)
            return object;
        var message = new $root.proto_gc_task_complete_not();
        if (object.chairId != null)
            message.chairId = object.chairId | 0;
        if (object.taskStatus != null)
            message.taskStatus = object.taskStatus | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_task_complete_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_task_complete_not
     * @static
     * @param {proto_gc_task_complete_not} message proto_gc_task_complete_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_task_complete_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.chairId = 0;
            object.taskStatus = 0;
        }
        if (message.chairId != null && message.hasOwnProperty("chairId"))
            object.chairId = message.chairId;
        if (message.taskStatus != null && message.hasOwnProperty("taskStatus"))
            object.taskStatus = message.taskStatus;
        return object;
    };

    /**
     * Converts this proto_gc_task_complete_not to JSON.
     * @function toJSON
     * @memberof proto_gc_task_complete_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_task_complete_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_task_complete_not;
})();

$root.proto_cg_call_score_ack = (function() {

    /**
     * Properties of a proto_cg_call_score_ack.
     * @exports Iproto_cg_call_score_ack
     * @interface Iproto_cg_call_score_ack
     * @property {number} nScore proto_cg_call_score_ack nScore
     * @property {number} nSerialID proto_cg_call_score_ack nSerialID
     */

    /**
     * Constructs a new proto_cg_call_score_ack.
     * @exports proto_cg_call_score_ack
     * @classdesc Represents a proto_cg_call_score_ack.
     * @implements Iproto_cg_call_score_ack
     * @constructor
     * @param {Iproto_cg_call_score_ack=} [properties] Properties to set
     */
    function proto_cg_call_score_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_call_score_ack nScore.
     * @member {number} nScore
     * @memberof proto_cg_call_score_ack
     * @instance
     */
    proto_cg_call_score_ack.prototype.nScore = 0;

    /**
     * proto_cg_call_score_ack nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_call_score_ack
     * @instance
     */
    proto_cg_call_score_ack.prototype.nSerialID = 0;

    /**
     * Creates a new proto_cg_call_score_ack instance using the specified properties.
     * @function create
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {Iproto_cg_call_score_ack=} [properties] Properties to set
     * @returns {proto_cg_call_score_ack} proto_cg_call_score_ack instance
     */
    proto_cg_call_score_ack.create = function create(properties) {
        return new proto_cg_call_score_ack(properties);
    };

    /**
     * Encodes the specified proto_cg_call_score_ack message. Does not implicitly {@link proto_cg_call_score_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {Iproto_cg_call_score_ack} message proto_cg_call_score_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_call_score_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nScore);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_call_score_ack message, length delimited. Does not implicitly {@link proto_cg_call_score_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {Iproto_cg_call_score_ack} message proto_cg_call_score_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_call_score_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_call_score_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_call_score_ack} proto_cg_call_score_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_call_score_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_call_score_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nScore = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nScore"))
            throw $util.ProtocolError("missing required 'nScore'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_call_score_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_call_score_ack} proto_cg_call_score_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_call_score_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_call_score_ack message.
     * @function verify
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_call_score_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nScore))
            return "nScore: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_call_score_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_call_score_ack} proto_cg_call_score_ack
     */
    proto_cg_call_score_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_call_score_ack)
            return object;
        var message = new $root.proto_cg_call_score_ack();
        if (object.nScore != null)
            message.nScore = object.nScore | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_call_score_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_call_score_ack
     * @static
     * @param {proto_cg_call_score_ack} message proto_cg_call_score_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_call_score_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nScore = 0;
            object.nSerialID = 0;
        }
        if (message.nScore != null && message.hasOwnProperty("nScore"))
            object.nScore = message.nScore;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_cg_call_score_ack to JSON.
     * @function toJSON
     * @memberof proto_cg_call_score_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_call_score_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_call_score_ack;
})();

$root.proto_sic_show_light_cell_not = (function() {

    /**
     * Properties of a proto_sic_show_light_cell_not.
     * @exports Iproto_sic_show_light_cell_not
     * @interface Iproto_sic_show_light_cell_not
     */

    /**
     * Constructs a new proto_sic_show_light_cell_not.
     * @exports proto_sic_show_light_cell_not
     * @classdesc Represents a proto_sic_show_light_cell_not.
     * @implements Iproto_sic_show_light_cell_not
     * @constructor
     * @param {Iproto_sic_show_light_cell_not=} [properties] Properties to set
     */
    function proto_sic_show_light_cell_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_sic_show_light_cell_not instance using the specified properties.
     * @function create
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {Iproto_sic_show_light_cell_not=} [properties] Properties to set
     * @returns {proto_sic_show_light_cell_not} proto_sic_show_light_cell_not instance
     */
    proto_sic_show_light_cell_not.create = function create(properties) {
        return new proto_sic_show_light_cell_not(properties);
    };

    /**
     * Encodes the specified proto_sic_show_light_cell_not message. Does not implicitly {@link proto_sic_show_light_cell_not.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {Iproto_sic_show_light_cell_not} message proto_sic_show_light_cell_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_show_light_cell_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_show_light_cell_not message, length delimited. Does not implicitly {@link proto_sic_show_light_cell_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {Iproto_sic_show_light_cell_not} message proto_sic_show_light_cell_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_show_light_cell_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_show_light_cell_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_show_light_cell_not} proto_sic_show_light_cell_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_show_light_cell_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_show_light_cell_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_sic_show_light_cell_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_show_light_cell_not} proto_sic_show_light_cell_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_show_light_cell_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_show_light_cell_not message.
     * @function verify
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_show_light_cell_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_sic_show_light_cell_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_show_light_cell_not} proto_sic_show_light_cell_not
     */
    proto_sic_show_light_cell_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_show_light_cell_not)
            return object;
        return new $root.proto_sic_show_light_cell_not();
    };

    /**
     * Creates a plain object from a proto_sic_show_light_cell_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_show_light_cell_not
     * @static
     * @param {proto_sic_show_light_cell_not} message proto_sic_show_light_cell_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_show_light_cell_not.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_sic_show_light_cell_not to JSON.
     * @function toJSON
     * @memberof proto_sic_show_light_cell_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_show_light_cell_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_show_light_cell_not;
})();

$root.proto_gc_call_score_req = (function() {

    /**
     * Properties of a proto_gc_call_score_req.
     * @exports Iproto_gc_call_score_req
     * @interface Iproto_gc_call_score_req
     * @property {number} nScore proto_gc_call_score_req nScore
     * @property {number} nSerialID proto_gc_call_score_req nSerialID
     */

    /**
     * Constructs a new proto_gc_call_score_req.
     * @exports proto_gc_call_score_req
     * @classdesc Represents a proto_gc_call_score_req.
     * @implements Iproto_gc_call_score_req
     * @constructor
     * @param {Iproto_gc_call_score_req=} [properties] Properties to set
     */
    function proto_gc_call_score_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_call_score_req nScore.
     * @member {number} nScore
     * @memberof proto_gc_call_score_req
     * @instance
     */
    proto_gc_call_score_req.prototype.nScore = 0;

    /**
     * proto_gc_call_score_req nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_call_score_req
     * @instance
     */
    proto_gc_call_score_req.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_call_score_req instance using the specified properties.
     * @function create
     * @memberof proto_gc_call_score_req
     * @static
     * @param {Iproto_gc_call_score_req=} [properties] Properties to set
     * @returns {proto_gc_call_score_req} proto_gc_call_score_req instance
     */
    proto_gc_call_score_req.create = function create(properties) {
        return new proto_gc_call_score_req(properties);
    };

    /**
     * Encodes the specified proto_gc_call_score_req message. Does not implicitly {@link proto_gc_call_score_req.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_call_score_req
     * @static
     * @param {Iproto_gc_call_score_req} message proto_gc_call_score_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_call_score_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nScore);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_call_score_req message, length delimited. Does not implicitly {@link proto_gc_call_score_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_call_score_req
     * @static
     * @param {Iproto_gc_call_score_req} message proto_gc_call_score_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_call_score_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_call_score_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_call_score_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_call_score_req} proto_gc_call_score_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_call_score_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_call_score_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nScore = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nScore"))
            throw $util.ProtocolError("missing required 'nScore'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_call_score_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_call_score_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_call_score_req} proto_gc_call_score_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_call_score_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_call_score_req message.
     * @function verify
     * @memberof proto_gc_call_score_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_call_score_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nScore))
            return "nScore: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_call_score_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_call_score_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_call_score_req} proto_gc_call_score_req
     */
    proto_gc_call_score_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_call_score_req)
            return object;
        var message = new $root.proto_gc_call_score_req();
        if (object.nScore != null)
            message.nScore = object.nScore | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_call_score_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_call_score_req
     * @static
     * @param {proto_gc_call_score_req} message proto_gc_call_score_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_call_score_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nScore = 0;
            object.nSerialID = 0;
        }
        if (message.nScore != null && message.hasOwnProperty("nScore"))
            object.nScore = message.nScore;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_call_score_req to JSON.
     * @function toJSON
     * @memberof proto_gc_call_score_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_call_score_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_call_score_req;
})();

$root.proto_sic_bet_clear_req = (function() {

    /**
     * Properties of a proto_sic_bet_clear_req.
     * @exports Iproto_sic_bet_clear_req
     * @interface Iproto_sic_bet_clear_req
     */

    /**
     * Constructs a new proto_sic_bet_clear_req.
     * @exports proto_sic_bet_clear_req
     * @classdesc Represents a proto_sic_bet_clear_req.
     * @implements Iproto_sic_bet_clear_req
     * @constructor
     * @param {Iproto_sic_bet_clear_req=} [properties] Properties to set
     */
    function proto_sic_bet_clear_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_sic_bet_clear_req instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {Iproto_sic_bet_clear_req=} [properties] Properties to set
     * @returns {proto_sic_bet_clear_req} proto_sic_bet_clear_req instance
     */
    proto_sic_bet_clear_req.create = function create(properties) {
        return new proto_sic_bet_clear_req(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_clear_req message. Does not implicitly {@link proto_sic_bet_clear_req.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {Iproto_sic_bet_clear_req} message proto_sic_bet_clear_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_clear_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_clear_req message, length delimited. Does not implicitly {@link proto_sic_bet_clear_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {Iproto_sic_bet_clear_req} message proto_sic_bet_clear_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_clear_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_clear_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_clear_req} proto_sic_bet_clear_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_clear_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_clear_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_sic_bet_clear_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_clear_req} proto_sic_bet_clear_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_clear_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_clear_req message.
     * @function verify
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_clear_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_sic_bet_clear_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_clear_req} proto_sic_bet_clear_req
     */
    proto_sic_bet_clear_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_clear_req)
            return object;
        return new $root.proto_sic_bet_clear_req();
    };

    /**
     * Creates a plain object from a proto_sic_bet_clear_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_clear_req
     * @static
     * @param {proto_sic_bet_clear_req} message proto_sic_bet_clear_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_clear_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_sic_bet_clear_req to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_clear_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_clear_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_clear_req;
})();

$root.proto_gc_clienttimer_not = (function() {

    /**
     * Properties of a proto_gc_clienttimer_not.
     * @exports Iproto_gc_clienttimer_not
     * @interface Iproto_gc_clienttimer_not
     * @property {number} chairId proto_gc_clienttimer_not chairId
     * @property {number} sPeriod proto_gc_clienttimer_not sPeriod
     */

    /**
     * Constructs a new proto_gc_clienttimer_not.
     * @exports proto_gc_clienttimer_not
     * @classdesc Represents a proto_gc_clienttimer_not.
     * @implements Iproto_gc_clienttimer_not
     * @constructor
     * @param {Iproto_gc_clienttimer_not=} [properties] Properties to set
     */
    function proto_gc_clienttimer_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_clienttimer_not chairId.
     * @member {number} chairId
     * @memberof proto_gc_clienttimer_not
     * @instance
     */
    proto_gc_clienttimer_not.prototype.chairId = 0;

    /**
     * proto_gc_clienttimer_not sPeriod.
     * @member {number} sPeriod
     * @memberof proto_gc_clienttimer_not
     * @instance
     */
    proto_gc_clienttimer_not.prototype.sPeriod = 0;

    /**
     * Creates a new proto_gc_clienttimer_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {Iproto_gc_clienttimer_not=} [properties] Properties to set
     * @returns {proto_gc_clienttimer_not} proto_gc_clienttimer_not instance
     */
    proto_gc_clienttimer_not.create = function create(properties) {
        return new proto_gc_clienttimer_not(properties);
    };

    /**
     * Encodes the specified proto_gc_clienttimer_not message. Does not implicitly {@link proto_gc_clienttimer_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {Iproto_gc_clienttimer_not} message proto_gc_clienttimer_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_clienttimer_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.chairId);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sPeriod);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_clienttimer_not message, length delimited. Does not implicitly {@link proto_gc_clienttimer_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {Iproto_gc_clienttimer_not} message proto_gc_clienttimer_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_clienttimer_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_clienttimer_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_clienttimer_not} proto_gc_clienttimer_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_clienttimer_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_clienttimer_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.chairId = reader.int32();
                break;
            case 2:
                message.sPeriod = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("chairId"))
            throw $util.ProtocolError("missing required 'chairId'", { instance: message });
        if (!message.hasOwnProperty("sPeriod"))
            throw $util.ProtocolError("missing required 'sPeriod'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_clienttimer_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_clienttimer_not} proto_gc_clienttimer_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_clienttimer_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_clienttimer_not message.
     * @function verify
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_clienttimer_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.chairId))
            return "chairId: integer expected";
        if (!$util.isInteger(message.sPeriod))
            return "sPeriod: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_clienttimer_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_clienttimer_not} proto_gc_clienttimer_not
     */
    proto_gc_clienttimer_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_clienttimer_not)
            return object;
        var message = new $root.proto_gc_clienttimer_not();
        if (object.chairId != null)
            message.chairId = object.chairId | 0;
        if (object.sPeriod != null)
            message.sPeriod = object.sPeriod | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_clienttimer_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_clienttimer_not
     * @static
     * @param {proto_gc_clienttimer_not} message proto_gc_clienttimer_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_clienttimer_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.chairId = 0;
            object.sPeriod = 0;
        }
        if (message.chairId != null && message.hasOwnProperty("chairId"))
            object.chairId = message.chairId;
        if (message.sPeriod != null && message.hasOwnProperty("sPeriod"))
            object.sPeriod = message.sPeriod;
        return object;
    };

    /**
     * Converts this proto_gc_clienttimer_not to JSON.
     * @function toJSON
     * @memberof proto_gc_clienttimer_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_clienttimer_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_clienttimer_not;
})();

$root.proto_TaskItem = (function() {

    /**
     * Properties of a proto_TaskItem.
     * @exports Iproto_TaskItem
     * @interface Iproto_TaskItem
     * @property {number} taskId proto_TaskItem taskId
     * @property {string} taskDesc proto_TaskItem taskDesc
     * @property {string} taskMission proto_TaskItem taskMission
     * @property {number} taskMoneyType proto_TaskItem taskMoneyType
     * @property {number} taskMoney proto_TaskItem taskMoney
     * @property {number} taskRate proto_TaskItem taskRate
     */

    /**
     * Constructs a new proto_TaskItem.
     * @exports proto_TaskItem
     * @classdesc Represents a proto_TaskItem.
     * @implements Iproto_TaskItem
     * @constructor
     * @param {Iproto_TaskItem=} [properties] Properties to set
     */
    function proto_TaskItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_TaskItem taskId.
     * @member {number} taskId
     * @memberof proto_TaskItem
     * @instance
     */
    proto_TaskItem.prototype.taskId = 0;

    /**
     * proto_TaskItem taskDesc.
     * @member {string} taskDesc
     * @memberof proto_TaskItem
     * @instance
     */
    proto_TaskItem.prototype.taskDesc = "";

    /**
     * proto_TaskItem taskMission.
     * @member {string} taskMission
     * @memberof proto_TaskItem
     * @instance
     */
    proto_TaskItem.prototype.taskMission = "";

    /**
     * proto_TaskItem taskMoneyType.
     * @member {number} taskMoneyType
     * @memberof proto_TaskItem
     * @instance
     */
    proto_TaskItem.prototype.taskMoneyType = 0;

    /**
     * proto_TaskItem taskMoney.
     * @member {number} taskMoney
     * @memberof proto_TaskItem
     * @instance
     */
    proto_TaskItem.prototype.taskMoney = 0;

    /**
     * proto_TaskItem taskRate.
     * @member {number} taskRate
     * @memberof proto_TaskItem
     * @instance
     */
    proto_TaskItem.prototype.taskRate = 0;

    /**
     * Creates a new proto_TaskItem instance using the specified properties.
     * @function create
     * @memberof proto_TaskItem
     * @static
     * @param {Iproto_TaskItem=} [properties] Properties to set
     * @returns {proto_TaskItem} proto_TaskItem instance
     */
    proto_TaskItem.create = function create(properties) {
        return new proto_TaskItem(properties);
    };

    /**
     * Encodes the specified proto_TaskItem message. Does not implicitly {@link proto_TaskItem.verify|verify} messages.
     * @function encode
     * @memberof proto_TaskItem
     * @static
     * @param {Iproto_TaskItem} message proto_TaskItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_TaskItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.taskId);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.taskDesc);
        writer.uint32(/* id 3, wireType 2 =*/26).string(message.taskMission);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskMoneyType);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskMoney);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.taskRate);
        return writer;
    };

    /**
     * Encodes the specified proto_TaskItem message, length delimited. Does not implicitly {@link proto_TaskItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_TaskItem
     * @static
     * @param {Iproto_TaskItem} message proto_TaskItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_TaskItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_TaskItem message from the specified reader or buffer.
     * @function decode
     * @memberof proto_TaskItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_TaskItem} proto_TaskItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_TaskItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_TaskItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.taskId = reader.int32();
                break;
            case 2:
                message.taskDesc = reader.string();
                break;
            case 3:
                message.taskMission = reader.string();
                break;
            case 4:
                message.taskMoneyType = reader.int32();
                break;
            case 5:
                message.taskMoney = reader.int32();
                break;
            case 6:
                message.taskRate = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("taskId"))
            throw $util.ProtocolError("missing required 'taskId'", { instance: message });
        if (!message.hasOwnProperty("taskDesc"))
            throw $util.ProtocolError("missing required 'taskDesc'", { instance: message });
        if (!message.hasOwnProperty("taskMission"))
            throw $util.ProtocolError("missing required 'taskMission'", { instance: message });
        if (!message.hasOwnProperty("taskMoneyType"))
            throw $util.ProtocolError("missing required 'taskMoneyType'", { instance: message });
        if (!message.hasOwnProperty("taskMoney"))
            throw $util.ProtocolError("missing required 'taskMoney'", { instance: message });
        if (!message.hasOwnProperty("taskRate"))
            throw $util.ProtocolError("missing required 'taskRate'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_TaskItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_TaskItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_TaskItem} proto_TaskItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_TaskItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_TaskItem message.
     * @function verify
     * @memberof proto_TaskItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_TaskItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.taskId))
            return "taskId: integer expected";
        if (!$util.isString(message.taskDesc))
            return "taskDesc: string expected";
        if (!$util.isString(message.taskMission))
            return "taskMission: string expected";
        if (!$util.isInteger(message.taskMoneyType))
            return "taskMoneyType: integer expected";
        if (!$util.isInteger(message.taskMoney))
            return "taskMoney: integer expected";
        if (!$util.isInteger(message.taskRate))
            return "taskRate: integer expected";
        return null;
    };

    /**
     * Creates a proto_TaskItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_TaskItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_TaskItem} proto_TaskItem
     */
    proto_TaskItem.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_TaskItem)
            return object;
        var message = new $root.proto_TaskItem();
        if (object.taskId != null)
            message.taskId = object.taskId | 0;
        if (object.taskDesc != null)
            message.taskDesc = String(object.taskDesc);
        if (object.taskMission != null)
            message.taskMission = String(object.taskMission);
        if (object.taskMoneyType != null)
            message.taskMoneyType = object.taskMoneyType | 0;
        if (object.taskMoney != null)
            message.taskMoney = object.taskMoney | 0;
        if (object.taskRate != null)
            message.taskRate = object.taskRate | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_TaskItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_TaskItem
     * @static
     * @param {proto_TaskItem} message proto_TaskItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_TaskItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.taskId = 0;
            object.taskDesc = "";
            object.taskMission = "";
            object.taskMoneyType = 0;
            object.taskMoney = 0;
            object.taskRate = 0;
        }
        if (message.taskId != null && message.hasOwnProperty("taskId"))
            object.taskId = message.taskId;
        if (message.taskDesc != null && message.hasOwnProperty("taskDesc"))
            object.taskDesc = message.taskDesc;
        if (message.taskMission != null && message.hasOwnProperty("taskMission"))
            object.taskMission = message.taskMission;
        if (message.taskMoneyType != null && message.hasOwnProperty("taskMoneyType"))
            object.taskMoneyType = message.taskMoneyType;
        if (message.taskMoney != null && message.hasOwnProperty("taskMoney"))
            object.taskMoney = message.taskMoney;
        if (message.taskRate != null && message.hasOwnProperty("taskRate"))
            object.taskRate = message.taskRate;
        return object;
    };

    /**
     * Converts this proto_TaskItem to JSON.
     * @function toJSON
     * @memberof proto_TaskItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_TaskItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_TaskItem;
})();

$root.proto_gc_three_draw_notify = (function() {

    /**
     * Properties of a proto_gc_three_draw_notify.
     * @exports Iproto_gc_three_draw_notify
     * @interface Iproto_gc_three_draw_notify
     * @property {string} message proto_gc_three_draw_notify message
     */

    /**
     * Constructs a new proto_gc_three_draw_notify.
     * @exports proto_gc_three_draw_notify
     * @classdesc Represents a proto_gc_three_draw_notify.
     * @implements Iproto_gc_three_draw_notify
     * @constructor
     * @param {Iproto_gc_three_draw_notify=} [properties] Properties to set
     */
    function proto_gc_three_draw_notify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_three_draw_notify message.
     * @member {string} message
     * @memberof proto_gc_three_draw_notify
     * @instance
     */
    proto_gc_three_draw_notify.prototype.message = "";

    /**
     * Creates a new proto_gc_three_draw_notify instance using the specified properties.
     * @function create
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {Iproto_gc_three_draw_notify=} [properties] Properties to set
     * @returns {proto_gc_three_draw_notify} proto_gc_three_draw_notify instance
     */
    proto_gc_three_draw_notify.create = function create(properties) {
        return new proto_gc_three_draw_notify(properties);
    };

    /**
     * Encodes the specified proto_gc_three_draw_notify message. Does not implicitly {@link proto_gc_three_draw_notify.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {Iproto_gc_three_draw_notify} message proto_gc_three_draw_notify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_three_draw_notify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_three_draw_notify message, length delimited. Does not implicitly {@link proto_gc_three_draw_notify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {Iproto_gc_three_draw_notify} message proto_gc_three_draw_notify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_three_draw_notify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_three_draw_notify message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_three_draw_notify} proto_gc_three_draw_notify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_three_draw_notify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_three_draw_notify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.message = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("message"))
            throw $util.ProtocolError("missing required 'message'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_three_draw_notify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_three_draw_notify} proto_gc_three_draw_notify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_three_draw_notify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_three_draw_notify message.
     * @function verify
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_three_draw_notify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isString(message.message))
            return "message: string expected";
        return null;
    };

    /**
     * Creates a proto_gc_three_draw_notify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_three_draw_notify} proto_gc_three_draw_notify
     */
    proto_gc_three_draw_notify.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_three_draw_notify)
            return object;
        var message = new $root.proto_gc_three_draw_notify();
        if (object.message != null)
            message.message = String(object.message);
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_three_draw_notify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_three_draw_notify
     * @static
     * @param {proto_gc_three_draw_notify} message proto_gc_three_draw_notify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_three_draw_notify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.message = "";
        if (message.message != null && message.hasOwnProperty("message"))
            object.message = message.message;
        return object;
    };

    /**
     * Converts this proto_gc_three_draw_notify to JSON.
     * @function toJSON
     * @memberof proto_gc_three_draw_notify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_three_draw_notify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_three_draw_notify;
})();

$root.proto_gc_laizi_not = (function() {

    /**
     * Properties of a proto_gc_laizi_not.
     * @exports Iproto_gc_laizi_not
     * @interface Iproto_gc_laizi_not
     * @property {number} cardValue proto_gc_laizi_not cardValue
     */

    /**
     * Constructs a new proto_gc_laizi_not.
     * @exports proto_gc_laizi_not
     * @classdesc Represents a proto_gc_laizi_not.
     * @implements Iproto_gc_laizi_not
     * @constructor
     * @param {Iproto_gc_laizi_not=} [properties] Properties to set
     */
    function proto_gc_laizi_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_laizi_not cardValue.
     * @member {number} cardValue
     * @memberof proto_gc_laizi_not
     * @instance
     */
    proto_gc_laizi_not.prototype.cardValue = 0;

    /**
     * Creates a new proto_gc_laizi_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_laizi_not
     * @static
     * @param {Iproto_gc_laizi_not=} [properties] Properties to set
     * @returns {proto_gc_laizi_not} proto_gc_laizi_not instance
     */
    proto_gc_laizi_not.create = function create(properties) {
        return new proto_gc_laizi_not(properties);
    };

    /**
     * Encodes the specified proto_gc_laizi_not message. Does not implicitly {@link proto_gc_laizi_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_laizi_not
     * @static
     * @param {Iproto_gc_laizi_not} message proto_gc_laizi_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_laizi_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cardValue);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_laizi_not message, length delimited. Does not implicitly {@link proto_gc_laizi_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_laizi_not
     * @static
     * @param {Iproto_gc_laizi_not} message proto_gc_laizi_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_laizi_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_laizi_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_laizi_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_laizi_not} proto_gc_laizi_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_laizi_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_laizi_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cardValue = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cardValue"))
            throw $util.ProtocolError("missing required 'cardValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_laizi_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_laizi_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_laizi_not} proto_gc_laizi_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_laizi_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_laizi_not message.
     * @function verify
     * @memberof proto_gc_laizi_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_laizi_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cardValue))
            return "cardValue: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_laizi_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_laizi_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_laizi_not} proto_gc_laizi_not
     */
    proto_gc_laizi_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_laizi_not)
            return object;
        var message = new $root.proto_gc_laizi_not();
        if (object.cardValue != null)
            message.cardValue = object.cardValue | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_laizi_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_laizi_not
     * @static
     * @param {proto_gc_laizi_not} message proto_gc_laizi_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_laizi_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cardValue = 0;
        if (message.cardValue != null && message.hasOwnProperty("cardValue"))
            object.cardValue = message.cardValue;
        return object;
    };

    /**
     * Converts this proto_gc_laizi_not to JSON.
     * @function toJSON
     * @memberof proto_gc_laizi_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_laizi_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_laizi_not;
})();

$root.proto_magic_emoji_req = (function() {

    /**
     * Properties of a proto_magic_emoji_req.
     * @exports Iproto_magic_emoji_req
     * @interface Iproto_magic_emoji_req
     * @property {number} cEmojiIndex proto_magic_emoji_req cEmojiIndex
     * @property {number} cToChairID proto_magic_emoji_req cToChairID
     * @property {number} cCostType proto_magic_emoji_req cCostType
     */

    /**
     * Constructs a new proto_magic_emoji_req.
     * @exports proto_magic_emoji_req
     * @classdesc Represents a proto_magic_emoji_req.
     * @implements Iproto_magic_emoji_req
     * @constructor
     * @param {Iproto_magic_emoji_req=} [properties] Properties to set
     */
    function proto_magic_emoji_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_magic_emoji_req cEmojiIndex.
     * @member {number} cEmojiIndex
     * @memberof proto_magic_emoji_req
     * @instance
     */
    proto_magic_emoji_req.prototype.cEmojiIndex = 0;

    /**
     * proto_magic_emoji_req cToChairID.
     * @member {number} cToChairID
     * @memberof proto_magic_emoji_req
     * @instance
     */
    proto_magic_emoji_req.prototype.cToChairID = 0;

    /**
     * proto_magic_emoji_req cCostType.
     * @member {number} cCostType
     * @memberof proto_magic_emoji_req
     * @instance
     */
    proto_magic_emoji_req.prototype.cCostType = 0;

    /**
     * Creates a new proto_magic_emoji_req instance using the specified properties.
     * @function create
     * @memberof proto_magic_emoji_req
     * @static
     * @param {Iproto_magic_emoji_req=} [properties] Properties to set
     * @returns {proto_magic_emoji_req} proto_magic_emoji_req instance
     */
    proto_magic_emoji_req.create = function create(properties) {
        return new proto_magic_emoji_req(properties);
    };

    /**
     * Encodes the specified proto_magic_emoji_req message. Does not implicitly {@link proto_magic_emoji_req.verify|verify} messages.
     * @function encode
     * @memberof proto_magic_emoji_req
     * @static
     * @param {Iproto_magic_emoji_req} message proto_magic_emoji_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_magic_emoji_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cEmojiIndex);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cToChairID);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cCostType);
        return writer;
    };

    /**
     * Encodes the specified proto_magic_emoji_req message, length delimited. Does not implicitly {@link proto_magic_emoji_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_magic_emoji_req
     * @static
     * @param {Iproto_magic_emoji_req} message proto_magic_emoji_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_magic_emoji_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_magic_emoji_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_magic_emoji_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_magic_emoji_req} proto_magic_emoji_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_magic_emoji_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_magic_emoji_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cEmojiIndex = reader.int32();
                break;
            case 2:
                message.cToChairID = reader.int32();
                break;
            case 3:
                message.cCostType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cEmojiIndex"))
            throw $util.ProtocolError("missing required 'cEmojiIndex'", { instance: message });
        if (!message.hasOwnProperty("cToChairID"))
            throw $util.ProtocolError("missing required 'cToChairID'", { instance: message });
        if (!message.hasOwnProperty("cCostType"))
            throw $util.ProtocolError("missing required 'cCostType'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_magic_emoji_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_magic_emoji_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_magic_emoji_req} proto_magic_emoji_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_magic_emoji_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_magic_emoji_req message.
     * @function verify
     * @memberof proto_magic_emoji_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_magic_emoji_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cEmojiIndex))
            return "cEmojiIndex: integer expected";
        if (!$util.isInteger(message.cToChairID))
            return "cToChairID: integer expected";
        if (!$util.isInteger(message.cCostType))
            return "cCostType: integer expected";
        return null;
    };

    /**
     * Creates a proto_magic_emoji_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_magic_emoji_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_magic_emoji_req} proto_magic_emoji_req
     */
    proto_magic_emoji_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_magic_emoji_req)
            return object;
        var message = new $root.proto_magic_emoji_req();
        if (object.cEmojiIndex != null)
            message.cEmojiIndex = object.cEmojiIndex | 0;
        if (object.cToChairID != null)
            message.cToChairID = object.cToChairID | 0;
        if (object.cCostType != null)
            message.cCostType = object.cCostType | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_magic_emoji_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_magic_emoji_req
     * @static
     * @param {proto_magic_emoji_req} message proto_magic_emoji_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_magic_emoji_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cEmojiIndex = 0;
            object.cToChairID = 0;
            object.cCostType = 0;
        }
        if (message.cEmojiIndex != null && message.hasOwnProperty("cEmojiIndex"))
            object.cEmojiIndex = message.cEmojiIndex;
        if (message.cToChairID != null && message.hasOwnProperty("cToChairID"))
            object.cToChairID = message.cToChairID;
        if (message.cCostType != null && message.hasOwnProperty("cCostType"))
            object.cCostType = message.cCostType;
        return object;
    };

    /**
     * Converts this proto_magic_emoji_req to JSON.
     * @function toJSON
     * @memberof proto_magic_emoji_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_magic_emoji_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_magic_emoji_req;
})();

$root.proto_cg_double_score_ack = (function() {

    /**
     * Properties of a proto_cg_double_score_ack.
     * @exports Iproto_cg_double_score_ack
     * @interface Iproto_cg_double_score_ack
     * @property {number} nScore proto_cg_double_score_ack nScore
     * @property {number} nSerialID proto_cg_double_score_ack nSerialID
     */

    /**
     * Constructs a new proto_cg_double_score_ack.
     * @exports proto_cg_double_score_ack
     * @classdesc Represents a proto_cg_double_score_ack.
     * @implements Iproto_cg_double_score_ack
     * @constructor
     * @param {Iproto_cg_double_score_ack=} [properties] Properties to set
     */
    function proto_cg_double_score_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_double_score_ack nScore.
     * @member {number} nScore
     * @memberof proto_cg_double_score_ack
     * @instance
     */
    proto_cg_double_score_ack.prototype.nScore = 0;

    /**
     * proto_cg_double_score_ack nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_double_score_ack
     * @instance
     */
    proto_cg_double_score_ack.prototype.nSerialID = 0;

    /**
     * Creates a new proto_cg_double_score_ack instance using the specified properties.
     * @function create
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {Iproto_cg_double_score_ack=} [properties] Properties to set
     * @returns {proto_cg_double_score_ack} proto_cg_double_score_ack instance
     */
    proto_cg_double_score_ack.create = function create(properties) {
        return new proto_cg_double_score_ack(properties);
    };

    /**
     * Encodes the specified proto_cg_double_score_ack message. Does not implicitly {@link proto_cg_double_score_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {Iproto_cg_double_score_ack} message proto_cg_double_score_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_double_score_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nScore);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_double_score_ack message, length delimited. Does not implicitly {@link proto_cg_double_score_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {Iproto_cg_double_score_ack} message proto_cg_double_score_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_double_score_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_double_score_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_double_score_ack} proto_cg_double_score_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_double_score_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_double_score_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nScore = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nScore"))
            throw $util.ProtocolError("missing required 'nScore'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_double_score_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_double_score_ack} proto_cg_double_score_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_double_score_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_double_score_ack message.
     * @function verify
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_double_score_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nScore))
            return "nScore: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_double_score_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_double_score_ack} proto_cg_double_score_ack
     */
    proto_cg_double_score_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_double_score_ack)
            return object;
        var message = new $root.proto_cg_double_score_ack();
        if (object.nScore != null)
            message.nScore = object.nScore | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_double_score_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_double_score_ack
     * @static
     * @param {proto_cg_double_score_ack} message proto_cg_double_score_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_double_score_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.nScore = 0;
            object.nSerialID = 0;
        }
        if (message.nScore != null && message.hasOwnProperty("nScore"))
            object.nScore = message.nScore;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_cg_double_score_ack to JSON.
     * @function toJSON
     * @memberof proto_cg_double_score_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_double_score_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_double_score_ack;
})();

$root.proto_cg_play_card_ack = (function() {

    /**
     * Properties of a proto_cg_play_card_ack.
     * @exports Iproto_cg_play_card_ack
     * @interface Iproto_cg_play_card_ack
     * @property {number} nSerialID proto_cg_play_card_ack nSerialID
     * @property {number} cTimeOut proto_cg_play_card_ack cTimeOut
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_cg_play_card_ack vecCards
     */

    /**
     * Constructs a new proto_cg_play_card_ack.
     * @exports proto_cg_play_card_ack
     * @classdesc Represents a proto_cg_play_card_ack.
     * @implements Iproto_cg_play_card_ack
     * @constructor
     * @param {Iproto_cg_play_card_ack=} [properties] Properties to set
     */
    function proto_cg_play_card_ack(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_play_card_ack nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_play_card_ack
     * @instance
     */
    proto_cg_play_card_ack.prototype.nSerialID = 0;

    /**
     * proto_cg_play_card_ack cTimeOut.
     * @member {number} cTimeOut
     * @memberof proto_cg_play_card_ack
     * @instance
     */
    proto_cg_play_card_ack.prototype.cTimeOut = 0;

    /**
     * proto_cg_play_card_ack vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_cg_play_card_ack
     * @instance
     */
    proto_cg_play_card_ack.prototype.vecCards = $util.emptyArray;

    /**
     * Creates a new proto_cg_play_card_ack instance using the specified properties.
     * @function create
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {Iproto_cg_play_card_ack=} [properties] Properties to set
     * @returns {proto_cg_play_card_ack} proto_cg_play_card_ack instance
     */
    proto_cg_play_card_ack.create = function create(properties) {
        return new proto_cg_play_card_ack(properties);
    };

    /**
     * Encodes the specified proto_cg_play_card_ack message. Does not implicitly {@link proto_cg_play_card_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {Iproto_cg_play_card_ack} message proto_cg_play_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_play_card_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nSerialID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cTimeOut);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_play_card_ack message, length delimited. Does not implicitly {@link proto_cg_play_card_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {Iproto_cg_play_card_ack} message proto_cg_play_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_play_card_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_play_card_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_play_card_ack} proto_cg_play_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_play_card_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_play_card_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nSerialID = reader.int32();
                break;
            case 2:
                message.cTimeOut = reader.int32();
                break;
            case 3:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        if (!message.hasOwnProperty("cTimeOut"))
            throw $util.ProtocolError("missing required 'cTimeOut'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_play_card_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_play_card_ack} proto_cg_play_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_play_card_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_play_card_ack message.
     * @function verify
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_play_card_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        if (!$util.isInteger(message.cTimeOut))
            return "cTimeOut: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_cg_play_card_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_play_card_ack} proto_cg_play_card_ack
     */
    proto_cg_play_card_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_play_card_ack)
            return object;
        var message = new $root.proto_cg_play_card_ack();
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        if (object.cTimeOut != null)
            message.cTimeOut = object.cTimeOut | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_cg_play_card_ack.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_cg_play_card_ack.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_play_card_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_play_card_ack
     * @static
     * @param {proto_cg_play_card_ack} message proto_cg_play_card_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_play_card_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults) {
            object.nSerialID = 0;
            object.cTimeOut = 0;
        }
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        if (message.cTimeOut != null && message.hasOwnProperty("cTimeOut"))
            object.cTimeOut = message.cTimeOut;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_cg_play_card_ack to JSON.
     * @function toJSON
     * @memberof proto_cg_play_card_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_play_card_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_play_card_ack;
})();

$root.proto_sic_bet_begin_not = (function() {

    /**
     * Properties of a proto_sic_bet_begin_not.
     * @exports Iproto_sic_bet_begin_not
     * @interface Iproto_sic_bet_begin_not
     */

    /**
     * Constructs a new proto_sic_bet_begin_not.
     * @exports proto_sic_bet_begin_not
     * @classdesc Represents a proto_sic_bet_begin_not.
     * @implements Iproto_sic_bet_begin_not
     * @constructor
     * @param {Iproto_sic_bet_begin_not=} [properties] Properties to set
     */
    function proto_sic_bet_begin_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_sic_bet_begin_not instance using the specified properties.
     * @function create
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {Iproto_sic_bet_begin_not=} [properties] Properties to set
     * @returns {proto_sic_bet_begin_not} proto_sic_bet_begin_not instance
     */
    proto_sic_bet_begin_not.create = function create(properties) {
        return new proto_sic_bet_begin_not(properties);
    };

    /**
     * Encodes the specified proto_sic_bet_begin_not message. Does not implicitly {@link proto_sic_bet_begin_not.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {Iproto_sic_bet_begin_not} message proto_sic_bet_begin_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_begin_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_sic_bet_begin_not message, length delimited. Does not implicitly {@link proto_sic_bet_begin_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {Iproto_sic_bet_begin_not} message proto_sic_bet_begin_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_bet_begin_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_bet_begin_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_bet_begin_not} proto_sic_bet_begin_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_begin_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_bet_begin_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_sic_bet_begin_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_bet_begin_not} proto_sic_bet_begin_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_bet_begin_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_bet_begin_not message.
     * @function verify
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_bet_begin_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_sic_bet_begin_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_bet_begin_not} proto_sic_bet_begin_not
     */
    proto_sic_bet_begin_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_bet_begin_not)
            return object;
        return new $root.proto_sic_bet_begin_not();
    };

    /**
     * Creates a plain object from a proto_sic_bet_begin_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_bet_begin_not
     * @static
     * @param {proto_sic_bet_begin_not} message proto_sic_bet_begin_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_bet_begin_not.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_sic_bet_begin_not to JSON.
     * @function toJSON
     * @memberof proto_sic_bet_begin_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_bet_begin_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_bet_begin_not;
})();

$root.proto_cg_get_lord_card_reward = (function() {

    /**
     * Properties of a proto_cg_get_lord_card_reward.
     * @exports Iproto_cg_get_lord_card_reward
     * @interface Iproto_cg_get_lord_card_reward
     * @property {number} index proto_cg_get_lord_card_reward index
     */

    /**
     * Constructs a new proto_cg_get_lord_card_reward.
     * @exports proto_cg_get_lord_card_reward
     * @classdesc Represents a proto_cg_get_lord_card_reward.
     * @implements Iproto_cg_get_lord_card_reward
     * @constructor
     * @param {Iproto_cg_get_lord_card_reward=} [properties] Properties to set
     */
    function proto_cg_get_lord_card_reward(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_get_lord_card_reward index.
     * @member {number} index
     * @memberof proto_cg_get_lord_card_reward
     * @instance
     */
    proto_cg_get_lord_card_reward.prototype.index = 0;

    /**
     * Creates a new proto_cg_get_lord_card_reward instance using the specified properties.
     * @function create
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {Iproto_cg_get_lord_card_reward=} [properties] Properties to set
     * @returns {proto_cg_get_lord_card_reward} proto_cg_get_lord_card_reward instance
     */
    proto_cg_get_lord_card_reward.create = function create(properties) {
        return new proto_cg_get_lord_card_reward(properties);
    };

    /**
     * Encodes the specified proto_cg_get_lord_card_reward message. Does not implicitly {@link proto_cg_get_lord_card_reward.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {Iproto_cg_get_lord_card_reward} message proto_cg_get_lord_card_reward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_lord_card_reward.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_get_lord_card_reward message, length delimited. Does not implicitly {@link proto_cg_get_lord_card_reward.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {Iproto_cg_get_lord_card_reward} message proto_cg_get_lord_card_reward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_lord_card_reward.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_get_lord_card_reward message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_get_lord_card_reward} proto_cg_get_lord_card_reward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_lord_card_reward.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_get_lord_card_reward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("index"))
            throw $util.ProtocolError("missing required 'index'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_get_lord_card_reward message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_get_lord_card_reward} proto_cg_get_lord_card_reward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_lord_card_reward.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_get_lord_card_reward message.
     * @function verify
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_get_lord_card_reward.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.index))
            return "index: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_get_lord_card_reward message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_get_lord_card_reward} proto_cg_get_lord_card_reward
     */
    proto_cg_get_lord_card_reward.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_get_lord_card_reward)
            return object;
        var message = new $root.proto_cg_get_lord_card_reward();
        if (object.index != null)
            message.index = object.index | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_get_lord_card_reward message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_get_lord_card_reward
     * @static
     * @param {proto_cg_get_lord_card_reward} message proto_cg_get_lord_card_reward
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_get_lord_card_reward.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.index = 0;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this proto_cg_get_lord_card_reward to JSON.
     * @function toJSON
     * @memberof proto_cg_get_lord_card_reward
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_get_lord_card_reward.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_get_lord_card_reward;
})();

$root.proto_gc_bet_lord_card_result_ack = (function() {

    /**
     * Properties of a proto_gc_bet_lord_card_result_ack.
     * @exports Iproto_gc_bet_lord_card_result_ack
     * @interface Iproto_gc_bet_lord_card_result_ack
     * @property {number} ret proto_gc_bet_lord_card_result_ack ret
     * @property {number} money proto_gc_bet_lord_card_result_ack money
     */

    /**
     * Constructs a new proto_gc_bet_lord_card_result_ack.
     * @exports proto_gc_bet_lord_card_result_ack
     * @classdesc Represents a proto_gc_bet_lord_card_result_ack.
     * @implements Iproto_gc_bet_lord_card_result_ack
     * @constructor
     * @param {Iproto_gc_bet_lord_card_result_ack=} [properties] Properties to set
     */
    function proto_gc_bet_lord_card_result_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_bet_lord_card_result_ack ret.
     * @member {number} ret
     * @memberof proto_gc_bet_lord_card_result_ack
     * @instance
     */
    proto_gc_bet_lord_card_result_ack.prototype.ret = 0;

    /**
     * proto_gc_bet_lord_card_result_ack money.
     * @member {number} money
     * @memberof proto_gc_bet_lord_card_result_ack
     * @instance
     */
    proto_gc_bet_lord_card_result_ack.prototype.money = 0;

    /**
     * Creates a new proto_gc_bet_lord_card_result_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {Iproto_gc_bet_lord_card_result_ack=} [properties] Properties to set
     * @returns {proto_gc_bet_lord_card_result_ack} proto_gc_bet_lord_card_result_ack instance
     */
    proto_gc_bet_lord_card_result_ack.create = function create(properties) {
        return new proto_gc_bet_lord_card_result_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_bet_lord_card_result_ack message. Does not implicitly {@link proto_gc_bet_lord_card_result_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {Iproto_gc_bet_lord_card_result_ack} message proto_gc_bet_lord_card_result_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_bet_lord_card_result_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.money);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_bet_lord_card_result_ack message, length delimited. Does not implicitly {@link proto_gc_bet_lord_card_result_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {Iproto_gc_bet_lord_card_result_ack} message proto_gc_bet_lord_card_result_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_bet_lord_card_result_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_bet_lord_card_result_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_bet_lord_card_result_ack} proto_gc_bet_lord_card_result_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_bet_lord_card_result_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_bet_lord_card_result_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.money = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("money"))
            throw $util.ProtocolError("missing required 'money'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_bet_lord_card_result_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_bet_lord_card_result_ack} proto_gc_bet_lord_card_result_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_bet_lord_card_result_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_bet_lord_card_result_ack message.
     * @function verify
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_bet_lord_card_result_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (!$util.isInteger(message.money))
            return "money: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_bet_lord_card_result_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_bet_lord_card_result_ack} proto_gc_bet_lord_card_result_ack
     */
    proto_gc_bet_lord_card_result_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_bet_lord_card_result_ack)
            return object;
        var message = new $root.proto_gc_bet_lord_card_result_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.money != null)
            message.money = object.money | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_bet_lord_card_result_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_bet_lord_card_result_ack
     * @static
     * @param {proto_gc_bet_lord_card_result_ack} message proto_gc_bet_lord_card_result_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_bet_lord_card_result_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.money = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.money != null && message.hasOwnProperty("money"))
            object.money = message.money;
        return object;
    };

    /**
     * Converts this proto_gc_bet_lord_card_result_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_bet_lord_card_result_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_bet_lord_card_result_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_bet_lord_card_result_ack;
})();

$root.proto_svr_my_ack = (function() {

    /**
     * Properties of a proto_svr_my_ack.
     * @exports Iproto_svr_my_ack
     * @interface Iproto_svr_my_ack
     * @property {number} b proto_svr_my_ack b
     */

    /**
     * Constructs a new proto_svr_my_ack.
     * @exports proto_svr_my_ack
     * @classdesc Represents a proto_svr_my_ack.
     * @implements Iproto_svr_my_ack
     * @constructor
     * @param {Iproto_svr_my_ack=} [properties] Properties to set
     */
    function proto_svr_my_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_svr_my_ack b.
     * @member {number} b
     * @memberof proto_svr_my_ack
     * @instance
     */
    proto_svr_my_ack.prototype.b = 0;

    /**
     * Creates a new proto_svr_my_ack instance using the specified properties.
     * @function create
     * @memberof proto_svr_my_ack
     * @static
     * @param {Iproto_svr_my_ack=} [properties] Properties to set
     * @returns {proto_svr_my_ack} proto_svr_my_ack instance
     */
    proto_svr_my_ack.create = function create(properties) {
        return new proto_svr_my_ack(properties);
    };

    /**
     * Encodes the specified proto_svr_my_ack message. Does not implicitly {@link proto_svr_my_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_svr_my_ack
     * @static
     * @param {Iproto_svr_my_ack} message proto_svr_my_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_svr_my_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.b);
        return writer;
    };

    /**
     * Encodes the specified proto_svr_my_ack message, length delimited. Does not implicitly {@link proto_svr_my_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_svr_my_ack
     * @static
     * @param {Iproto_svr_my_ack} message proto_svr_my_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_svr_my_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_svr_my_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_svr_my_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_svr_my_ack} proto_svr_my_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_svr_my_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_svr_my_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.b = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("b"))
            throw $util.ProtocolError("missing required 'b'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_svr_my_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_svr_my_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_svr_my_ack} proto_svr_my_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_svr_my_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_svr_my_ack message.
     * @function verify
     * @memberof proto_svr_my_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_svr_my_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.b))
            return "b: integer expected";
        return null;
    };

    /**
     * Creates a proto_svr_my_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_svr_my_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_svr_my_ack} proto_svr_my_ack
     */
    proto_svr_my_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_svr_my_ack)
            return object;
        var message = new $root.proto_svr_my_ack();
        if (object.b != null)
            message.b = object.b | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_svr_my_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_svr_my_ack
     * @static
     * @param {proto_svr_my_ack} message proto_svr_my_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_svr_my_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.b = 0;
        if (message.b != null && message.hasOwnProperty("b"))
            object.b = message.b;
        return object;
    };

    /**
     * Converts this proto_svr_my_ack to JSON.
     * @function toJSON
     * @memberof proto_svr_my_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_svr_my_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_svr_my_ack;
})();

$root.proto_gc_game_result_not1 = (function() {

    /**
     * Properties of a proto_gc_game_result_not1.
     * @exports Iproto_gc_game_result_not1
     * @interface Iproto_gc_game_result_not1
     * @property {number} bType proto_gc_game_result_not1 bType
     * @property {number} cDouble proto_gc_game_result_not1 cDouble
     * @property {number} cCallScore proto_gc_game_result_not1 cCallScore
     * @property {number} bShowCard proto_gc_game_result_not1 bShowCard
     * @property {number} nBombCount proto_gc_game_result_not1 nBombCount
     * @property {number} bSpring proto_gc_game_result_not1 bSpring
     * @property {number} bReverseSpring proto_gc_game_result_not1 bReverseSpring
     * @property {number} bRobLord proto_gc_game_result_not1 bRobLord
     * @property {Array.<Iproto_stUserResult1>|null} [vecUserResult1] proto_gc_game_result_not1 vecUserResult1
     */

    /**
     * Constructs a new proto_gc_game_result_not1.
     * @exports proto_gc_game_result_not1
     * @classdesc Represents a proto_gc_game_result_not1.
     * @implements Iproto_gc_game_result_not1
     * @constructor
     * @param {Iproto_gc_game_result_not1=} [properties] Properties to set
     */
    function proto_gc_game_result_not1(properties) {
        this.vecUserResult1 = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_game_result_not1 bType.
     * @member {number} bType
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.bType = 0;

    /**
     * proto_gc_game_result_not1 cDouble.
     * @member {number} cDouble
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.cDouble = 0;

    /**
     * proto_gc_game_result_not1 cCallScore.
     * @member {number} cCallScore
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.cCallScore = 0;

    /**
     * proto_gc_game_result_not1 bShowCard.
     * @member {number} bShowCard
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.bShowCard = 0;

    /**
     * proto_gc_game_result_not1 nBombCount.
     * @member {number} nBombCount
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.nBombCount = 0;

    /**
     * proto_gc_game_result_not1 bSpring.
     * @member {number} bSpring
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.bSpring = 0;

    /**
     * proto_gc_game_result_not1 bReverseSpring.
     * @member {number} bReverseSpring
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.bReverseSpring = 0;

    /**
     * proto_gc_game_result_not1 bRobLord.
     * @member {number} bRobLord
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.bRobLord = 0;

    /**
     * proto_gc_game_result_not1 vecUserResult1.
     * @member {Array.<Iproto_stUserResult1>} vecUserResult1
     * @memberof proto_gc_game_result_not1
     * @instance
     */
    proto_gc_game_result_not1.prototype.vecUserResult1 = $util.emptyArray;

    /**
     * Creates a new proto_gc_game_result_not1 instance using the specified properties.
     * @function create
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {Iproto_gc_game_result_not1=} [properties] Properties to set
     * @returns {proto_gc_game_result_not1} proto_gc_game_result_not1 instance
     */
    proto_gc_game_result_not1.create = function create(properties) {
        return new proto_gc_game_result_not1(properties);
    };

    /**
     * Encodes the specified proto_gc_game_result_not1 message. Does not implicitly {@link proto_gc_game_result_not1.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {Iproto_gc_game_result_not1} message proto_gc_game_result_not1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_result_not1.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.bType);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cDouble);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cCallScore);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bShowCard);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.nBombCount);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.bSpring);
        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.bReverseSpring);
        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.bRobLord);
        if (message.vecUserResult1 != null && message.vecUserResult1.length)
            for (var i = 0; i < message.vecUserResult1.length; ++i)
                $root.proto_stUserResult1.encode(message.vecUserResult1[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_game_result_not1 message, length delimited. Does not implicitly {@link proto_gc_game_result_not1.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {Iproto_gc_game_result_not1} message proto_gc_game_result_not1 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_game_result_not1.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_game_result_not1 message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_game_result_not1} proto_gc_game_result_not1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_result_not1.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_game_result_not1();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.bType = reader.int32();
                break;
            case 2:
                message.cDouble = reader.int32();
                break;
            case 3:
                message.cCallScore = reader.int32();
                break;
            case 4:
                message.bShowCard = reader.int32();
                break;
            case 5:
                message.nBombCount = reader.int32();
                break;
            case 6:
                message.bSpring = reader.int32();
                break;
            case 7:
                message.bReverseSpring = reader.int32();
                break;
            case 8:
                message.bRobLord = reader.int32();
                break;
            case 9:
                if (!(message.vecUserResult1 && message.vecUserResult1.length))
                    message.vecUserResult1 = [];
                message.vecUserResult1.push($root.proto_stUserResult1.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("bType"))
            throw $util.ProtocolError("missing required 'bType'", { instance: message });
        if (!message.hasOwnProperty("cDouble"))
            throw $util.ProtocolError("missing required 'cDouble'", { instance: message });
        if (!message.hasOwnProperty("cCallScore"))
            throw $util.ProtocolError("missing required 'cCallScore'", { instance: message });
        if (!message.hasOwnProperty("bShowCard"))
            throw $util.ProtocolError("missing required 'bShowCard'", { instance: message });
        if (!message.hasOwnProperty("nBombCount"))
            throw $util.ProtocolError("missing required 'nBombCount'", { instance: message });
        if (!message.hasOwnProperty("bSpring"))
            throw $util.ProtocolError("missing required 'bSpring'", { instance: message });
        if (!message.hasOwnProperty("bReverseSpring"))
            throw $util.ProtocolError("missing required 'bReverseSpring'", { instance: message });
        if (!message.hasOwnProperty("bRobLord"))
            throw $util.ProtocolError("missing required 'bRobLord'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_game_result_not1 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_game_result_not1} proto_gc_game_result_not1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_game_result_not1.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_game_result_not1 message.
     * @function verify
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_game_result_not1.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.bType))
            return "bType: integer expected";
        if (!$util.isInteger(message.cDouble))
            return "cDouble: integer expected";
        if (!$util.isInteger(message.cCallScore))
            return "cCallScore: integer expected";
        if (!$util.isInteger(message.bShowCard))
            return "bShowCard: integer expected";
        if (!$util.isInteger(message.nBombCount))
            return "nBombCount: integer expected";
        if (!$util.isInteger(message.bSpring))
            return "bSpring: integer expected";
        if (!$util.isInteger(message.bReverseSpring))
            return "bReverseSpring: integer expected";
        if (!$util.isInteger(message.bRobLord))
            return "bRobLord: integer expected";
        if (message.vecUserResult1 != null && message.hasOwnProperty("vecUserResult1")) {
            if (!Array.isArray(message.vecUserResult1))
                return "vecUserResult1: array expected";
            for (var i = 0; i < message.vecUserResult1.length; ++i) {
                var error = $root.proto_stUserResult1.verify(message.vecUserResult1[i]);
                if (error)
                    return "vecUserResult1." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_game_result_not1 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_game_result_not1} proto_gc_game_result_not1
     */
    proto_gc_game_result_not1.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_game_result_not1)
            return object;
        var message = new $root.proto_gc_game_result_not1();
        if (object.bType != null)
            message.bType = object.bType | 0;
        if (object.cDouble != null)
            message.cDouble = object.cDouble | 0;
        if (object.cCallScore != null)
            message.cCallScore = object.cCallScore | 0;
        if (object.bShowCard != null)
            message.bShowCard = object.bShowCard | 0;
        if (object.nBombCount != null)
            message.nBombCount = object.nBombCount | 0;
        if (object.bSpring != null)
            message.bSpring = object.bSpring | 0;
        if (object.bReverseSpring != null)
            message.bReverseSpring = object.bReverseSpring | 0;
        if (object.bRobLord != null)
            message.bRobLord = object.bRobLord | 0;
        if (object.vecUserResult1) {
            if (!Array.isArray(object.vecUserResult1))
                throw TypeError(".proto_gc_game_result_not1.vecUserResult1: array expected");
            message.vecUserResult1 = [];
            for (var i = 0; i < object.vecUserResult1.length; ++i) {
                if (typeof object.vecUserResult1[i] !== "object")
                    throw TypeError(".proto_gc_game_result_not1.vecUserResult1: object expected");
                message.vecUserResult1[i] = $root.proto_stUserResult1.fromObject(object.vecUserResult1[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_game_result_not1 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_game_result_not1
     * @static
     * @param {proto_gc_game_result_not1} message proto_gc_game_result_not1
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_game_result_not1.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecUserResult1 = [];
        if (options.defaults) {
            object.bType = 0;
            object.cDouble = 0;
            object.cCallScore = 0;
            object.bShowCard = 0;
            object.nBombCount = 0;
            object.bSpring = 0;
            object.bReverseSpring = 0;
            object.bRobLord = 0;
        }
        if (message.bType != null && message.hasOwnProperty("bType"))
            object.bType = message.bType;
        if (message.cDouble != null && message.hasOwnProperty("cDouble"))
            object.cDouble = message.cDouble;
        if (message.cCallScore != null && message.hasOwnProperty("cCallScore"))
            object.cCallScore = message.cCallScore;
        if (message.bShowCard != null && message.hasOwnProperty("bShowCard"))
            object.bShowCard = message.bShowCard;
        if (message.nBombCount != null && message.hasOwnProperty("nBombCount"))
            object.nBombCount = message.nBombCount;
        if (message.bSpring != null && message.hasOwnProperty("bSpring"))
            object.bSpring = message.bSpring;
        if (message.bReverseSpring != null && message.hasOwnProperty("bReverseSpring"))
            object.bReverseSpring = message.bReverseSpring;
        if (message.bRobLord != null && message.hasOwnProperty("bRobLord"))
            object.bRobLord = message.bRobLord;
        if (message.vecUserResult1 && message.vecUserResult1.length) {
            object.vecUserResult1 = [];
            for (var j = 0; j < message.vecUserResult1.length; ++j)
                object.vecUserResult1[j] = $root.proto_stUserResult1.toObject(message.vecUserResult1[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_game_result_not1 to JSON.
     * @function toJSON
     * @memberof proto_gc_game_result_not1
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_game_result_not1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_game_result_not1;
})();

$root.proto_gc_play_card_req = (function() {

    /**
     * Properties of a proto_gc_play_card_req.
     * @exports Iproto_gc_play_card_req
     * @interface Iproto_gc_play_card_req
     * @property {number} cAuto proto_gc_play_card_req cAuto
     * @property {number} nSerialID proto_gc_play_card_req nSerialID
     */

    /**
     * Constructs a new proto_gc_play_card_req.
     * @exports proto_gc_play_card_req
     * @classdesc Represents a proto_gc_play_card_req.
     * @implements Iproto_gc_play_card_req
     * @constructor
     * @param {Iproto_gc_play_card_req=} [properties] Properties to set
     */
    function proto_gc_play_card_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_play_card_req cAuto.
     * @member {number} cAuto
     * @memberof proto_gc_play_card_req
     * @instance
     */
    proto_gc_play_card_req.prototype.cAuto = 0;

    /**
     * proto_gc_play_card_req nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_play_card_req
     * @instance
     */
    proto_gc_play_card_req.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_play_card_req instance using the specified properties.
     * @function create
     * @memberof proto_gc_play_card_req
     * @static
     * @param {Iproto_gc_play_card_req=} [properties] Properties to set
     * @returns {proto_gc_play_card_req} proto_gc_play_card_req instance
     */
    proto_gc_play_card_req.create = function create(properties) {
        return new proto_gc_play_card_req(properties);
    };

    /**
     * Encodes the specified proto_gc_play_card_req message. Does not implicitly {@link proto_gc_play_card_req.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_play_card_req
     * @static
     * @param {Iproto_gc_play_card_req} message proto_gc_play_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_play_card_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cAuto);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_play_card_req message, length delimited. Does not implicitly {@link proto_gc_play_card_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_play_card_req
     * @static
     * @param {Iproto_gc_play_card_req} message proto_gc_play_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_play_card_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_play_card_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_play_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_play_card_req} proto_gc_play_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_play_card_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_play_card_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cAuto = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cAuto"))
            throw $util.ProtocolError("missing required 'cAuto'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_play_card_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_play_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_play_card_req} proto_gc_play_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_play_card_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_play_card_req message.
     * @function verify
     * @memberof proto_gc_play_card_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_play_card_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cAuto))
            return "cAuto: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_play_card_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_play_card_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_play_card_req} proto_gc_play_card_req
     */
    proto_gc_play_card_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_play_card_req)
            return object;
        var message = new $root.proto_gc_play_card_req();
        if (object.cAuto != null)
            message.cAuto = object.cAuto | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_play_card_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_play_card_req
     * @static
     * @param {proto_gc_play_card_req} message proto_gc_play_card_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_play_card_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cAuto = 0;
            object.nSerialID = 0;
        }
        if (message.cAuto != null && message.hasOwnProperty("cAuto"))
            object.cAuto = message.cAuto;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_play_card_req to JSON.
     * @function toJSON
     * @memberof proto_gc_play_card_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_play_card_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_play_card_req;
})();

$root.proto_gc_lord_card_lottery_base = (function() {

    /**
     * Properties of a proto_gc_lord_card_lottery_base.
     * @exports Iproto_gc_lord_card_lottery_base
     * @interface Iproto_gc_lord_card_lottery_base
     * @property {number} ret proto_gc_lord_card_lottery_base ret
     * @property {number} index proto_gc_lord_card_lottery_base index
     */

    /**
     * Constructs a new proto_gc_lord_card_lottery_base.
     * @exports proto_gc_lord_card_lottery_base
     * @classdesc Represents a proto_gc_lord_card_lottery_base.
     * @implements Iproto_gc_lord_card_lottery_base
     * @constructor
     * @param {Iproto_gc_lord_card_lottery_base=} [properties] Properties to set
     */
    function proto_gc_lord_card_lottery_base(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_lord_card_lottery_base ret.
     * @member {number} ret
     * @memberof proto_gc_lord_card_lottery_base
     * @instance
     */
    proto_gc_lord_card_lottery_base.prototype.ret = 0;

    /**
     * proto_gc_lord_card_lottery_base index.
     * @member {number} index
     * @memberof proto_gc_lord_card_lottery_base
     * @instance
     */
    proto_gc_lord_card_lottery_base.prototype.index = 0;

    /**
     * Creates a new proto_gc_lord_card_lottery_base instance using the specified properties.
     * @function create
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {Iproto_gc_lord_card_lottery_base=} [properties] Properties to set
     * @returns {proto_gc_lord_card_lottery_base} proto_gc_lord_card_lottery_base instance
     */
    proto_gc_lord_card_lottery_base.create = function create(properties) {
        return new proto_gc_lord_card_lottery_base(properties);
    };

    /**
     * Encodes the specified proto_gc_lord_card_lottery_base message. Does not implicitly {@link proto_gc_lord_card_lottery_base.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {Iproto_gc_lord_card_lottery_base} message proto_gc_lord_card_lottery_base message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_lord_card_lottery_base.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_lord_card_lottery_base message, length delimited. Does not implicitly {@link proto_gc_lord_card_lottery_base.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {Iproto_gc_lord_card_lottery_base} message proto_gc_lord_card_lottery_base message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_lord_card_lottery_base.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_lord_card_lottery_base message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_lord_card_lottery_base} proto_gc_lord_card_lottery_base
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_lord_card_lottery_base.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_lord_card_lottery_base();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.index = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("index"))
            throw $util.ProtocolError("missing required 'index'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_lord_card_lottery_base message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_lord_card_lottery_base} proto_gc_lord_card_lottery_base
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_lord_card_lottery_base.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_lord_card_lottery_base message.
     * @function verify
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_lord_card_lottery_base.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (!$util.isInteger(message.index))
            return "index: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_lord_card_lottery_base message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_lord_card_lottery_base} proto_gc_lord_card_lottery_base
     */
    proto_gc_lord_card_lottery_base.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_lord_card_lottery_base)
            return object;
        var message = new $root.proto_gc_lord_card_lottery_base();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.index != null)
            message.index = object.index | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_lord_card_lottery_base message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_lord_card_lottery_base
     * @static
     * @param {proto_gc_lord_card_lottery_base} message proto_gc_lord_card_lottery_base
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_lord_card_lottery_base.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.index = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this proto_gc_lord_card_lottery_base to JSON.
     * @function toJSON
     * @memberof proto_gc_lord_card_lottery_base
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_lord_card_lottery_base.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_lord_card_lottery_base;
})();

$root.proto_gc_auto_not = (function() {

    /**
     * Properties of a proto_gc_auto_not.
     * @exports Iproto_gc_auto_not
     * @interface Iproto_gc_auto_not
     * @property {number} cChairID proto_gc_auto_not cChairID
     * @property {number} cAuto proto_gc_auto_not cAuto
     */

    /**
     * Constructs a new proto_gc_auto_not.
     * @exports proto_gc_auto_not
     * @classdesc Represents a proto_gc_auto_not.
     * @implements Iproto_gc_auto_not
     * @constructor
     * @param {Iproto_gc_auto_not=} [properties] Properties to set
     */
    function proto_gc_auto_not(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_auto_not cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_auto_not
     * @instance
     */
    proto_gc_auto_not.prototype.cChairID = 0;

    /**
     * proto_gc_auto_not cAuto.
     * @member {number} cAuto
     * @memberof proto_gc_auto_not
     * @instance
     */
    proto_gc_auto_not.prototype.cAuto = 0;

    /**
     * Creates a new proto_gc_auto_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_auto_not
     * @static
     * @param {Iproto_gc_auto_not=} [properties] Properties to set
     * @returns {proto_gc_auto_not} proto_gc_auto_not instance
     */
    proto_gc_auto_not.create = function create(properties) {
        return new proto_gc_auto_not(properties);
    };

    /**
     * Encodes the specified proto_gc_auto_not message. Does not implicitly {@link proto_gc_auto_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_auto_not
     * @static
     * @param {Iproto_gc_auto_not} message proto_gc_auto_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_auto_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cAuto);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_auto_not message, length delimited. Does not implicitly {@link proto_gc_auto_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_auto_not
     * @static
     * @param {Iproto_gc_auto_not} message proto_gc_auto_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_auto_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_auto_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_auto_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_auto_not} proto_gc_auto_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_auto_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_auto_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                message.cAuto = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        if (!message.hasOwnProperty("cAuto"))
            throw $util.ProtocolError("missing required 'cAuto'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_auto_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_auto_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_auto_not} proto_gc_auto_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_auto_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_auto_not message.
     * @function verify
     * @memberof proto_gc_auto_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_auto_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (!$util.isInteger(message.cAuto))
            return "cAuto: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_auto_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_auto_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_auto_not} proto_gc_auto_not
     */
    proto_gc_auto_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_auto_not)
            return object;
        var message = new $root.proto_gc_auto_not();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.cAuto != null)
            message.cAuto = object.cAuto | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_auto_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_auto_not
     * @static
     * @param {proto_gc_auto_not} message proto_gc_auto_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_auto_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cChairID = 0;
            object.cAuto = 0;
        }
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.cAuto != null && message.hasOwnProperty("cAuto"))
            object.cAuto = message.cAuto;
        return object;
    };

    /**
     * Converts this proto_gc_auto_not to JSON.
     * @function toJSON
     * @memberof proto_gc_auto_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_auto_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_auto_not;
})();

$root.proto_gc_card_count_ack = (function() {

    /**
     * Properties of a proto_gc_card_count_ack.
     * @exports Iproto_gc_card_count_ack
     * @interface Iproto_gc_card_count_ack
     * @property {number} countsNum proto_gc_card_count_ack countsNum
     * @property {Array.<Iproto_CCard>|null} [mVecPutCard] proto_gc_card_count_ack mVecPutCard
     */

    /**
     * Constructs a new proto_gc_card_count_ack.
     * @exports proto_gc_card_count_ack
     * @classdesc Represents a proto_gc_card_count_ack.
     * @implements Iproto_gc_card_count_ack
     * @constructor
     * @param {Iproto_gc_card_count_ack=} [properties] Properties to set
     */
    function proto_gc_card_count_ack(properties) {
        this.mVecPutCard = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_card_count_ack countsNum.
     * @member {number} countsNum
     * @memberof proto_gc_card_count_ack
     * @instance
     */
    proto_gc_card_count_ack.prototype.countsNum = 0;

    /**
     * proto_gc_card_count_ack mVecPutCard.
     * @member {Array.<Iproto_CCard>} mVecPutCard
     * @memberof proto_gc_card_count_ack
     * @instance
     */
    proto_gc_card_count_ack.prototype.mVecPutCard = $util.emptyArray;

    /**
     * Creates a new proto_gc_card_count_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {Iproto_gc_card_count_ack=} [properties] Properties to set
     * @returns {proto_gc_card_count_ack} proto_gc_card_count_ack instance
     */
    proto_gc_card_count_ack.create = function create(properties) {
        return new proto_gc_card_count_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_card_count_ack message. Does not implicitly {@link proto_gc_card_count_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {Iproto_gc_card_count_ack} message proto_gc_card_count_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_card_count_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.countsNum);
        if (message.mVecPutCard != null && message.mVecPutCard.length)
            for (var i = 0; i < message.mVecPutCard.length; ++i)
                $root.proto_CCard.encode(message.mVecPutCard[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_card_count_ack message, length delimited. Does not implicitly {@link proto_gc_card_count_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {Iproto_gc_card_count_ack} message proto_gc_card_count_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_card_count_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_card_count_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_card_count_ack} proto_gc_card_count_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_card_count_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_card_count_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.countsNum = reader.int32();
                break;
            case 2:
                if (!(message.mVecPutCard && message.mVecPutCard.length))
                    message.mVecPutCard = [];
                message.mVecPutCard.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("countsNum"))
            throw $util.ProtocolError("missing required 'countsNum'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_card_count_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_card_count_ack} proto_gc_card_count_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_card_count_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_card_count_ack message.
     * @function verify
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_card_count_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.countsNum))
            return "countsNum: integer expected";
        if (message.mVecPutCard != null && message.hasOwnProperty("mVecPutCard")) {
            if (!Array.isArray(message.mVecPutCard))
                return "mVecPutCard: array expected";
            for (var i = 0; i < message.mVecPutCard.length; ++i) {
                var error = $root.proto_CCard.verify(message.mVecPutCard[i]);
                if (error)
                    return "mVecPutCard." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_card_count_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_card_count_ack} proto_gc_card_count_ack
     */
    proto_gc_card_count_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_card_count_ack)
            return object;
        var message = new $root.proto_gc_card_count_ack();
        if (object.countsNum != null)
            message.countsNum = object.countsNum | 0;
        if (object.mVecPutCard) {
            if (!Array.isArray(object.mVecPutCard))
                throw TypeError(".proto_gc_card_count_ack.mVecPutCard: array expected");
            message.mVecPutCard = [];
            for (var i = 0; i < object.mVecPutCard.length; ++i) {
                if (typeof object.mVecPutCard[i] !== "object")
                    throw TypeError(".proto_gc_card_count_ack.mVecPutCard: object expected");
                message.mVecPutCard[i] = $root.proto_CCard.fromObject(object.mVecPutCard[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_card_count_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_card_count_ack
     * @static
     * @param {proto_gc_card_count_ack} message proto_gc_card_count_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_card_count_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mVecPutCard = [];
        if (options.defaults)
            object.countsNum = 0;
        if (message.countsNum != null && message.hasOwnProperty("countsNum"))
            object.countsNum = message.countsNum;
        if (message.mVecPutCard && message.mVecPutCard.length) {
            object.mVecPutCard = [];
            for (var j = 0; j < message.mVecPutCard.length; ++j)
                object.mVecPutCard[j] = $root.proto_CCard.toObject(message.mVecPutCard[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_card_count_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_card_count_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_card_count_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_card_count_ack;
})();

$root.proto_gc_rob_lord_req = (function() {

    /**
     * Properties of a proto_gc_rob_lord_req.
     * @exports Iproto_gc_rob_lord_req
     * @interface Iproto_gc_rob_lord_req
     * @property {number} cDefaultLord proto_gc_rob_lord_req cDefaultLord
     * @property {number} nSerialID proto_gc_rob_lord_req nSerialID
     */

    /**
     * Constructs a new proto_gc_rob_lord_req.
     * @exports proto_gc_rob_lord_req
     * @classdesc Represents a proto_gc_rob_lord_req.
     * @implements Iproto_gc_rob_lord_req
     * @constructor
     * @param {Iproto_gc_rob_lord_req=} [properties] Properties to set
     */
    function proto_gc_rob_lord_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_rob_lord_req cDefaultLord.
     * @member {number} cDefaultLord
     * @memberof proto_gc_rob_lord_req
     * @instance
     */
    proto_gc_rob_lord_req.prototype.cDefaultLord = 0;

    /**
     * proto_gc_rob_lord_req nSerialID.
     * @member {number} nSerialID
     * @memberof proto_gc_rob_lord_req
     * @instance
     */
    proto_gc_rob_lord_req.prototype.nSerialID = 0;

    /**
     * Creates a new proto_gc_rob_lord_req instance using the specified properties.
     * @function create
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {Iproto_gc_rob_lord_req=} [properties] Properties to set
     * @returns {proto_gc_rob_lord_req} proto_gc_rob_lord_req instance
     */
    proto_gc_rob_lord_req.create = function create(properties) {
        return new proto_gc_rob_lord_req(properties);
    };

    /**
     * Encodes the specified proto_gc_rob_lord_req message. Does not implicitly {@link proto_gc_rob_lord_req.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {Iproto_gc_rob_lord_req} message proto_gc_rob_lord_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_rob_lord_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cDefaultLord);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_rob_lord_req message, length delimited. Does not implicitly {@link proto_gc_rob_lord_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {Iproto_gc_rob_lord_req} message proto_gc_rob_lord_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_rob_lord_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_rob_lord_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_rob_lord_req} proto_gc_rob_lord_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_rob_lord_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_rob_lord_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cDefaultLord = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cDefaultLord"))
            throw $util.ProtocolError("missing required 'cDefaultLord'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_rob_lord_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_rob_lord_req} proto_gc_rob_lord_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_rob_lord_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_rob_lord_req message.
     * @function verify
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_rob_lord_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cDefaultLord))
            return "cDefaultLord: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_rob_lord_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_rob_lord_req} proto_gc_rob_lord_req
     */
    proto_gc_rob_lord_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_rob_lord_req)
            return object;
        var message = new $root.proto_gc_rob_lord_req();
        if (object.cDefaultLord != null)
            message.cDefaultLord = object.cDefaultLord | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_rob_lord_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_rob_lord_req
     * @static
     * @param {proto_gc_rob_lord_req} message proto_gc_rob_lord_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_rob_lord_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cDefaultLord = 0;
            object.nSerialID = 0;
        }
        if (message.cDefaultLord != null && message.hasOwnProperty("cDefaultLord"))
            object.cDefaultLord = message.cDefaultLord;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_gc_rob_lord_req to JSON.
     * @function toJSON
     * @memberof proto_gc_rob_lord_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_rob_lord_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_rob_lord_req;
})();

$root.proto_sic_history_ack = (function() {

    /**
     * Properties of a proto_sic_history_ack.
     * @exports Iproto_sic_history_ack
     * @interface Iproto_sic_history_ack
     * @property {number} bIsFounder proto_sic_history_ack bIsFounder
     * @property {number} nPlayerMoneyBefore proto_sic_history_ack nPlayerMoneyBefore
     * @property {Array.<string>|null} [vecHistory] proto_sic_history_ack vecHistory
     * @property {number} nChipType proto_sic_history_ack nChipType
     * @property {Array.<number>|null} [vecChipValue] proto_sic_history_ack vecChipValue
     * @property {number} nAmountMax proto_sic_history_ack nAmountMax
     * @property {number} fNextRoundTimeWait proto_sic_history_ack fNextRoundTimeWait
     * @property {Array.<number>|null} [vecPeriod] proto_sic_history_ack vecPeriod
     */

    /**
     * Constructs a new proto_sic_history_ack.
     * @exports proto_sic_history_ack
     * @classdesc Represents a proto_sic_history_ack.
     * @implements Iproto_sic_history_ack
     * @constructor
     * @param {Iproto_sic_history_ack=} [properties] Properties to set
     */
    function proto_sic_history_ack(properties) {
        this.vecHistory = [];
        this.vecChipValue = [];
        this.vecPeriod = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_history_ack bIsFounder.
     * @member {number} bIsFounder
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.bIsFounder = 0;

    /**
     * proto_sic_history_ack nPlayerMoneyBefore.
     * @member {number} nPlayerMoneyBefore
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.nPlayerMoneyBefore = 0;

    /**
     * proto_sic_history_ack vecHistory.
     * @member {Array.<string>} vecHistory
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.vecHistory = $util.emptyArray;

    /**
     * proto_sic_history_ack nChipType.
     * @member {number} nChipType
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.nChipType = 0;

    /**
     * proto_sic_history_ack vecChipValue.
     * @member {Array.<number>} vecChipValue
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.vecChipValue = $util.emptyArray;

    /**
     * proto_sic_history_ack nAmountMax.
     * @member {number} nAmountMax
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.nAmountMax = 0;

    /**
     * proto_sic_history_ack fNextRoundTimeWait.
     * @member {number} fNextRoundTimeWait
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.fNextRoundTimeWait = 0;

    /**
     * proto_sic_history_ack vecPeriod.
     * @member {Array.<number>} vecPeriod
     * @memberof proto_sic_history_ack
     * @instance
     */
    proto_sic_history_ack.prototype.vecPeriod = $util.emptyArray;

    /**
     * Creates a new proto_sic_history_ack instance using the specified properties.
     * @function create
     * @memberof proto_sic_history_ack
     * @static
     * @param {Iproto_sic_history_ack=} [properties] Properties to set
     * @returns {proto_sic_history_ack} proto_sic_history_ack instance
     */
    proto_sic_history_ack.create = function create(properties) {
        return new proto_sic_history_ack(properties);
    };

    /**
     * Encodes the specified proto_sic_history_ack message. Does not implicitly {@link proto_sic_history_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_history_ack
     * @static
     * @param {Iproto_sic_history_ack} message proto_sic_history_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_history_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.bIsFounder);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nPlayerMoneyBefore);
        if (message.vecHistory != null && message.vecHistory.length)
            for (var i = 0; i < message.vecHistory.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.vecHistory[i]);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nChipType);
        if (message.vecChipValue != null && message.vecChipValue.length)
            for (var i = 0; i < message.vecChipValue.length; ++i)
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.vecChipValue[i]);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nAmountMax);
        writer.uint32(/* id 7, wireType 5 =*/61).float(message.fNextRoundTimeWait);
        if (message.vecPeriod != null && message.vecPeriod.length)
            for (var i = 0; i < message.vecPeriod.length; ++i)
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.vecPeriod[i]);
        return writer;
    };

    /**
     * Encodes the specified proto_sic_history_ack message, length delimited. Does not implicitly {@link proto_sic_history_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_history_ack
     * @static
     * @param {Iproto_sic_history_ack} message proto_sic_history_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_history_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_history_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_history_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_history_ack} proto_sic_history_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_history_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_history_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.bIsFounder = reader.int32();
                break;
            case 2:
                message.nPlayerMoneyBefore = reader.int32();
                break;
            case 3:
                if (!(message.vecHistory && message.vecHistory.length))
                    message.vecHistory = [];
                message.vecHistory.push(reader.string());
                break;
            case 4:
                message.nChipType = reader.int32();
                break;
            case 5:
                if (!(message.vecChipValue && message.vecChipValue.length))
                    message.vecChipValue = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecChipValue.push(reader.int32());
                } else
                    message.vecChipValue.push(reader.int32());
                break;
            case 6:
                message.nAmountMax = reader.int32();
                break;
            case 7:
                message.fNextRoundTimeWait = reader.float();
                break;
            case 8:
                if (!(message.vecPeriod && message.vecPeriod.length))
                    message.vecPeriod = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecPeriod.push(reader.int32());
                } else
                    message.vecPeriod.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("bIsFounder"))
            throw $util.ProtocolError("missing required 'bIsFounder'", { instance: message });
        if (!message.hasOwnProperty("nPlayerMoneyBefore"))
            throw $util.ProtocolError("missing required 'nPlayerMoneyBefore'", { instance: message });
        if (!message.hasOwnProperty("nChipType"))
            throw $util.ProtocolError("missing required 'nChipType'", { instance: message });
        if (!message.hasOwnProperty("nAmountMax"))
            throw $util.ProtocolError("missing required 'nAmountMax'", { instance: message });
        if (!message.hasOwnProperty("fNextRoundTimeWait"))
            throw $util.ProtocolError("missing required 'fNextRoundTimeWait'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_history_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_history_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_history_ack} proto_sic_history_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_history_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_history_ack message.
     * @function verify
     * @memberof proto_sic_history_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_history_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.bIsFounder))
            return "bIsFounder: integer expected";
        if (!$util.isInteger(message.nPlayerMoneyBefore))
            return "nPlayerMoneyBefore: integer expected";
        if (message.vecHistory != null && message.hasOwnProperty("vecHistory")) {
            if (!Array.isArray(message.vecHistory))
                return "vecHistory: array expected";
            for (var i = 0; i < message.vecHistory.length; ++i)
                if (!$util.isString(message.vecHistory[i]))
                    return "vecHistory: string[] expected";
        }
        if (!$util.isInteger(message.nChipType))
            return "nChipType: integer expected";
        if (message.vecChipValue != null && message.hasOwnProperty("vecChipValue")) {
            if (!Array.isArray(message.vecChipValue))
                return "vecChipValue: array expected";
            for (var i = 0; i < message.vecChipValue.length; ++i)
                if (!$util.isInteger(message.vecChipValue[i]))
                    return "vecChipValue: integer[] expected";
        }
        if (!$util.isInteger(message.nAmountMax))
            return "nAmountMax: integer expected";
        if (typeof message.fNextRoundTimeWait !== "number")
            return "fNextRoundTimeWait: number expected";
        if (message.vecPeriod != null && message.hasOwnProperty("vecPeriod")) {
            if (!Array.isArray(message.vecPeriod))
                return "vecPeriod: array expected";
            for (var i = 0; i < message.vecPeriod.length; ++i)
                if (!$util.isInteger(message.vecPeriod[i]))
                    return "vecPeriod: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a proto_sic_history_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_history_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_history_ack} proto_sic_history_ack
     */
    proto_sic_history_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_history_ack)
            return object;
        var message = new $root.proto_sic_history_ack();
        if (object.bIsFounder != null)
            message.bIsFounder = object.bIsFounder | 0;
        if (object.nPlayerMoneyBefore != null)
            message.nPlayerMoneyBefore = object.nPlayerMoneyBefore | 0;
        if (object.vecHistory) {
            if (!Array.isArray(object.vecHistory))
                throw TypeError(".proto_sic_history_ack.vecHistory: array expected");
            message.vecHistory = [];
            for (var i = 0; i < object.vecHistory.length; ++i)
                message.vecHistory[i] = String(object.vecHistory[i]);
        }
        if (object.nChipType != null)
            message.nChipType = object.nChipType | 0;
        if (object.vecChipValue) {
            if (!Array.isArray(object.vecChipValue))
                throw TypeError(".proto_sic_history_ack.vecChipValue: array expected");
            message.vecChipValue = [];
            for (var i = 0; i < object.vecChipValue.length; ++i)
                message.vecChipValue[i] = object.vecChipValue[i] | 0;
        }
        if (object.nAmountMax != null)
            message.nAmountMax = object.nAmountMax | 0;
        if (object.fNextRoundTimeWait != null)
            message.fNextRoundTimeWait = Number(object.fNextRoundTimeWait);
        if (object.vecPeriod) {
            if (!Array.isArray(object.vecPeriod))
                throw TypeError(".proto_sic_history_ack.vecPeriod: array expected");
            message.vecPeriod = [];
            for (var i = 0; i < object.vecPeriod.length; ++i)
                message.vecPeriod[i] = object.vecPeriod[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_history_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_history_ack
     * @static
     * @param {proto_sic_history_ack} message proto_sic_history_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_history_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecHistory = [];
            object.vecChipValue = [];
            object.vecPeriod = [];
        }
        if (options.defaults) {
            object.bIsFounder = 0;
            object.nPlayerMoneyBefore = 0;
            object.nChipType = 0;
            object.nAmountMax = 0;
            object.fNextRoundTimeWait = 0;
        }
        if (message.bIsFounder != null && message.hasOwnProperty("bIsFounder"))
            object.bIsFounder = message.bIsFounder;
        if (message.nPlayerMoneyBefore != null && message.hasOwnProperty("nPlayerMoneyBefore"))
            object.nPlayerMoneyBefore = message.nPlayerMoneyBefore;
        if (message.vecHistory && message.vecHistory.length) {
            object.vecHistory = [];
            for (var j = 0; j < message.vecHistory.length; ++j)
                object.vecHistory[j] = message.vecHistory[j];
        }
        if (message.nChipType != null && message.hasOwnProperty("nChipType"))
            object.nChipType = message.nChipType;
        if (message.vecChipValue && message.vecChipValue.length) {
            object.vecChipValue = [];
            for (var j = 0; j < message.vecChipValue.length; ++j)
                object.vecChipValue[j] = message.vecChipValue[j];
        }
        if (message.nAmountMax != null && message.hasOwnProperty("nAmountMax"))
            object.nAmountMax = message.nAmountMax;
        if (message.fNextRoundTimeWait != null && message.hasOwnProperty("fNextRoundTimeWait"))
            object.fNextRoundTimeWait = options.json && !isFinite(message.fNextRoundTimeWait) ? String(message.fNextRoundTimeWait) : message.fNextRoundTimeWait;
        if (message.vecPeriod && message.vecPeriod.length) {
            object.vecPeriod = [];
            for (var j = 0; j < message.vecPeriod.length; ++j)
                object.vecPeriod[j] = message.vecPeriod[j];
        }
        return object;
    };

    /**
     * Converts this proto_sic_history_ack to JSON.
     * @function toJSON
     * @memberof proto_sic_history_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_history_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_history_ack;
})();

$root.proto_cg_rob_lord_ack = (function() {

    /**
     * Properties of a proto_cg_rob_lord_ack.
     * @exports Iproto_cg_rob_lord_ack
     * @interface Iproto_cg_rob_lord_ack
     * @property {number} cRob proto_cg_rob_lord_ack cRob
     * @property {number} nSerialID proto_cg_rob_lord_ack nSerialID
     */

    /**
     * Constructs a new proto_cg_rob_lord_ack.
     * @exports proto_cg_rob_lord_ack
     * @classdesc Represents a proto_cg_rob_lord_ack.
     * @implements Iproto_cg_rob_lord_ack
     * @constructor
     * @param {Iproto_cg_rob_lord_ack=} [properties] Properties to set
     */
    function proto_cg_rob_lord_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_rob_lord_ack cRob.
     * @member {number} cRob
     * @memberof proto_cg_rob_lord_ack
     * @instance
     */
    proto_cg_rob_lord_ack.prototype.cRob = 0;

    /**
     * proto_cg_rob_lord_ack nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_rob_lord_ack
     * @instance
     */
    proto_cg_rob_lord_ack.prototype.nSerialID = 0;

    /**
     * Creates a new proto_cg_rob_lord_ack instance using the specified properties.
     * @function create
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {Iproto_cg_rob_lord_ack=} [properties] Properties to set
     * @returns {proto_cg_rob_lord_ack} proto_cg_rob_lord_ack instance
     */
    proto_cg_rob_lord_ack.create = function create(properties) {
        return new proto_cg_rob_lord_ack(properties);
    };

    /**
     * Encodes the specified proto_cg_rob_lord_ack message. Does not implicitly {@link proto_cg_rob_lord_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {Iproto_cg_rob_lord_ack} message proto_cg_rob_lord_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_rob_lord_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cRob);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_rob_lord_ack message, length delimited. Does not implicitly {@link proto_cg_rob_lord_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {Iproto_cg_rob_lord_ack} message proto_cg_rob_lord_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_rob_lord_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_rob_lord_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_rob_lord_ack} proto_cg_rob_lord_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_rob_lord_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_rob_lord_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cRob = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cRob"))
            throw $util.ProtocolError("missing required 'cRob'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_rob_lord_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_rob_lord_ack} proto_cg_rob_lord_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_rob_lord_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_rob_lord_ack message.
     * @function verify
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_rob_lord_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cRob))
            return "cRob: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_rob_lord_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_rob_lord_ack} proto_cg_rob_lord_ack
     */
    proto_cg_rob_lord_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_rob_lord_ack)
            return object;
        var message = new $root.proto_cg_rob_lord_ack();
        if (object.cRob != null)
            message.cRob = object.cRob | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_rob_lord_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_rob_lord_ack
     * @static
     * @param {proto_cg_rob_lord_ack} message proto_cg_rob_lord_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_rob_lord_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cRob = 0;
            object.nSerialID = 0;
        }
        if (message.cRob != null && message.hasOwnProperty("cRob"))
            object.cRob = message.cRob;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_cg_rob_lord_ack to JSON.
     * @function toJSON
     * @memberof proto_cg_rob_lord_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_rob_lord_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_rob_lord_ack;
})();

$root.proto_gc_show_card_not = (function() {

    /**
     * Properties of a proto_gc_show_card_not.
     * @exports Iproto_gc_show_card_not
     * @interface Iproto_gc_show_card_not
     * @property {number} nChairID proto_gc_show_card_not nChairID
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_show_card_not vecCards
     */

    /**
     * Constructs a new proto_gc_show_card_not.
     * @exports proto_gc_show_card_not
     * @classdesc Represents a proto_gc_show_card_not.
     * @implements Iproto_gc_show_card_not
     * @constructor
     * @param {Iproto_gc_show_card_not=} [properties] Properties to set
     */
    function proto_gc_show_card_not(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_show_card_not nChairID.
     * @member {number} nChairID
     * @memberof proto_gc_show_card_not
     * @instance
     */
    proto_gc_show_card_not.prototype.nChairID = 0;

    /**
     * proto_gc_show_card_not vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_show_card_not
     * @instance
     */
    proto_gc_show_card_not.prototype.vecCards = $util.emptyArray;

    /**
     * Creates a new proto_gc_show_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_show_card_not
     * @static
     * @param {Iproto_gc_show_card_not=} [properties] Properties to set
     * @returns {proto_gc_show_card_not} proto_gc_show_card_not instance
     */
    proto_gc_show_card_not.create = function create(properties) {
        return new proto_gc_show_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_show_card_not message. Does not implicitly {@link proto_gc_show_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_show_card_not
     * @static
     * @param {Iproto_gc_show_card_not} message proto_gc_show_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_show_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nChairID);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_show_card_not message, length delimited. Does not implicitly {@link proto_gc_show_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_show_card_not
     * @static
     * @param {Iproto_gc_show_card_not} message proto_gc_show_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_show_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_show_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_show_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_show_card_not} proto_gc_show_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_show_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_show_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nChairID = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nChairID"))
            throw $util.ProtocolError("missing required 'nChairID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_show_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_show_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_show_card_not} proto_gc_show_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_show_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_show_card_not message.
     * @function verify
     * @memberof proto_gc_show_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_show_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nChairID))
            return "nChairID: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_show_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_show_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_show_card_not} proto_gc_show_card_not
     */
    proto_gc_show_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_show_card_not)
            return object;
        var message = new $root.proto_gc_show_card_not();
        if (object.nChairID != null)
            message.nChairID = object.nChairID | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_show_card_not.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_show_card_not.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_show_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_show_card_not
     * @static
     * @param {proto_gc_show_card_not} message proto_gc_show_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_show_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults)
            object.nChairID = 0;
        if (message.nChairID != null && message.hasOwnProperty("nChairID"))
            object.nChairID = message.nChairID;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_show_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_show_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_show_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_show_card_not;
})();

$root.proto_sic_result_data_not = (function() {

    /**
     * Properties of a proto_sic_result_data_not.
     * @exports Iproto_sic_result_data_not
     * @interface Iproto_sic_result_data_not
     * @property {Array.<number>|null} [vecDice] proto_sic_result_data_not vecDice
     * @property {number} nWinMoney proto_sic_result_data_not nWinMoney
     * @property {number} nPlayerMoneyAfter proto_sic_result_data_not nPlayerMoneyAfter
     * @property {Array.<number>|null} [vecWinCells] proto_sic_result_data_not vecWinCells
     * @property {Array.<number>|null} [vecPlayerWinCells] proto_sic_result_data_not vecPlayerWinCells
     * @property {Array.<string>|null} [vecHitAward] proto_sic_result_data_not vecHitAward
     * @property {Array.<string>|null} [vecRank] proto_sic_result_data_not vecRank
     */

    /**
     * Constructs a new proto_sic_result_data_not.
     * @exports proto_sic_result_data_not
     * @classdesc Represents a proto_sic_result_data_not.
     * @implements Iproto_sic_result_data_not
     * @constructor
     * @param {Iproto_sic_result_data_not=} [properties] Properties to set
     */
    function proto_sic_result_data_not(properties) {
        this.vecDice = [];
        this.vecWinCells = [];
        this.vecPlayerWinCells = [];
        this.vecHitAward = [];
        this.vecRank = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_sic_result_data_not vecDice.
     * @member {Array.<number>} vecDice
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.vecDice = $util.emptyArray;

    /**
     * proto_sic_result_data_not nWinMoney.
     * @member {number} nWinMoney
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.nWinMoney = 0;

    /**
     * proto_sic_result_data_not nPlayerMoneyAfter.
     * @member {number} nPlayerMoneyAfter
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.nPlayerMoneyAfter = 0;

    /**
     * proto_sic_result_data_not vecWinCells.
     * @member {Array.<number>} vecWinCells
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.vecWinCells = $util.emptyArray;

    /**
     * proto_sic_result_data_not vecPlayerWinCells.
     * @member {Array.<number>} vecPlayerWinCells
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.vecPlayerWinCells = $util.emptyArray;

    /**
     * proto_sic_result_data_not vecHitAward.
     * @member {Array.<string>} vecHitAward
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.vecHitAward = $util.emptyArray;

    /**
     * proto_sic_result_data_not vecRank.
     * @member {Array.<string>} vecRank
     * @memberof proto_sic_result_data_not
     * @instance
     */
    proto_sic_result_data_not.prototype.vecRank = $util.emptyArray;

    /**
     * Creates a new proto_sic_result_data_not instance using the specified properties.
     * @function create
     * @memberof proto_sic_result_data_not
     * @static
     * @param {Iproto_sic_result_data_not=} [properties] Properties to set
     * @returns {proto_sic_result_data_not} proto_sic_result_data_not instance
     */
    proto_sic_result_data_not.create = function create(properties) {
        return new proto_sic_result_data_not(properties);
    };

    /**
     * Encodes the specified proto_sic_result_data_not message. Does not implicitly {@link proto_sic_result_data_not.verify|verify} messages.
     * @function encode
     * @memberof proto_sic_result_data_not
     * @static
     * @param {Iproto_sic_result_data_not} message proto_sic_result_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_result_data_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.vecDice != null && message.vecDice.length)
            for (var i = 0; i < message.vecDice.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vecDice[i]);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nWinMoney);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nPlayerMoneyAfter);
        if (message.vecWinCells != null && message.vecWinCells.length)
            for (var i = 0; i < message.vecWinCells.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.vecWinCells[i]);
        if (message.vecPlayerWinCells != null && message.vecPlayerWinCells.length)
            for (var i = 0; i < message.vecPlayerWinCells.length; ++i)
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.vecPlayerWinCells[i]);
        if (message.vecHitAward != null && message.vecHitAward.length)
            for (var i = 0; i < message.vecHitAward.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.vecHitAward[i]);
        if (message.vecRank != null && message.vecRank.length)
            for (var i = 0; i < message.vecRank.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.vecRank[i]);
        return writer;
    };

    /**
     * Encodes the specified proto_sic_result_data_not message, length delimited. Does not implicitly {@link proto_sic_result_data_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_sic_result_data_not
     * @static
     * @param {Iproto_sic_result_data_not} message proto_sic_result_data_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_sic_result_data_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_sic_result_data_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_sic_result_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_sic_result_data_not} proto_sic_result_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_result_data_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_sic_result_data_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.vecDice && message.vecDice.length))
                    message.vecDice = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecDice.push(reader.int32());
                } else
                    message.vecDice.push(reader.int32());
                break;
            case 2:
                message.nWinMoney = reader.int32();
                break;
            case 3:
                message.nPlayerMoneyAfter = reader.int32();
                break;
            case 4:
                if (!(message.vecWinCells && message.vecWinCells.length))
                    message.vecWinCells = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecWinCells.push(reader.int32());
                } else
                    message.vecWinCells.push(reader.int32());
                break;
            case 5:
                if (!(message.vecPlayerWinCells && message.vecPlayerWinCells.length))
                    message.vecPlayerWinCells = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecPlayerWinCells.push(reader.int32());
                } else
                    message.vecPlayerWinCells.push(reader.int32());
                break;
            case 6:
                if (!(message.vecHitAward && message.vecHitAward.length))
                    message.vecHitAward = [];
                message.vecHitAward.push(reader.string());
                break;
            case 7:
                if (!(message.vecRank && message.vecRank.length))
                    message.vecRank = [];
                message.vecRank.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nWinMoney"))
            throw $util.ProtocolError("missing required 'nWinMoney'", { instance: message });
        if (!message.hasOwnProperty("nPlayerMoneyAfter"))
            throw $util.ProtocolError("missing required 'nPlayerMoneyAfter'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_sic_result_data_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_sic_result_data_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_sic_result_data_not} proto_sic_result_data_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_sic_result_data_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_sic_result_data_not message.
     * @function verify
     * @memberof proto_sic_result_data_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_sic_result_data_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.vecDice != null && message.hasOwnProperty("vecDice")) {
            if (!Array.isArray(message.vecDice))
                return "vecDice: array expected";
            for (var i = 0; i < message.vecDice.length; ++i)
                if (!$util.isInteger(message.vecDice[i]))
                    return "vecDice: integer[] expected";
        }
        if (!$util.isInteger(message.nWinMoney))
            return "nWinMoney: integer expected";
        if (!$util.isInteger(message.nPlayerMoneyAfter))
            return "nPlayerMoneyAfter: integer expected";
        if (message.vecWinCells != null && message.hasOwnProperty("vecWinCells")) {
            if (!Array.isArray(message.vecWinCells))
                return "vecWinCells: array expected";
            for (var i = 0; i < message.vecWinCells.length; ++i)
                if (!$util.isInteger(message.vecWinCells[i]))
                    return "vecWinCells: integer[] expected";
        }
        if (message.vecPlayerWinCells != null && message.hasOwnProperty("vecPlayerWinCells")) {
            if (!Array.isArray(message.vecPlayerWinCells))
                return "vecPlayerWinCells: array expected";
            for (var i = 0; i < message.vecPlayerWinCells.length; ++i)
                if (!$util.isInteger(message.vecPlayerWinCells[i]))
                    return "vecPlayerWinCells: integer[] expected";
        }
        if (message.vecHitAward != null && message.hasOwnProperty("vecHitAward")) {
            if (!Array.isArray(message.vecHitAward))
                return "vecHitAward: array expected";
            for (var i = 0; i < message.vecHitAward.length; ++i)
                if (!$util.isString(message.vecHitAward[i]))
                    return "vecHitAward: string[] expected";
        }
        if (message.vecRank != null && message.hasOwnProperty("vecRank")) {
            if (!Array.isArray(message.vecRank))
                return "vecRank: array expected";
            for (var i = 0; i < message.vecRank.length; ++i)
                if (!$util.isString(message.vecRank[i]))
                    return "vecRank: string[] expected";
        }
        return null;
    };

    /**
     * Creates a proto_sic_result_data_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_sic_result_data_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_sic_result_data_not} proto_sic_result_data_not
     */
    proto_sic_result_data_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_sic_result_data_not)
            return object;
        var message = new $root.proto_sic_result_data_not();
        if (object.vecDice) {
            if (!Array.isArray(object.vecDice))
                throw TypeError(".proto_sic_result_data_not.vecDice: array expected");
            message.vecDice = [];
            for (var i = 0; i < object.vecDice.length; ++i)
                message.vecDice[i] = object.vecDice[i] | 0;
        }
        if (object.nWinMoney != null)
            message.nWinMoney = object.nWinMoney | 0;
        if (object.nPlayerMoneyAfter != null)
            message.nPlayerMoneyAfter = object.nPlayerMoneyAfter | 0;
        if (object.vecWinCells) {
            if (!Array.isArray(object.vecWinCells))
                throw TypeError(".proto_sic_result_data_not.vecWinCells: array expected");
            message.vecWinCells = [];
            for (var i = 0; i < object.vecWinCells.length; ++i)
                message.vecWinCells[i] = object.vecWinCells[i] | 0;
        }
        if (object.vecPlayerWinCells) {
            if (!Array.isArray(object.vecPlayerWinCells))
                throw TypeError(".proto_sic_result_data_not.vecPlayerWinCells: array expected");
            message.vecPlayerWinCells = [];
            for (var i = 0; i < object.vecPlayerWinCells.length; ++i)
                message.vecPlayerWinCells[i] = object.vecPlayerWinCells[i] | 0;
        }
        if (object.vecHitAward) {
            if (!Array.isArray(object.vecHitAward))
                throw TypeError(".proto_sic_result_data_not.vecHitAward: array expected");
            message.vecHitAward = [];
            for (var i = 0; i < object.vecHitAward.length; ++i)
                message.vecHitAward[i] = String(object.vecHitAward[i]);
        }
        if (object.vecRank) {
            if (!Array.isArray(object.vecRank))
                throw TypeError(".proto_sic_result_data_not.vecRank: array expected");
            message.vecRank = [];
            for (var i = 0; i < object.vecRank.length; ++i)
                message.vecRank[i] = String(object.vecRank[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_sic_result_data_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_sic_result_data_not
     * @static
     * @param {proto_sic_result_data_not} message proto_sic_result_data_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_sic_result_data_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecDice = [];
            object.vecWinCells = [];
            object.vecPlayerWinCells = [];
            object.vecHitAward = [];
            object.vecRank = [];
        }
        if (options.defaults) {
            object.nWinMoney = 0;
            object.nPlayerMoneyAfter = 0;
        }
        if (message.vecDice && message.vecDice.length) {
            object.vecDice = [];
            for (var j = 0; j < message.vecDice.length; ++j)
                object.vecDice[j] = message.vecDice[j];
        }
        if (message.nWinMoney != null && message.hasOwnProperty("nWinMoney"))
            object.nWinMoney = message.nWinMoney;
        if (message.nPlayerMoneyAfter != null && message.hasOwnProperty("nPlayerMoneyAfter"))
            object.nPlayerMoneyAfter = message.nPlayerMoneyAfter;
        if (message.vecWinCells && message.vecWinCells.length) {
            object.vecWinCells = [];
            for (var j = 0; j < message.vecWinCells.length; ++j)
                object.vecWinCells[j] = message.vecWinCells[j];
        }
        if (message.vecPlayerWinCells && message.vecPlayerWinCells.length) {
            object.vecPlayerWinCells = [];
            for (var j = 0; j < message.vecPlayerWinCells.length; ++j)
                object.vecPlayerWinCells[j] = message.vecPlayerWinCells[j];
        }
        if (message.vecHitAward && message.vecHitAward.length) {
            object.vecHitAward = [];
            for (var j = 0; j < message.vecHitAward.length; ++j)
                object.vecHitAward[j] = message.vecHitAward[j];
        }
        if (message.vecRank && message.vecRank.length) {
            object.vecRank = [];
            for (var j = 0; j < message.vecRank.length; ++j)
                object.vecRank[j] = message.vecRank[j];
        }
        return object;
    };

    /**
     * Converts this proto_sic_result_data_not to JSON.
     * @function toJSON
     * @memberof proto_sic_result_data_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_sic_result_data_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_sic_result_data_not;
})();

$root.proto_cg_show_card_ack = (function() {

    /**
     * Properties of a proto_cg_show_card_ack.
     * @exports Iproto_cg_show_card_ack
     * @interface Iproto_cg_show_card_ack
     * @property {number} cShowCard proto_cg_show_card_ack cShowCard
     * @property {number} nSerialID proto_cg_show_card_ack nSerialID
     * @property {number} nShowCardBet proto_cg_show_card_ack nShowCardBet
     * @property {number} nShowCardType proto_cg_show_card_ack nShowCardType
     */

    /**
     * Constructs a new proto_cg_show_card_ack.
     * @exports proto_cg_show_card_ack
     * @classdesc Represents a proto_cg_show_card_ack.
     * @implements Iproto_cg_show_card_ack
     * @constructor
     * @param {Iproto_cg_show_card_ack=} [properties] Properties to set
     */
    function proto_cg_show_card_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_show_card_ack cShowCard.
     * @member {number} cShowCard
     * @memberof proto_cg_show_card_ack
     * @instance
     */
    proto_cg_show_card_ack.prototype.cShowCard = 0;

    /**
     * proto_cg_show_card_ack nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_show_card_ack
     * @instance
     */
    proto_cg_show_card_ack.prototype.nSerialID = 0;

    /**
     * proto_cg_show_card_ack nShowCardBet.
     * @member {number} nShowCardBet
     * @memberof proto_cg_show_card_ack
     * @instance
     */
    proto_cg_show_card_ack.prototype.nShowCardBet = 0;

    /**
     * proto_cg_show_card_ack nShowCardType.
     * @member {number} nShowCardType
     * @memberof proto_cg_show_card_ack
     * @instance
     */
    proto_cg_show_card_ack.prototype.nShowCardType = 0;

    /**
     * Creates a new proto_cg_show_card_ack instance using the specified properties.
     * @function create
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {Iproto_cg_show_card_ack=} [properties] Properties to set
     * @returns {proto_cg_show_card_ack} proto_cg_show_card_ack instance
     */
    proto_cg_show_card_ack.create = function create(properties) {
        return new proto_cg_show_card_ack(properties);
    };

    /**
     * Encodes the specified proto_cg_show_card_ack message. Does not implicitly {@link proto_cg_show_card_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {Iproto_cg_show_card_ack} message proto_cg_show_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_show_card_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cShowCard);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nSerialID);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nShowCardBet);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nShowCardType);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_show_card_ack message, length delimited. Does not implicitly {@link proto_cg_show_card_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {Iproto_cg_show_card_ack} message proto_cg_show_card_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_show_card_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_show_card_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_show_card_ack} proto_cg_show_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_show_card_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_show_card_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cShowCard = reader.int32();
                break;
            case 2:
                message.nSerialID = reader.int32();
                break;
            case 3:
                message.nShowCardBet = reader.int32();
                break;
            case 4:
                message.nShowCardType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cShowCard"))
            throw $util.ProtocolError("missing required 'cShowCard'", { instance: message });
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        if (!message.hasOwnProperty("nShowCardBet"))
            throw $util.ProtocolError("missing required 'nShowCardBet'", { instance: message });
        if (!message.hasOwnProperty("nShowCardType"))
            throw $util.ProtocolError("missing required 'nShowCardType'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_show_card_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_show_card_ack} proto_cg_show_card_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_show_card_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_show_card_ack message.
     * @function verify
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_show_card_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cShowCard))
            return "cShowCard: integer expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        if (!$util.isInteger(message.nShowCardBet))
            return "nShowCardBet: integer expected";
        if (!$util.isInteger(message.nShowCardType))
            return "nShowCardType: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_show_card_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_show_card_ack} proto_cg_show_card_ack
     */
    proto_cg_show_card_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_show_card_ack)
            return object;
        var message = new $root.proto_cg_show_card_ack();
        if (object.cShowCard != null)
            message.cShowCard = object.cShowCard | 0;
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        if (object.nShowCardBet != null)
            message.nShowCardBet = object.nShowCardBet | 0;
        if (object.nShowCardType != null)
            message.nShowCardType = object.nShowCardType | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_show_card_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_show_card_ack
     * @static
     * @param {proto_cg_show_card_ack} message proto_cg_show_card_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_show_card_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cShowCard = 0;
            object.nSerialID = 0;
            object.nShowCardBet = 0;
            object.nShowCardType = 0;
        }
        if (message.cShowCard != null && message.hasOwnProperty("cShowCard"))
            object.cShowCard = message.cShowCard;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        if (message.nShowCardBet != null && message.hasOwnProperty("nShowCardBet"))
            object.nShowCardBet = message.nShowCardBet;
        if (message.nShowCardType != null && message.hasOwnProperty("nShowCardType"))
            object.nShowCardType = message.nShowCardType;
        return object;
    };

    /**
     * Converts this proto_cg_show_card_ack to JSON.
     * @function toJSON
     * @memberof proto_cg_show_card_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_show_card_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_show_card_ack;
})();

$root.proto_cg_send_card_ok_ack = (function() {

    /**
     * Properties of a proto_cg_send_card_ok_ack.
     * @exports Iproto_cg_send_card_ok_ack
     * @interface Iproto_cg_send_card_ok_ack
     * @property {number} nSerialID proto_cg_send_card_ok_ack nSerialID
     */

    /**
     * Constructs a new proto_cg_send_card_ok_ack.
     * @exports proto_cg_send_card_ok_ack
     * @classdesc Represents a proto_cg_send_card_ok_ack.
     * @implements Iproto_cg_send_card_ok_ack
     * @constructor
     * @param {Iproto_cg_send_card_ok_ack=} [properties] Properties to set
     */
    function proto_cg_send_card_ok_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_send_card_ok_ack nSerialID.
     * @member {number} nSerialID
     * @memberof proto_cg_send_card_ok_ack
     * @instance
     */
    proto_cg_send_card_ok_ack.prototype.nSerialID = 0;

    /**
     * Creates a new proto_cg_send_card_ok_ack instance using the specified properties.
     * @function create
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {Iproto_cg_send_card_ok_ack=} [properties] Properties to set
     * @returns {proto_cg_send_card_ok_ack} proto_cg_send_card_ok_ack instance
     */
    proto_cg_send_card_ok_ack.create = function create(properties) {
        return new proto_cg_send_card_ok_ack(properties);
    };

    /**
     * Encodes the specified proto_cg_send_card_ok_ack message. Does not implicitly {@link proto_cg_send_card_ok_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {Iproto_cg_send_card_ok_ack} message proto_cg_send_card_ok_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_send_card_ok_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nSerialID);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_send_card_ok_ack message, length delimited. Does not implicitly {@link proto_cg_send_card_ok_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {Iproto_cg_send_card_ok_ack} message proto_cg_send_card_ok_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_send_card_ok_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_send_card_ok_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_send_card_ok_ack} proto_cg_send_card_ok_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_send_card_ok_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_send_card_ok_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nSerialID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nSerialID"))
            throw $util.ProtocolError("missing required 'nSerialID'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_send_card_ok_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_send_card_ok_ack} proto_cg_send_card_ok_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_send_card_ok_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_send_card_ok_ack message.
     * @function verify
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_send_card_ok_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nSerialID))
            return "nSerialID: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_send_card_ok_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_send_card_ok_ack} proto_cg_send_card_ok_ack
     */
    proto_cg_send_card_ok_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_send_card_ok_ack)
            return object;
        var message = new $root.proto_cg_send_card_ok_ack();
        if (object.nSerialID != null)
            message.nSerialID = object.nSerialID | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_send_card_ok_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_send_card_ok_ack
     * @static
     * @param {proto_cg_send_card_ok_ack} message proto_cg_send_card_ok_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_send_card_ok_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nSerialID = 0;
        if (message.nSerialID != null && message.hasOwnProperty("nSerialID"))
            object.nSerialID = message.nSerialID;
        return object;
    };

    /**
     * Converts this proto_cg_send_card_ok_ack to JSON.
     * @function toJSON
     * @memberof proto_cg_send_card_ok_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_send_card_ok_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_send_card_ok_ack;
})();

$root.proto_gc_lord_card_not = (function() {

    /**
     * Properties of a proto_gc_lord_card_not.
     * @exports Iproto_gc_lord_card_not
     * @interface Iproto_gc_lord_card_not
     * @property {number} cLord proto_gc_lord_card_not cLord
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_lord_card_not vecCards
     */

    /**
     * Constructs a new proto_gc_lord_card_not.
     * @exports proto_gc_lord_card_not
     * @classdesc Represents a proto_gc_lord_card_not.
     * @implements Iproto_gc_lord_card_not
     * @constructor
     * @param {Iproto_gc_lord_card_not=} [properties] Properties to set
     */
    function proto_gc_lord_card_not(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_lord_card_not cLord.
     * @member {number} cLord
     * @memberof proto_gc_lord_card_not
     * @instance
     */
    proto_gc_lord_card_not.prototype.cLord = 0;

    /**
     * proto_gc_lord_card_not vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_lord_card_not
     * @instance
     */
    proto_gc_lord_card_not.prototype.vecCards = $util.emptyArray;

    /**
     * Creates a new proto_gc_lord_card_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {Iproto_gc_lord_card_not=} [properties] Properties to set
     * @returns {proto_gc_lord_card_not} proto_gc_lord_card_not instance
     */
    proto_gc_lord_card_not.create = function create(properties) {
        return new proto_gc_lord_card_not(properties);
    };

    /**
     * Encodes the specified proto_gc_lord_card_not message. Does not implicitly {@link proto_gc_lord_card_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {Iproto_gc_lord_card_not} message proto_gc_lord_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_lord_card_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cLord);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_lord_card_not message, length delimited. Does not implicitly {@link proto_gc_lord_card_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {Iproto_gc_lord_card_not} message proto_gc_lord_card_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_lord_card_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_lord_card_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_lord_card_not} proto_gc_lord_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_lord_card_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_lord_card_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cLord = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cLord"))
            throw $util.ProtocolError("missing required 'cLord'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_lord_card_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_lord_card_not} proto_gc_lord_card_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_lord_card_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_lord_card_not message.
     * @function verify
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_lord_card_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cLord))
            return "cLord: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_lord_card_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_lord_card_not} proto_gc_lord_card_not
     */
    proto_gc_lord_card_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_lord_card_not)
            return object;
        var message = new $root.proto_gc_lord_card_not();
        if (object.cLord != null)
            message.cLord = object.cLord | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_lord_card_not.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_lord_card_not.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_lord_card_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_lord_card_not
     * @static
     * @param {proto_gc_lord_card_not} message proto_gc_lord_card_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_lord_card_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults)
            object.cLord = 0;
        if (message.cLord != null && message.hasOwnProperty("cLord"))
            object.cLord = message.cLord;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_lord_card_not to JSON.
     * @function toJSON
     * @memberof proto_gc_lord_card_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_lord_card_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_lord_card_not;
})();

$root.proto_gc_get_redpackets_88yuan_award_ack = (function() {

    /**
     * Properties of a proto_gc_get_redpackets_88yuan_award_ack.
     * @exports Iproto_gc_get_redpackets_88yuan_award_ack
     * @interface Iproto_gc_get_redpackets_88yuan_award_ack
     * @property {number} ret proto_gc_get_redpackets_88yuan_award_ack ret
     * @property {number} curRounds proto_gc_get_redpackets_88yuan_award_ack curRounds
     * @property {number} limitRounds proto_gc_get_redpackets_88yuan_award_ack limitRounds
     * @property {number} nAmount proto_gc_get_redpackets_88yuan_award_ack nAmount
     * @property {number} cItemtype proto_gc_get_redpackets_88yuan_award_ack cItemtype
     * @property {number} taskId proto_gc_get_redpackets_88yuan_award_ack taskId
     */

    /**
     * Constructs a new proto_gc_get_redpackets_88yuan_award_ack.
     * @exports proto_gc_get_redpackets_88yuan_award_ack
     * @classdesc Represents a proto_gc_get_redpackets_88yuan_award_ack.
     * @implements Iproto_gc_get_redpackets_88yuan_award_ack
     * @constructor
     * @param {Iproto_gc_get_redpackets_88yuan_award_ack=} [properties] Properties to set
     */
    function proto_gc_get_redpackets_88yuan_award_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_get_redpackets_88yuan_award_ack ret.
     * @member {number} ret
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.ret = 0;

    /**
     * proto_gc_get_redpackets_88yuan_award_ack curRounds.
     * @member {number} curRounds
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.curRounds = 0;

    /**
     * proto_gc_get_redpackets_88yuan_award_ack limitRounds.
     * @member {number} limitRounds
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.limitRounds = 0;

    /**
     * proto_gc_get_redpackets_88yuan_award_ack nAmount.
     * @member {number} nAmount
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.nAmount = 0;

    /**
     * proto_gc_get_redpackets_88yuan_award_ack cItemtype.
     * @member {number} cItemtype
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.cItemtype = 0;

    /**
     * proto_gc_get_redpackets_88yuan_award_ack taskId.
     * @member {number} taskId
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.taskId = 0;

    /**
     * Creates a new proto_gc_get_redpackets_88yuan_award_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {Iproto_gc_get_redpackets_88yuan_award_ack=} [properties] Properties to set
     * @returns {proto_gc_get_redpackets_88yuan_award_ack} proto_gc_get_redpackets_88yuan_award_ack instance
     */
    proto_gc_get_redpackets_88yuan_award_ack.create = function create(properties) {
        return new proto_gc_get_redpackets_88yuan_award_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_get_redpackets_88yuan_award_ack message. Does not implicitly {@link proto_gc_get_redpackets_88yuan_award_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {Iproto_gc_get_redpackets_88yuan_award_ack} message proto_gc_get_redpackets_88yuan_award_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_redpackets_88yuan_award_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ret);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.curRounds);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.limitRounds);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nAmount);
        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cItemtype);
        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.taskId);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_get_redpackets_88yuan_award_ack message, length delimited. Does not implicitly {@link proto_gc_get_redpackets_88yuan_award_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {Iproto_gc_get_redpackets_88yuan_award_ack} message proto_gc_get_redpackets_88yuan_award_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_get_redpackets_88yuan_award_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_get_redpackets_88yuan_award_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_get_redpackets_88yuan_award_ack} proto_gc_get_redpackets_88yuan_award_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_redpackets_88yuan_award_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_get_redpackets_88yuan_award_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ret = reader.int32();
                break;
            case 2:
                message.curRounds = reader.int32();
                break;
            case 3:
                message.limitRounds = reader.int32();
                break;
            case 4:
                message.nAmount = reader.int32();
                break;
            case 5:
                message.cItemtype = reader.int32();
                break;
            case 6:
                message.taskId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ret"))
            throw $util.ProtocolError("missing required 'ret'", { instance: message });
        if (!message.hasOwnProperty("curRounds"))
            throw $util.ProtocolError("missing required 'curRounds'", { instance: message });
        if (!message.hasOwnProperty("limitRounds"))
            throw $util.ProtocolError("missing required 'limitRounds'", { instance: message });
        if (!message.hasOwnProperty("nAmount"))
            throw $util.ProtocolError("missing required 'nAmount'", { instance: message });
        if (!message.hasOwnProperty("cItemtype"))
            throw $util.ProtocolError("missing required 'cItemtype'", { instance: message });
        if (!message.hasOwnProperty("taskId"))
            throw $util.ProtocolError("missing required 'taskId'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_get_redpackets_88yuan_award_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_get_redpackets_88yuan_award_ack} proto_gc_get_redpackets_88yuan_award_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_get_redpackets_88yuan_award_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_get_redpackets_88yuan_award_ack message.
     * @function verify
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_get_redpackets_88yuan_award_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ret))
            return "ret: integer expected";
        if (!$util.isInteger(message.curRounds))
            return "curRounds: integer expected";
        if (!$util.isInteger(message.limitRounds))
            return "limitRounds: integer expected";
        if (!$util.isInteger(message.nAmount))
            return "nAmount: integer expected";
        if (!$util.isInteger(message.cItemtype))
            return "cItemtype: integer expected";
        if (!$util.isInteger(message.taskId))
            return "taskId: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_get_redpackets_88yuan_award_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_get_redpackets_88yuan_award_ack} proto_gc_get_redpackets_88yuan_award_ack
     */
    proto_gc_get_redpackets_88yuan_award_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_get_redpackets_88yuan_award_ack)
            return object;
        var message = new $root.proto_gc_get_redpackets_88yuan_award_ack();
        if (object.ret != null)
            message.ret = object.ret | 0;
        if (object.curRounds != null)
            message.curRounds = object.curRounds | 0;
        if (object.limitRounds != null)
            message.limitRounds = object.limitRounds | 0;
        if (object.nAmount != null)
            message.nAmount = object.nAmount | 0;
        if (object.cItemtype != null)
            message.cItemtype = object.cItemtype | 0;
        if (object.taskId != null)
            message.taskId = object.taskId | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_get_redpackets_88yuan_award_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @static
     * @param {proto_gc_get_redpackets_88yuan_award_ack} message proto_gc_get_redpackets_88yuan_award_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_get_redpackets_88yuan_award_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ret = 0;
            object.curRounds = 0;
            object.limitRounds = 0;
            object.nAmount = 0;
            object.cItemtype = 0;
            object.taskId = 0;
        }
        if (message.ret != null && message.hasOwnProperty("ret"))
            object.ret = message.ret;
        if (message.curRounds != null && message.hasOwnProperty("curRounds"))
            object.curRounds = message.curRounds;
        if (message.limitRounds != null && message.hasOwnProperty("limitRounds"))
            object.limitRounds = message.limitRounds;
        if (message.nAmount != null && message.hasOwnProperty("nAmount"))
            object.nAmount = message.nAmount;
        if (message.cItemtype != null && message.hasOwnProperty("cItemtype"))
            object.cItemtype = message.cItemtype;
        if (message.taskId != null && message.hasOwnProperty("taskId"))
            object.taskId = message.taskId;
        return object;
    };

    /**
     * Converts this proto_gc_get_redpackets_88yuan_award_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_get_redpackets_88yuan_award_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_get_redpackets_88yuan_award_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_get_redpackets_88yuan_award_ack;
})();

$root.proto_cg_get_redpackets_88yuan_award_req = (function() {

    /**
     * Properties of a proto_cg_get_redpackets_88yuan_award_req.
     * @exports Iproto_cg_get_redpackets_88yuan_award_req
     * @interface Iproto_cg_get_redpackets_88yuan_award_req
     * @property {number} type proto_cg_get_redpackets_88yuan_award_req type
     */

    /**
     * Constructs a new proto_cg_get_redpackets_88yuan_award_req.
     * @exports proto_cg_get_redpackets_88yuan_award_req
     * @classdesc Represents a proto_cg_get_redpackets_88yuan_award_req.
     * @implements Iproto_cg_get_redpackets_88yuan_award_req
     * @constructor
     * @param {Iproto_cg_get_redpackets_88yuan_award_req=} [properties] Properties to set
     */
    function proto_cg_get_redpackets_88yuan_award_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_get_redpackets_88yuan_award_req type.
     * @member {number} type
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @instance
     */
    proto_cg_get_redpackets_88yuan_award_req.prototype.type = 0;

    /**
     * Creates a new proto_cg_get_redpackets_88yuan_award_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {Iproto_cg_get_redpackets_88yuan_award_req=} [properties] Properties to set
     * @returns {proto_cg_get_redpackets_88yuan_award_req} proto_cg_get_redpackets_88yuan_award_req instance
     */
    proto_cg_get_redpackets_88yuan_award_req.create = function create(properties) {
        return new proto_cg_get_redpackets_88yuan_award_req(properties);
    };

    /**
     * Encodes the specified proto_cg_get_redpackets_88yuan_award_req message. Does not implicitly {@link proto_cg_get_redpackets_88yuan_award_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {Iproto_cg_get_redpackets_88yuan_award_req} message proto_cg_get_redpackets_88yuan_award_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_redpackets_88yuan_award_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_get_redpackets_88yuan_award_req message, length delimited. Does not implicitly {@link proto_cg_get_redpackets_88yuan_award_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {Iproto_cg_get_redpackets_88yuan_award_req} message proto_cg_get_redpackets_88yuan_award_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_get_redpackets_88yuan_award_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_get_redpackets_88yuan_award_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_get_redpackets_88yuan_award_req} proto_cg_get_redpackets_88yuan_award_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_redpackets_88yuan_award_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_get_redpackets_88yuan_award_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_get_redpackets_88yuan_award_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_get_redpackets_88yuan_award_req} proto_cg_get_redpackets_88yuan_award_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_get_redpackets_88yuan_award_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_get_redpackets_88yuan_award_req message.
     * @function verify
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_get_redpackets_88yuan_award_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.type))
            return "type: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_get_redpackets_88yuan_award_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_get_redpackets_88yuan_award_req} proto_cg_get_redpackets_88yuan_award_req
     */
    proto_cg_get_redpackets_88yuan_award_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_get_redpackets_88yuan_award_req)
            return object;
        var message = new $root.proto_cg_get_redpackets_88yuan_award_req();
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_get_redpackets_88yuan_award_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @static
     * @param {proto_cg_get_redpackets_88yuan_award_req} message proto_cg_get_redpackets_88yuan_award_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_get_redpackets_88yuan_award_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.type = 0;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };

    /**
     * Converts this proto_cg_get_redpackets_88yuan_award_req to JSON.
     * @function toJSON
     * @memberof proto_cg_get_redpackets_88yuan_award_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_get_redpackets_88yuan_award_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_get_redpackets_88yuan_award_req;
})();

$root.proto_emojiConfig = (function() {

    /**
     * Properties of a proto_emojiConfig.
     * @exports Iproto_emojiConfig
     * @interface Iproto_emojiConfig
     * @property {number} cEmojiIndex proto_emojiConfig cEmojiIndex
     * @property {number} cCostType proto_emojiConfig cCostType
     * @property {number} cCostValue proto_emojiConfig cCostValue
     */

    /**
     * Constructs a new proto_emojiConfig.
     * @exports proto_emojiConfig
     * @classdesc Represents a proto_emojiConfig.
     * @implements Iproto_emojiConfig
     * @constructor
     * @param {Iproto_emojiConfig=} [properties] Properties to set
     */
    function proto_emojiConfig(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_emojiConfig cEmojiIndex.
     * @member {number} cEmojiIndex
     * @memberof proto_emojiConfig
     * @instance
     */
    proto_emojiConfig.prototype.cEmojiIndex = 0;

    /**
     * proto_emojiConfig cCostType.
     * @member {number} cCostType
     * @memberof proto_emojiConfig
     * @instance
     */
    proto_emojiConfig.prototype.cCostType = 0;

    /**
     * proto_emojiConfig cCostValue.
     * @member {number} cCostValue
     * @memberof proto_emojiConfig
     * @instance
     */
    proto_emojiConfig.prototype.cCostValue = 0;

    /**
     * Creates a new proto_emojiConfig instance using the specified properties.
     * @function create
     * @memberof proto_emojiConfig
     * @static
     * @param {Iproto_emojiConfig=} [properties] Properties to set
     * @returns {proto_emojiConfig} proto_emojiConfig instance
     */
    proto_emojiConfig.create = function create(properties) {
        return new proto_emojiConfig(properties);
    };

    /**
     * Encodes the specified proto_emojiConfig message. Does not implicitly {@link proto_emojiConfig.verify|verify} messages.
     * @function encode
     * @memberof proto_emojiConfig
     * @static
     * @param {Iproto_emojiConfig} message proto_emojiConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_emojiConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cEmojiIndex);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cCostType);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cCostValue);
        return writer;
    };

    /**
     * Encodes the specified proto_emojiConfig message, length delimited. Does not implicitly {@link proto_emojiConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_emojiConfig
     * @static
     * @param {Iproto_emojiConfig} message proto_emojiConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_emojiConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_emojiConfig message from the specified reader or buffer.
     * @function decode
     * @memberof proto_emojiConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_emojiConfig} proto_emojiConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_emojiConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_emojiConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cEmojiIndex = reader.int32();
                break;
            case 2:
                message.cCostType = reader.int32();
                break;
            case 3:
                message.cCostValue = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cEmojiIndex"))
            throw $util.ProtocolError("missing required 'cEmojiIndex'", { instance: message });
        if (!message.hasOwnProperty("cCostType"))
            throw $util.ProtocolError("missing required 'cCostType'", { instance: message });
        if (!message.hasOwnProperty("cCostValue"))
            throw $util.ProtocolError("missing required 'cCostValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_emojiConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_emojiConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_emojiConfig} proto_emojiConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_emojiConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_emojiConfig message.
     * @function verify
     * @memberof proto_emojiConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_emojiConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cEmojiIndex))
            return "cEmojiIndex: integer expected";
        if (!$util.isInteger(message.cCostType))
            return "cCostType: integer expected";
        if (!$util.isInteger(message.cCostValue))
            return "cCostValue: integer expected";
        return null;
    };

    /**
     * Creates a proto_emojiConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_emojiConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_emojiConfig} proto_emojiConfig
     */
    proto_emojiConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_emojiConfig)
            return object;
        var message = new $root.proto_emojiConfig();
        if (object.cEmojiIndex != null)
            message.cEmojiIndex = object.cEmojiIndex | 0;
        if (object.cCostType != null)
            message.cCostType = object.cCostType | 0;
        if (object.cCostValue != null)
            message.cCostValue = object.cCostValue | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_emojiConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_emojiConfig
     * @static
     * @param {proto_emojiConfig} message proto_emojiConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_emojiConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cEmojiIndex = 0;
            object.cCostType = 0;
            object.cCostValue = 0;
        }
        if (message.cEmojiIndex != null && message.hasOwnProperty("cEmojiIndex"))
            object.cEmojiIndex = message.cEmojiIndex;
        if (message.cCostType != null && message.hasOwnProperty("cCostType"))
            object.cCostType = message.cCostType;
        if (message.cCostValue != null && message.hasOwnProperty("cCostValue"))
            object.cCostValue = message.cCostValue;
        return object;
    };

    /**
     * Converts this proto_emojiConfig to JSON.
     * @function toJSON
     * @memberof proto_emojiConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_emojiConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_emojiConfig;
})();

$root.proto_gc_magic_emoji_config_not = (function() {

    /**
     * Properties of a proto_gc_magic_emoji_config_not.
     * @exports Iproto_gc_magic_emoji_config_not
     * @interface Iproto_gc_magic_emoji_config_not
     * @property {Array.<Iproto_emojiConfig>|null} [emojiConfigs] proto_gc_magic_emoji_config_not emojiConfigs
     */

    /**
     * Constructs a new proto_gc_magic_emoji_config_not.
     * @exports proto_gc_magic_emoji_config_not
     * @classdesc Represents a proto_gc_magic_emoji_config_not.
     * @implements Iproto_gc_magic_emoji_config_not
     * @constructor
     * @param {Iproto_gc_magic_emoji_config_not=} [properties] Properties to set
     */
    function proto_gc_magic_emoji_config_not(properties) {
        this.emojiConfigs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_magic_emoji_config_not emojiConfigs.
     * @member {Array.<Iproto_emojiConfig>} emojiConfigs
     * @memberof proto_gc_magic_emoji_config_not
     * @instance
     */
    proto_gc_magic_emoji_config_not.prototype.emojiConfigs = $util.emptyArray;

    /**
     * Creates a new proto_gc_magic_emoji_config_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {Iproto_gc_magic_emoji_config_not=} [properties] Properties to set
     * @returns {proto_gc_magic_emoji_config_not} proto_gc_magic_emoji_config_not instance
     */
    proto_gc_magic_emoji_config_not.create = function create(properties) {
        return new proto_gc_magic_emoji_config_not(properties);
    };

    /**
     * Encodes the specified proto_gc_magic_emoji_config_not message. Does not implicitly {@link proto_gc_magic_emoji_config_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {Iproto_gc_magic_emoji_config_not} message proto_gc_magic_emoji_config_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_magic_emoji_config_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.emojiConfigs != null && message.emojiConfigs.length)
            for (var i = 0; i < message.emojiConfigs.length; ++i)
                $root.proto_emojiConfig.encode(message.emojiConfigs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_magic_emoji_config_not message, length delimited. Does not implicitly {@link proto_gc_magic_emoji_config_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {Iproto_gc_magic_emoji_config_not} message proto_gc_magic_emoji_config_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_magic_emoji_config_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_magic_emoji_config_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_magic_emoji_config_not} proto_gc_magic_emoji_config_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_magic_emoji_config_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_magic_emoji_config_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.emojiConfigs && message.emojiConfigs.length))
                    message.emojiConfigs = [];
                message.emojiConfigs.push($root.proto_emojiConfig.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_magic_emoji_config_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_magic_emoji_config_not} proto_gc_magic_emoji_config_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_magic_emoji_config_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_magic_emoji_config_not message.
     * @function verify
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_magic_emoji_config_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.emojiConfigs != null && message.hasOwnProperty("emojiConfigs")) {
            if (!Array.isArray(message.emojiConfigs))
                return "emojiConfigs: array expected";
            for (var i = 0; i < message.emojiConfigs.length; ++i) {
                var error = $root.proto_emojiConfig.verify(message.emojiConfigs[i]);
                if (error)
                    return "emojiConfigs." + error;
            }
        }
        return null;
    };

    /**
     * Creates a proto_gc_magic_emoji_config_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_magic_emoji_config_not} proto_gc_magic_emoji_config_not
     */
    proto_gc_magic_emoji_config_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_magic_emoji_config_not)
            return object;
        var message = new $root.proto_gc_magic_emoji_config_not();
        if (object.emojiConfigs) {
            if (!Array.isArray(object.emojiConfigs))
                throw TypeError(".proto_gc_magic_emoji_config_not.emojiConfigs: array expected");
            message.emojiConfigs = [];
            for (var i = 0; i < object.emojiConfigs.length; ++i) {
                if (typeof object.emojiConfigs[i] !== "object")
                    throw TypeError(".proto_gc_magic_emoji_config_not.emojiConfigs: object expected");
                message.emojiConfigs[i] = $root.proto_emojiConfig.fromObject(object.emojiConfigs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_magic_emoji_config_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_magic_emoji_config_not
     * @static
     * @param {proto_gc_magic_emoji_config_not} message proto_gc_magic_emoji_config_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_magic_emoji_config_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.emojiConfigs = [];
        if (message.emojiConfigs && message.emojiConfigs.length) {
            object.emojiConfigs = [];
            for (var j = 0; j < message.emojiConfigs.length; ++j)
                object.emojiConfigs[j] = $root.proto_emojiConfig.toObject(message.emojiConfigs[j], options);
        }
        return object;
    };

    /**
     * Converts this proto_gc_magic_emoji_config_not to JSON.
     * @function toJSON
     * @memberof proto_gc_magic_emoji_config_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_magic_emoji_config_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_magic_emoji_config_not;
})();

$root.proto_gc_play_card_private_not = (function() {

    /**
     * Properties of a proto_gc_play_card_private_not.
     * @exports Iproto_gc_play_card_private_not
     * @interface Iproto_gc_play_card_private_not
     * @property {number} cChairID proto_gc_play_card_private_not cChairID
     * @property {Array.<Iproto_CCard>|null} [vecCards] proto_gc_play_card_private_not vecCards
     * @property {Iproto_CCardsType} cType proto_gc_play_card_private_not cType
     */

    /**
     * Constructs a new proto_gc_play_card_private_not.
     * @exports proto_gc_play_card_private_not
     * @classdesc Represents a proto_gc_play_card_private_not.
     * @implements Iproto_gc_play_card_private_not
     * @constructor
     * @param {Iproto_gc_play_card_private_not=} [properties] Properties to set
     */
    function proto_gc_play_card_private_not(properties) {
        this.vecCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_play_card_private_not cChairID.
     * @member {number} cChairID
     * @memberof proto_gc_play_card_private_not
     * @instance
     */
    proto_gc_play_card_private_not.prototype.cChairID = 0;

    /**
     * proto_gc_play_card_private_not vecCards.
     * @member {Array.<Iproto_CCard>} vecCards
     * @memberof proto_gc_play_card_private_not
     * @instance
     */
    proto_gc_play_card_private_not.prototype.vecCards = $util.emptyArray;

    /**
     * proto_gc_play_card_private_not cType.
     * @member {Iproto_CCardsType} cType
     * @memberof proto_gc_play_card_private_not
     * @instance
     */
    proto_gc_play_card_private_not.prototype.cType = null;

    /**
     * Creates a new proto_gc_play_card_private_not instance using the specified properties.
     * @function create
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {Iproto_gc_play_card_private_not=} [properties] Properties to set
     * @returns {proto_gc_play_card_private_not} proto_gc_play_card_private_not instance
     */
    proto_gc_play_card_private_not.create = function create(properties) {
        return new proto_gc_play_card_private_not(properties);
    };

    /**
     * Encodes the specified proto_gc_play_card_private_not message. Does not implicitly {@link proto_gc_play_card_private_not.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {Iproto_gc_play_card_private_not} message proto_gc_play_card_private_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_play_card_private_not.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cChairID);
        if (message.vecCards != null && message.vecCards.length)
            for (var i = 0; i < message.vecCards.length; ++i)
                $root.proto_CCard.encode(message.vecCards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        $root.proto_CCardsType.encode(message.cType, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified proto_gc_play_card_private_not message, length delimited. Does not implicitly {@link proto_gc_play_card_private_not.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {Iproto_gc_play_card_private_not} message proto_gc_play_card_private_not message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_play_card_private_not.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_play_card_private_not message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_play_card_private_not} proto_gc_play_card_private_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_play_card_private_not.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_play_card_private_not();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cChairID = reader.int32();
                break;
            case 2:
                if (!(message.vecCards && message.vecCards.length))
                    message.vecCards = [];
                message.vecCards.push($root.proto_CCard.decode(reader, reader.uint32()));
                break;
            case 3:
                message.cType = $root.proto_CCardsType.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cChairID"))
            throw $util.ProtocolError("missing required 'cChairID'", { instance: message });
        if (!message.hasOwnProperty("cType"))
            throw $util.ProtocolError("missing required 'cType'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_play_card_private_not message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_play_card_private_not} proto_gc_play_card_private_not
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_play_card_private_not.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_play_card_private_not message.
     * @function verify
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_play_card_private_not.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cChairID))
            return "cChairID: integer expected";
        if (message.vecCards != null && message.hasOwnProperty("vecCards")) {
            if (!Array.isArray(message.vecCards))
                return "vecCards: array expected";
            for (var i = 0; i < message.vecCards.length; ++i) {
                var error = $root.proto_CCard.verify(message.vecCards[i]);
                if (error)
                    return "vecCards." + error;
            }
        }
        {
            var error = $root.proto_CCardsType.verify(message.cType);
            if (error)
                return "cType." + error;
        }
        return null;
    };

    /**
     * Creates a proto_gc_play_card_private_not message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_play_card_private_not} proto_gc_play_card_private_not
     */
    proto_gc_play_card_private_not.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_play_card_private_not)
            return object;
        var message = new $root.proto_gc_play_card_private_not();
        if (object.cChairID != null)
            message.cChairID = object.cChairID | 0;
        if (object.vecCards) {
            if (!Array.isArray(object.vecCards))
                throw TypeError(".proto_gc_play_card_private_not.vecCards: array expected");
            message.vecCards = [];
            for (var i = 0; i < object.vecCards.length; ++i) {
                if (typeof object.vecCards[i] !== "object")
                    throw TypeError(".proto_gc_play_card_private_not.vecCards: object expected");
                message.vecCards[i] = $root.proto_CCard.fromObject(object.vecCards[i]);
            }
        }
        if (object.cType != null) {
            if (typeof object.cType !== "object")
                throw TypeError(".proto_gc_play_card_private_not.cType: object expected");
            message.cType = $root.proto_CCardsType.fromObject(object.cType);
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_play_card_private_not message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_play_card_private_not
     * @static
     * @param {proto_gc_play_card_private_not} message proto_gc_play_card_private_not
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_play_card_private_not.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.vecCards = [];
        if (options.defaults) {
            object.cChairID = 0;
            object.cType = null;
        }
        if (message.cChairID != null && message.hasOwnProperty("cChairID"))
            object.cChairID = message.cChairID;
        if (message.vecCards && message.vecCards.length) {
            object.vecCards = [];
            for (var j = 0; j < message.vecCards.length; ++j)
                object.vecCards[j] = $root.proto_CCard.toObject(message.vecCards[j], options);
        }
        if (message.cType != null && message.hasOwnProperty("cType"))
            object.cType = $root.proto_CCardsType.toObject(message.cType, options);
        return object;
    };

    /**
     * Converts this proto_gc_play_card_private_not to JSON.
     * @function toJSON
     * @memberof proto_gc_play_card_private_not
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_play_card_private_not.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_play_card_private_not;
})();

$root.proto_cg_look_lord_card_req = (function() {

    /**
     * Properties of a proto_cg_look_lord_card_req.
     * @exports Iproto_cg_look_lord_card_req
     * @interface Iproto_cg_look_lord_card_req
     */

    /**
     * Constructs a new proto_cg_look_lord_card_req.
     * @exports proto_cg_look_lord_card_req
     * @classdesc Represents a proto_cg_look_lord_card_req.
     * @implements Iproto_cg_look_lord_card_req
     * @constructor
     * @param {Iproto_cg_look_lord_card_req=} [properties] Properties to set
     */
    function proto_cg_look_lord_card_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_look_lord_card_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {Iproto_cg_look_lord_card_req=} [properties] Properties to set
     * @returns {proto_cg_look_lord_card_req} proto_cg_look_lord_card_req instance
     */
    proto_cg_look_lord_card_req.create = function create(properties) {
        return new proto_cg_look_lord_card_req(properties);
    };

    /**
     * Encodes the specified proto_cg_look_lord_card_req message. Does not implicitly {@link proto_cg_look_lord_card_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {Iproto_cg_look_lord_card_req} message proto_cg_look_lord_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_look_lord_card_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_look_lord_card_req message, length delimited. Does not implicitly {@link proto_cg_look_lord_card_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {Iproto_cg_look_lord_card_req} message proto_cg_look_lord_card_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_look_lord_card_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_look_lord_card_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_look_lord_card_req} proto_cg_look_lord_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_look_lord_card_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_look_lord_card_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_look_lord_card_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_look_lord_card_req} proto_cg_look_lord_card_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_look_lord_card_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_look_lord_card_req message.
     * @function verify
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_look_lord_card_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_look_lord_card_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_look_lord_card_req} proto_cg_look_lord_card_req
     */
    proto_cg_look_lord_card_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_look_lord_card_req)
            return object;
        return new $root.proto_cg_look_lord_card_req();
    };

    /**
     * Creates a plain object from a proto_cg_look_lord_card_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_look_lord_card_req
     * @static
     * @param {proto_cg_look_lord_card_req} message proto_cg_look_lord_card_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_look_lord_card_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_look_lord_card_req to JSON.
     * @function toJSON
     * @memberof proto_cg_look_lord_card_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_look_lord_card_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_look_lord_card_req;
})();

$root.proto_gc_beishu_info_ack = (function() {

    /**
     * Properties of a proto_gc_beishu_info_ack.
     * @exports Iproto_gc_beishu_info_ack
     * @interface Iproto_gc_beishu_info_ack
     * @property {Array.<number>|null} [vecBeiShuInfo] proto_gc_beishu_info_ack vecBeiShuInfo
     * @property {Array.<number>|null} [vecPlayerBeiShu] proto_gc_beishu_info_ack vecPlayerBeiShu
     */

    /**
     * Constructs a new proto_gc_beishu_info_ack.
     * @exports proto_gc_beishu_info_ack
     * @classdesc Represents a proto_gc_beishu_info_ack.
     * @implements Iproto_gc_beishu_info_ack
     * @constructor
     * @param {Iproto_gc_beishu_info_ack=} [properties] Properties to set
     */
    function proto_gc_beishu_info_ack(properties) {
        this.vecBeiShuInfo = [];
        this.vecPlayerBeiShu = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_beishu_info_ack vecBeiShuInfo.
     * @member {Array.<number>} vecBeiShuInfo
     * @memberof proto_gc_beishu_info_ack
     * @instance
     */
    proto_gc_beishu_info_ack.prototype.vecBeiShuInfo = $util.emptyArray;

    /**
     * proto_gc_beishu_info_ack vecPlayerBeiShu.
     * @member {Array.<number>} vecPlayerBeiShu
     * @memberof proto_gc_beishu_info_ack
     * @instance
     */
    proto_gc_beishu_info_ack.prototype.vecPlayerBeiShu = $util.emptyArray;

    /**
     * Creates a new proto_gc_beishu_info_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {Iproto_gc_beishu_info_ack=} [properties] Properties to set
     * @returns {proto_gc_beishu_info_ack} proto_gc_beishu_info_ack instance
     */
    proto_gc_beishu_info_ack.create = function create(properties) {
        return new proto_gc_beishu_info_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_beishu_info_ack message. Does not implicitly {@link proto_gc_beishu_info_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {Iproto_gc_beishu_info_ack} message proto_gc_beishu_info_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_beishu_info_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.vecBeiShuInfo != null && message.vecBeiShuInfo.length)
            for (var i = 0; i < message.vecBeiShuInfo.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vecBeiShuInfo[i]);
        if (message.vecPlayerBeiShu != null && message.vecPlayerBeiShu.length)
            for (var i = 0; i < message.vecPlayerBeiShu.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.vecPlayerBeiShu[i]);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_beishu_info_ack message, length delimited. Does not implicitly {@link proto_gc_beishu_info_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {Iproto_gc_beishu_info_ack} message proto_gc_beishu_info_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_beishu_info_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_beishu_info_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_beishu_info_ack} proto_gc_beishu_info_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_beishu_info_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_beishu_info_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.vecBeiShuInfo && message.vecBeiShuInfo.length))
                    message.vecBeiShuInfo = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecBeiShuInfo.push(reader.int32());
                } else
                    message.vecBeiShuInfo.push(reader.int32());
                break;
            case 2:
                if (!(message.vecPlayerBeiShu && message.vecPlayerBeiShu.length))
                    message.vecPlayerBeiShu = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.vecPlayerBeiShu.push(reader.int32());
                } else
                    message.vecPlayerBeiShu.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_gc_beishu_info_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_beishu_info_ack} proto_gc_beishu_info_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_beishu_info_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_beishu_info_ack message.
     * @function verify
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_beishu_info_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.vecBeiShuInfo != null && message.hasOwnProperty("vecBeiShuInfo")) {
            if (!Array.isArray(message.vecBeiShuInfo))
                return "vecBeiShuInfo: array expected";
            for (var i = 0; i < message.vecBeiShuInfo.length; ++i)
                if (!$util.isInteger(message.vecBeiShuInfo[i]))
                    return "vecBeiShuInfo: integer[] expected";
        }
        if (message.vecPlayerBeiShu != null && message.hasOwnProperty("vecPlayerBeiShu")) {
            if (!Array.isArray(message.vecPlayerBeiShu))
                return "vecPlayerBeiShu: array expected";
            for (var i = 0; i < message.vecPlayerBeiShu.length; ++i)
                if (!$util.isInteger(message.vecPlayerBeiShu[i]))
                    return "vecPlayerBeiShu: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a proto_gc_beishu_info_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_beishu_info_ack} proto_gc_beishu_info_ack
     */
    proto_gc_beishu_info_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_beishu_info_ack)
            return object;
        var message = new $root.proto_gc_beishu_info_ack();
        if (object.vecBeiShuInfo) {
            if (!Array.isArray(object.vecBeiShuInfo))
                throw TypeError(".proto_gc_beishu_info_ack.vecBeiShuInfo: array expected");
            message.vecBeiShuInfo = [];
            for (var i = 0; i < object.vecBeiShuInfo.length; ++i)
                message.vecBeiShuInfo[i] = object.vecBeiShuInfo[i] | 0;
        }
        if (object.vecPlayerBeiShu) {
            if (!Array.isArray(object.vecPlayerBeiShu))
                throw TypeError(".proto_gc_beishu_info_ack.vecPlayerBeiShu: array expected");
            message.vecPlayerBeiShu = [];
            for (var i = 0; i < object.vecPlayerBeiShu.length; ++i)
                message.vecPlayerBeiShu[i] = object.vecPlayerBeiShu[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_beishu_info_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_beishu_info_ack
     * @static
     * @param {proto_gc_beishu_info_ack} message proto_gc_beishu_info_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_beishu_info_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.vecBeiShuInfo = [];
            object.vecPlayerBeiShu = [];
        }
        if (message.vecBeiShuInfo && message.vecBeiShuInfo.length) {
            object.vecBeiShuInfo = [];
            for (var j = 0; j < message.vecBeiShuInfo.length; ++j)
                object.vecBeiShuInfo[j] = message.vecBeiShuInfo[j];
        }
        if (message.vecPlayerBeiShu && message.vecPlayerBeiShu.length) {
            object.vecPlayerBeiShu = [];
            for (var j = 0; j < message.vecPlayerBeiShu.length; ++j)
                object.vecPlayerBeiShu[j] = message.vecPlayerBeiShu[j];
        }
        return object;
    };

    /**
     * Converts this proto_gc_beishu_info_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_beishu_info_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_beishu_info_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_beishu_info_ack;
})();

$root.proto_cg_beishu_info_req = (function() {

    /**
     * Properties of a proto_cg_beishu_info_req.
     * @exports Iproto_cg_beishu_info_req
     * @interface Iproto_cg_beishu_info_req
     */

    /**
     * Constructs a new proto_cg_beishu_info_req.
     * @exports proto_cg_beishu_info_req
     * @classdesc Represents a proto_cg_beishu_info_req.
     * @implements Iproto_cg_beishu_info_req
     * @constructor
     * @param {Iproto_cg_beishu_info_req=} [properties] Properties to set
     */
    function proto_cg_beishu_info_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new proto_cg_beishu_info_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {Iproto_cg_beishu_info_req=} [properties] Properties to set
     * @returns {proto_cg_beishu_info_req} proto_cg_beishu_info_req instance
     */
    proto_cg_beishu_info_req.create = function create(properties) {
        return new proto_cg_beishu_info_req(properties);
    };

    /**
     * Encodes the specified proto_cg_beishu_info_req message. Does not implicitly {@link proto_cg_beishu_info_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {Iproto_cg_beishu_info_req} message proto_cg_beishu_info_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_beishu_info_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified proto_cg_beishu_info_req message, length delimited. Does not implicitly {@link proto_cg_beishu_info_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {Iproto_cg_beishu_info_req} message proto_cg_beishu_info_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_beishu_info_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_beishu_info_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_beishu_info_req} proto_cg_beishu_info_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_beishu_info_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_beishu_info_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a proto_cg_beishu_info_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_beishu_info_req} proto_cg_beishu_info_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_beishu_info_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_beishu_info_req message.
     * @function verify
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_beishu_info_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a proto_cg_beishu_info_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_beishu_info_req} proto_cg_beishu_info_req
     */
    proto_cg_beishu_info_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_beishu_info_req)
            return object;
        return new $root.proto_cg_beishu_info_req();
    };

    /**
     * Creates a plain object from a proto_cg_beishu_info_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_beishu_info_req
     * @static
     * @param {proto_cg_beishu_info_req} message proto_cg_beishu_info_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_beishu_info_req.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this proto_cg_beishu_info_req to JSON.
     * @function toJSON
     * @memberof proto_cg_beishu_info_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_beishu_info_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_beishu_info_req;
})();

$root.proto_cg_regain_lose_score_req = (function() {

    /**
     * Properties of a proto_cg_regain_lose_score_req.
     * @exports Iproto_cg_regain_lose_score_req
     * @interface Iproto_cg_regain_lose_score_req
     * @property {number} nOp proto_cg_regain_lose_score_req nOp
     */

    /**
     * Constructs a new proto_cg_regain_lose_score_req.
     * @exports proto_cg_regain_lose_score_req
     * @classdesc Represents a proto_cg_regain_lose_score_req.
     * @implements Iproto_cg_regain_lose_score_req
     * @constructor
     * @param {Iproto_cg_regain_lose_score_req=} [properties] Properties to set
     */
    function proto_cg_regain_lose_score_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_regain_lose_score_req nOp.
     * @member {number} nOp
     * @memberof proto_cg_regain_lose_score_req
     * @instance
     */
    proto_cg_regain_lose_score_req.prototype.nOp = 0;

    /**
     * Creates a new proto_cg_regain_lose_score_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {Iproto_cg_regain_lose_score_req=} [properties] Properties to set
     * @returns {proto_cg_regain_lose_score_req} proto_cg_regain_lose_score_req instance
     */
    proto_cg_regain_lose_score_req.create = function create(properties) {
        return new proto_cg_regain_lose_score_req(properties);
    };

    /**
     * Encodes the specified proto_cg_regain_lose_score_req message. Does not implicitly {@link proto_cg_regain_lose_score_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {Iproto_cg_regain_lose_score_req} message proto_cg_regain_lose_score_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_regain_lose_score_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nOp);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_regain_lose_score_req message, length delimited. Does not implicitly {@link proto_cg_regain_lose_score_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {Iproto_cg_regain_lose_score_req} message proto_cg_regain_lose_score_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_regain_lose_score_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_regain_lose_score_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_regain_lose_score_req} proto_cg_regain_lose_score_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_regain_lose_score_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_regain_lose_score_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nOp = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nOp"))
            throw $util.ProtocolError("missing required 'nOp'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_regain_lose_score_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_regain_lose_score_req} proto_cg_regain_lose_score_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_regain_lose_score_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_regain_lose_score_req message.
     * @function verify
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_regain_lose_score_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nOp))
            return "nOp: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_regain_lose_score_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_regain_lose_score_req} proto_cg_regain_lose_score_req
     */
    proto_cg_regain_lose_score_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_regain_lose_score_req)
            return object;
        var message = new $root.proto_cg_regain_lose_score_req();
        if (object.nOp != null)
            message.nOp = object.nOp | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_regain_lose_score_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_regain_lose_score_req
     * @static
     * @param {proto_cg_regain_lose_score_req} message proto_cg_regain_lose_score_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_regain_lose_score_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nOp = 0;
        if (message.nOp != null && message.hasOwnProperty("nOp"))
            object.nOp = message.nOp;
        return object;
    };

    /**
     * Converts this proto_cg_regain_lose_score_req to JSON.
     * @function toJSON
     * @memberof proto_cg_regain_lose_score_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_regain_lose_score_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_regain_lose_score_req;
})();

$root.proto_gc_regain_lose_score_ack = (function() {

    /**
     * Properties of a proto_gc_regain_lose_score_ack.
     * @exports Iproto_gc_regain_lose_score_ack
     * @interface Iproto_gc_regain_lose_score_ack
     * @property {number} nRet proto_gc_regain_lose_score_ack nRet
     * @property {number} nTime proto_gc_regain_lose_score_ack nTime
     * @property {Array.<number>|null} [nValue] proto_gc_regain_lose_score_ack nValue
     * @property {number} nCurCount proto_gc_regain_lose_score_ack nCurCount
     */

    /**
     * Constructs a new proto_gc_regain_lose_score_ack.
     * @exports proto_gc_regain_lose_score_ack
     * @classdesc Represents a proto_gc_regain_lose_score_ack.
     * @implements Iproto_gc_regain_lose_score_ack
     * @constructor
     * @param {Iproto_gc_regain_lose_score_ack=} [properties] Properties to set
     */
    function proto_gc_regain_lose_score_ack(properties) {
        this.nValue = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_regain_lose_score_ack nRet.
     * @member {number} nRet
     * @memberof proto_gc_regain_lose_score_ack
     * @instance
     */
    proto_gc_regain_lose_score_ack.prototype.nRet = 0;

    /**
     * proto_gc_regain_lose_score_ack nTime.
     * @member {number} nTime
     * @memberof proto_gc_regain_lose_score_ack
     * @instance
     */
    proto_gc_regain_lose_score_ack.prototype.nTime = 0;

    /**
     * proto_gc_regain_lose_score_ack nValue.
     * @member {Array.<number>} nValue
     * @memberof proto_gc_regain_lose_score_ack
     * @instance
     */
    proto_gc_regain_lose_score_ack.prototype.nValue = $util.emptyArray;

    /**
     * proto_gc_regain_lose_score_ack nCurCount.
     * @member {number} nCurCount
     * @memberof proto_gc_regain_lose_score_ack
     * @instance
     */
    proto_gc_regain_lose_score_ack.prototype.nCurCount = 0;

    /**
     * Creates a new proto_gc_regain_lose_score_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {Iproto_gc_regain_lose_score_ack=} [properties] Properties to set
     * @returns {proto_gc_regain_lose_score_ack} proto_gc_regain_lose_score_ack instance
     */
    proto_gc_regain_lose_score_ack.create = function create(properties) {
        return new proto_gc_regain_lose_score_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_regain_lose_score_ack message. Does not implicitly {@link proto_gc_regain_lose_score_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {Iproto_gc_regain_lose_score_ack} message proto_gc_regain_lose_score_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_regain_lose_score_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nRet);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nTime);
        if (message.nValue != null && message.nValue.length)
            for (var i = 0; i < message.nValue.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nValue[i]);
        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nCurCount);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_regain_lose_score_ack message, length delimited. Does not implicitly {@link proto_gc_regain_lose_score_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {Iproto_gc_regain_lose_score_ack} message proto_gc_regain_lose_score_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_regain_lose_score_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_regain_lose_score_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_regain_lose_score_ack} proto_gc_regain_lose_score_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_regain_lose_score_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_regain_lose_score_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nRet = reader.int32();
                break;
            case 2:
                message.nTime = reader.int32();
                break;
            case 3:
                if (!(message.nValue && message.nValue.length))
                    message.nValue = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.nValue.push(reader.int32());
                } else
                    message.nValue.push(reader.int32());
                break;
            case 4:
                message.nCurCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nRet"))
            throw $util.ProtocolError("missing required 'nRet'", { instance: message });
        if (!message.hasOwnProperty("nTime"))
            throw $util.ProtocolError("missing required 'nTime'", { instance: message });
        if (!message.hasOwnProperty("nCurCount"))
            throw $util.ProtocolError("missing required 'nCurCount'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_regain_lose_score_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_regain_lose_score_ack} proto_gc_regain_lose_score_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_regain_lose_score_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_regain_lose_score_ack message.
     * @function verify
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_regain_lose_score_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nRet))
            return "nRet: integer expected";
        if (!$util.isInteger(message.nTime))
            return "nTime: integer expected";
        if (message.nValue != null && message.hasOwnProperty("nValue")) {
            if (!Array.isArray(message.nValue))
                return "nValue: array expected";
            for (var i = 0; i < message.nValue.length; ++i)
                if (!$util.isInteger(message.nValue[i]))
                    return "nValue: integer[] expected";
        }
        if (!$util.isInteger(message.nCurCount))
            return "nCurCount: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_regain_lose_score_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_regain_lose_score_ack} proto_gc_regain_lose_score_ack
     */
    proto_gc_regain_lose_score_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_regain_lose_score_ack)
            return object;
        var message = new $root.proto_gc_regain_lose_score_ack();
        if (object.nRet != null)
            message.nRet = object.nRet | 0;
        if (object.nTime != null)
            message.nTime = object.nTime | 0;
        if (object.nValue) {
            if (!Array.isArray(object.nValue))
                throw TypeError(".proto_gc_regain_lose_score_ack.nValue: array expected");
            message.nValue = [];
            for (var i = 0; i < object.nValue.length; ++i)
                message.nValue[i] = object.nValue[i] | 0;
        }
        if (object.nCurCount != null)
            message.nCurCount = object.nCurCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_regain_lose_score_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_regain_lose_score_ack
     * @static
     * @param {proto_gc_regain_lose_score_ack} message proto_gc_regain_lose_score_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_regain_lose_score_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.nValue = [];
        if (options.defaults) {
            object.nRet = 0;
            object.nTime = 0;
            object.nCurCount = 0;
        }
        if (message.nRet != null && message.hasOwnProperty("nRet"))
            object.nRet = message.nRet;
        if (message.nTime != null && message.hasOwnProperty("nTime"))
            object.nTime = message.nTime;
        if (message.nValue && message.nValue.length) {
            object.nValue = [];
            for (var j = 0; j < message.nValue.length; ++j)
                object.nValue[j] = message.nValue[j];
        }
        if (message.nCurCount != null && message.hasOwnProperty("nCurCount"))
            object.nCurCount = message.nCurCount;
        return object;
    };

    /**
     * Converts this proto_gc_regain_lose_score_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_regain_lose_score_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_regain_lose_score_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_regain_lose_score_ack;
})();

$root.proto_cg_enable_invincible_req = (function() {

    /**
     * Properties of a proto_cg_enable_invincible_req.
     * @exports Iproto_cg_enable_invincible_req
     * @interface Iproto_cg_enable_invincible_req
     * @property {number} nOp proto_cg_enable_invincible_req nOp
     */

    /**
     * Constructs a new proto_cg_enable_invincible_req.
     * @exports proto_cg_enable_invincible_req
     * @classdesc Represents a proto_cg_enable_invincible_req.
     * @implements Iproto_cg_enable_invincible_req
     * @constructor
     * @param {Iproto_cg_enable_invincible_req=} [properties] Properties to set
     */
    function proto_cg_enable_invincible_req(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_cg_enable_invincible_req nOp.
     * @member {number} nOp
     * @memberof proto_cg_enable_invincible_req
     * @instance
     */
    proto_cg_enable_invincible_req.prototype.nOp = 0;

    /**
     * Creates a new proto_cg_enable_invincible_req instance using the specified properties.
     * @function create
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {Iproto_cg_enable_invincible_req=} [properties] Properties to set
     * @returns {proto_cg_enable_invincible_req} proto_cg_enable_invincible_req instance
     */
    proto_cg_enable_invincible_req.create = function create(properties) {
        return new proto_cg_enable_invincible_req(properties);
    };

    /**
     * Encodes the specified proto_cg_enable_invincible_req message. Does not implicitly {@link proto_cg_enable_invincible_req.verify|verify} messages.
     * @function encode
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {Iproto_cg_enable_invincible_req} message proto_cg_enable_invincible_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_enable_invincible_req.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nOp);
        return writer;
    };

    /**
     * Encodes the specified proto_cg_enable_invincible_req message, length delimited. Does not implicitly {@link proto_cg_enable_invincible_req.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {Iproto_cg_enable_invincible_req} message proto_cg_enable_invincible_req message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_cg_enable_invincible_req.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_cg_enable_invincible_req message from the specified reader or buffer.
     * @function decode
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_cg_enable_invincible_req} proto_cg_enable_invincible_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_enable_invincible_req.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_cg_enable_invincible_req();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nOp = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nOp"))
            throw $util.ProtocolError("missing required 'nOp'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_cg_enable_invincible_req message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_cg_enable_invincible_req} proto_cg_enable_invincible_req
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_cg_enable_invincible_req.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_cg_enable_invincible_req message.
     * @function verify
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_cg_enable_invincible_req.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nOp))
            return "nOp: integer expected";
        return null;
    };

    /**
     * Creates a proto_cg_enable_invincible_req message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_cg_enable_invincible_req} proto_cg_enable_invincible_req
     */
    proto_cg_enable_invincible_req.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_cg_enable_invincible_req)
            return object;
        var message = new $root.proto_cg_enable_invincible_req();
        if (object.nOp != null)
            message.nOp = object.nOp | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_cg_enable_invincible_req message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_cg_enable_invincible_req
     * @static
     * @param {proto_cg_enable_invincible_req} message proto_cg_enable_invincible_req
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_cg_enable_invincible_req.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nOp = 0;
        if (message.nOp != null && message.hasOwnProperty("nOp"))
            object.nOp = message.nOp;
        return object;
    };

    /**
     * Converts this proto_cg_enable_invincible_req to JSON.
     * @function toJSON
     * @memberof proto_cg_enable_invincible_req
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_cg_enable_invincible_req.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_cg_enable_invincible_req;
})();

$root.proto_gc_enable_invincible_ack = (function() {

    /**
     * Properties of a proto_gc_enable_invincible_ack.
     * @exports Iproto_gc_enable_invincible_ack
     * @interface Iproto_gc_enable_invincible_ack
     * @property {number} nRet proto_gc_enable_invincible_ack nRet
     */

    /**
     * Constructs a new proto_gc_enable_invincible_ack.
     * @exports proto_gc_enable_invincible_ack
     * @classdesc Represents a proto_gc_enable_invincible_ack.
     * @implements Iproto_gc_enable_invincible_ack
     * @constructor
     * @param {Iproto_gc_enable_invincible_ack=} [properties] Properties to set
     */
    function proto_gc_enable_invincible_ack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * proto_gc_enable_invincible_ack nRet.
     * @member {number} nRet
     * @memberof proto_gc_enable_invincible_ack
     * @instance
     */
    proto_gc_enable_invincible_ack.prototype.nRet = 0;

    /**
     * Creates a new proto_gc_enable_invincible_ack instance using the specified properties.
     * @function create
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {Iproto_gc_enable_invincible_ack=} [properties] Properties to set
     * @returns {proto_gc_enable_invincible_ack} proto_gc_enable_invincible_ack instance
     */
    proto_gc_enable_invincible_ack.create = function create(properties) {
        return new proto_gc_enable_invincible_ack(properties);
    };

    /**
     * Encodes the specified proto_gc_enable_invincible_ack message. Does not implicitly {@link proto_gc_enable_invincible_ack.verify|verify} messages.
     * @function encode
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {Iproto_gc_enable_invincible_ack} message proto_gc_enable_invincible_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_enable_invincible_ack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nRet);
        return writer;
    };

    /**
     * Encodes the specified proto_gc_enable_invincible_ack message, length delimited. Does not implicitly {@link proto_gc_enable_invincible_ack.verify|verify} messages.
     * @function encodeDelimited
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {Iproto_gc_enable_invincible_ack} message proto_gc_enable_invincible_ack message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    proto_gc_enable_invincible_ack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a proto_gc_enable_invincible_ack message from the specified reader or buffer.
     * @function decode
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {proto_gc_enable_invincible_ack} proto_gc_enable_invincible_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_enable_invincible_ack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.proto_gc_enable_invincible_ack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nRet = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("nRet"))
            throw $util.ProtocolError("missing required 'nRet'", { instance: message });
        return message;
    };

    /**
     * Decodes a proto_gc_enable_invincible_ack message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {proto_gc_enable_invincible_ack} proto_gc_enable_invincible_ack
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    proto_gc_enable_invincible_ack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a proto_gc_enable_invincible_ack message.
     * @function verify
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    proto_gc_enable_invincible_ack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.nRet))
            return "nRet: integer expected";
        return null;
    };

    /**
     * Creates a proto_gc_enable_invincible_ack message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {proto_gc_enable_invincible_ack} proto_gc_enable_invincible_ack
     */
    proto_gc_enable_invincible_ack.fromObject = function fromObject(object) {
        if (object instanceof $root.proto_gc_enable_invincible_ack)
            return object;
        var message = new $root.proto_gc_enable_invincible_ack();
        if (object.nRet != null)
            message.nRet = object.nRet | 0;
        return message;
    };

    /**
     * Creates a plain object from a proto_gc_enable_invincible_ack message. Also converts values to other types if specified.
     * @function toObject
     * @memberof proto_gc_enable_invincible_ack
     * @static
     * @param {proto_gc_enable_invincible_ack} message proto_gc_enable_invincible_ack
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    proto_gc_enable_invincible_ack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nRet = 0;
        if (message.nRet != null && message.hasOwnProperty("nRet"))
            object.nRet = message.nRet;
        return object;
    };

    /**
     * Converts this proto_gc_enable_invincible_ack to JSON.
     * @function toJSON
     * @memberof proto_gc_enable_invincible_ack
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    proto_gc_enable_invincible_ack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return proto_gc_enable_invincible_ack;
})();

module.exports = $root;
